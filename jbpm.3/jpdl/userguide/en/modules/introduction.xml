<chapter id="introduction">
  <title>Introduction</title>

  <para>JBoss jBPM is a flexible, extensible workflow management system. JBoss jBPM
  has an intuitive process language to express business processes graphically in terms 
  of tasks, wait states for asynchronous communication, timers, automated actions,...
  To bind these operations together, JBoss jBPM has the most powerful and extensible 
  control flow mechanism.</para>
  
  <para>JBoss jBPM has minimal dependencies and can be used as easy as using a java library.
  But it can also be used in environments where extreme throughput is crucial by 
  deploying it on a J2EE clustered application server. </para>
  
  <para>JBoss jBPM can be configured with any database and it can be deployed on any 
  application server.</para>
  
  <section>
    <title>Overview</title>
    <para>The core workflow and BPM functionality is packaged as a simple java library.
    This library includes a service to store, update and retrieve process information from 
    the jBPM database.</para>
    <figure id="overview.image">
      <title>Overview of the JBoss jBPM components</title>
      <mediaobject><imageobject><imagedata align="center" fileref="images/overview.gif"/></imageobject></mediaobject>
    </figure>
  </section>

  <section>
    <title>The JBoss jBPM starter kit</title>
    <para>The starter kit is a download that contains all the jBPM components bundled in one easy
    download.  The download includes:
    </para>
    <itemizedlist>
      <listitem><emphasis role="bold">jbpm-server</emphasis>, a preconfigured jboss application server.</listitem>
      <listitem><emphasis role="bold">jbpm-designer</emphasis>, the eclipse plugin for authoring jBPM processes graphically.</listitem>
      <listitem><emphasis role="bold">jbpm-db</emphasis>, the jBPM database compatibility package (see below).</listitem>
      <listitem><emphasis role="bold">jbpm</emphasis>, the core jbpm component including the libs and this userguide.</listitem>
      <listitem><emphasis role="bold">jbpm-bpel</emphasis>, a reference to the JBoss jBPM BPEL extension.</listitem>
    </itemizedlist>
    
    <para>The preconfigured JBoss application server has the following components installed :
    </para>
    <itemizedlist>
      <listitem><emphasis role="bold">The core jBPM component</emphasis>, packaged as a service archive</listitem>
      <listitem><emphasis role="bold">An integrated database with the jBPM tables</emphasis>: the default hypersonic database that 
      contains the jBPM tables and already contains a process.</listitem>
      <listitem><emphasis role="bold">The jBPM console web application</emphasis> that can be used by process participants 
      as well as jBPM administrators.</listitem>
      <listitem><emphasis role="bold">The jBPM scheduler</emphasis> for the execution of timers.  The scheduler is configured
      in the starters kit as a servlet.  The servlet will spawn a thread to monitor and execute the 
      timers.</listitem>
      <listitem><emphasis role="bold">The jBPM command executor</emphasis> for the asynchronous execution of commands.  The command 
      executor is also configured as a servlet.  The servlet will spawn a thread to monitor and execute the 
      commands.</listitem>
      <listitem><emphasis role="bold">One example process</emphasis> is already deployed into the jBPM database.</listitem>
    </itemizedlist>
  </section>
  
  <section>
    <title>The JBoss jBPM graphical process designer</title>
    <para>JBoss jBPM also includes a graphical designer tool.  The designer is a 
    graphical tool for authoring business processes.</para>
    <para>The JBoss jBPM graphical process designer is an eclipse plugin.  A 
    standalone installation of the designer tool is on the roadmap.</para>
    <para>The most important feature of the graphical designer tool is that it 
    includes support for both the tasks of the business analyst as well as the 
    technical developer.  This enables a smooth transition from business process 
    modelling to the practical implementation.</para>
    <para>The plugin is available as a local update site (plain zip file) for 
    installation via the standard eclipse software updates mechanism.  And there is 
    also a feature package that you can unzip in your eclipse home directory.</para>
  </section>
  
  <section>
    <title>The JBoss jBPM core component</title>
    <para>The JBoss jBPM core component is the plain java (J2SE) software for managing 
    process definitions and the runtime environment for execution of process instances.
    </para>
    <para>JBoss jBPM is a java library.  As a consequence, it can be used in any java 
    environment like e.g. a webapplication, a swing application, an EJB, a webservice,...
    The jBPM library can also be packaged and exposed as a stateless session EJB.  This
    allows clustered deployment and scalability for extreme high throughput.  The stateless
    session EJB will be written against the J2EE 1.3 specifications so that it is 
    deployable on any application server.
    </para>
    <para>The JBoss jBPM core component is packaged as a simple java library archive.
    Depending on the functionalities that you use, the library <literal>jbpm-3.0.jar</literal> 
    has some dependencies on other third party libraries such as e.g. hibernate, dom4j
    and others.  Those dependencies are clearly documented in <xref linkend="deployment" /></para>
    <para>For its persistence, jBPM uses hibernate internally.  Apart from traditional 
    O/R mapping, hibernate also resolves the SQL dialect differences between the different 
    databases, making jBPM portable across all current databases.
    </para>
    <para>The JBoss jBPM API can be accessed from any custom java software in your 
    project, like e.g. your web application, your EJB's, your web service components, 
    your message driven beans or any other java component.</para>
  </section>

  <section>
    <title>The JBoss jBPM console web application</title>
    <para>The jBPM console web application serves two purposes.  First, it serves as a central 
    user interface for interacting with runtime tasks generated by the process 
    executions.  And secondly, it is an administration and monitoring console that allows to 
    inspect and manipulate runtime instances.</para>
  </section>
  
  <section>
    <title>The JBoss jBPM identity component</title>
    <para>JBoss jBPM can integrate with any company directory that contains users and other 
    organisational information.  But for projects where no organisational information component 
    is readily available, JBoss jBPM includes this component.  The model used in the identity 
    component is richer then the traditional servlet-, ejb- and portlet models.</para>
    <para>For more information, see <xref linkend="theidentitycomponent" /></para>
  </section>
  
  <section>
    <title>The JBoss jBPM scheduler</title>
    <para>The JBoss jBPM scheduler is a component for monitoring and executing timers that 
    are scheduled during process executions.
    </para>
    <para>The timer component software is packaged in the 
    core jbpm library, but it needs to be deployed in one of the following environments: either 
    you have to configure the scheduler servlet to spawn the monitoring thread or you  have to 
    start up a separate JVM with the scheduler main.</para>
  </section>
  
  <section>
    <title>The JBoss jBPM database compatibility package</title>
    <para>The JBoss jBPM database compatibility package is a download package that contains 
    all the information, drivers and scripts to get jBPM running on your database of choice.</para>
  </section>
  
  <section>
    <title>The JBoss jBPM BPEL extension</title>
    <para>The JBoss jBPM BPEL extension is a separatly packaged extension that extends jBPM 
    with support for BPEL.  The essence of BPEL is an xml scripting language for writing web services 
    in terms of other web services.</para>
  </section>
  
</chapter>
