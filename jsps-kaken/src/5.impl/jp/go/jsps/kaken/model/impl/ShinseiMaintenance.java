/*======================================================================
 *    SYSTEM      : 日本学術振興会電子申請システム（科学研究費補助金）
 *    Source name : ShinseiMaintenance.java
 *    Description : 申請書情報管理クラス
 *
 *    Author      : Admin
 *    Date        : 2003/12/02
 *
 *    Revision history
 *    Date          Revision    Author         Description
 *    2003/12/02    V1.0        Admin          新規作成
 *====================================================================== 
 */
package jp.go.jsps.kaken.model.impl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jp.go.jsps.kaken.model.IBukyokutantoMaintenance;
import jp.go.jsps.kaken.model.IJigyoKanriMaintenance;
import jp.go.jsps.kaken.model.IPdfConvert;
import jp.go.jsps.kaken.model.IShinsainWarifuri;
import jp.go.jsps.kaken.model.IShinseiMaintenance;
import jp.go.jsps.kaken.model.IShozokuMaintenance;
import jp.go.jsps.kaken.model.common.ApplicationSettings;
import jp.go.jsps.kaken.model.common.IJigyoCd;
import jp.go.jsps.kaken.model.common.IJigyoKubun;
import jp.go.jsps.kaken.model.common.ILabelKubun;
import jp.go.jsps.kaken.model.common.ISettingKeys;
import jp.go.jsps.kaken.model.dao.exceptions.DataAccessException;
import jp.go.jsps.kaken.model.dao.exceptions.DuplicateKeyException;
import jp.go.jsps.kaken.model.dao.impl.CheckListInfoDao;
import jp.go.jsps.kaken.model.dao.impl.KenkyuSoshikikanriDao;
import jp.go.jsps.kaken.model.dao.impl.MasterKaigaibunyaInfoDao;
import jp.go.jsps.kaken.model.dao.impl.MasterKeizokuInfoDao;
import jp.go.jsps.kaken.model.dao.impl.MasterKeywordInfoDao;
import jp.go.jsps.kaken.model.dao.impl.MasterLabelInfoDao;
import jp.go.jsps.kaken.model.dao.impl.MasterRyouikiInfoDao;
import jp.go.jsps.kaken.model.dao.impl.MasterSaimokuInfoDao;
import jp.go.jsps.kaken.model.dao.impl.RyoikiKeikakushoInfoDao;
import jp.go.jsps.kaken.model.dao.impl.ShinsaKekkaInfoDao;
import jp.go.jsps.kaken.model.dao.impl.ShinseiDataInfoDao;
import jp.go.jsps.kaken.model.dao.impl.TenpuFileInfoDao;
import jp.go.jsps.kaken.model.dao.util.DatabaseUtil;
import jp.go.jsps.kaken.model.exceptions.ApplicationException;
import jp.go.jsps.kaken.model.exceptions.ConvertException;
import jp.go.jsps.kaken.model.exceptions.FileIOException;
import jp.go.jsps.kaken.model.exceptions.NoDataFoundException;
import jp.go.jsps.kaken.model.exceptions.SystemBusyException;
import jp.go.jsps.kaken.model.exceptions.TransactionException;
import jp.go.jsps.kaken.model.exceptions.ValidationException;
import jp.go.jsps.kaken.model.role.UserRole;
import jp.go.jsps.kaken.model.vo.BukyokutantoInfo;
import jp.go.jsps.kaken.model.vo.BukyokutantoPk;
import jp.go.jsps.kaken.model.vo.CheckListSearchInfo;
import jp.go.jsps.kaken.model.vo.ErrorInfo;
import jp.go.jsps.kaken.model.vo.HyokaSearchInfo;
import jp.go.jsps.kaken.model.vo.JigyoKanriInfo;
import jp.go.jsps.kaken.model.vo.JigyoKanriPk;
import jp.go.jsps.kaken.model.vo.KaigaiBunyaInfo;
import jp.go.jsps.kaken.model.vo.KeizokuInfo;
import jp.go.jsps.kaken.model.vo.KeizokuPk;
import jp.go.jsps.kaken.model.vo.KenkyushaInfo;
import jp.go.jsps.kaken.model.vo.KenkyushaPk;
import jp.go.jsps.kaken.model.vo.KeywordInfo;
import jp.go.jsps.kaken.model.vo.KikanInfo;
import jp.go.jsps.kaken.model.vo.RyoikiKeikakushoInfo;
import jp.go.jsps.kaken.model.vo.RyoikiKeikakushoPk;
import jp.go.jsps.kaken.model.vo.RyouikiInfoPk;
import jp.go.jsps.kaken.model.vo.SaimokuInfo;
import jp.go.jsps.kaken.model.vo.SaimokuPk;
import jp.go.jsps.kaken.model.vo.ShinsaKekka2ndInfo;
import jp.go.jsps.kaken.model.vo.ShinsaKekkaInfo;
import jp.go.jsps.kaken.model.vo.ShinsaKekkaReferenceInfo;
import jp.go.jsps.kaken.model.vo.ShinseiDataInfo;
import jp.go.jsps.kaken.model.vo.ShinseiDataPk;
import jp.go.jsps.kaken.model.vo.ShinseiSearchInfo;
import jp.go.jsps.kaken.model.vo.ShinseishaInfo;
import jp.go.jsps.kaken.model.vo.SimpleShinseiDataInfo;
import jp.go.jsps.kaken.model.vo.TenpuFileInfo;
import jp.go.jsps.kaken.model.vo.UserInfo;
import jp.go.jsps.kaken.model.vo.shinsei.DaihyouInfo;
import jp.go.jsps.kaken.model.vo.shinsei.KadaiInfo;
import jp.go.jsps.kaken.model.vo.shinsei.KenkyuKeihiInfo;
import jp.go.jsps.kaken.model.vo.shinsei.KenkyuSoshikiKenkyushaInfo;
import jp.go.jsps.kaken.status.StatusCode;
import jp.go.jsps.kaken.status.StatusManager;
import jp.go.jsps.kaken.util.CsvUtil;
import jp.go.jsps.kaken.util.DateUtil;
import jp.go.jsps.kaken.util.EscapeUtil;
import jp.go.jsps.kaken.util.FileResource;
import jp.go.jsps.kaken.util.FileUtil;
import jp.go.jsps.kaken.util.Page;
import jp.go.jsps.kaken.util.SendMailer;
import jp.go.jsps.kaken.util.StringUtil;
import jp.go.jsps.kaken.web.common.LabelValueBean;
import jp.go.jsps.kaken.web.common.LabelValueManager;
import jp.go.jsps.kaken.web.util.DateFormat;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * 申請書情報管理クラス.<br><br>
 * 
 * <b>概要：</b><br>
 * 申請情報を管理する。<br><br>
 * 
 * 使用テーブル
 * <table>
 * <tr><td>申請データ管理テーブル</td><td>：申請データの情報を管理</td></tr>
 * 
 * <tr><td>分科細目マスタテーブル</td><td>：分科細目コードを管理</td></tr>
 * 
 * <tr><td>ラベルマスタテーブル</td><td>：プルダウン等の名称、略称情報を管理</td></tr>
 * 
 * <tr><td>所属機関マスタテーブル</td><td>：所属機関の情報を管理</td></tr>
 * 
 * <tr><td>添付ファイル管理テーブル</td><td>：申請書に添付されたファイルの格納先ディレクトリ情報を管理</td></tr>
 * 
 * <tr><td>研究組織表管理テーブル</td><td>：申請データの研究組織表情報を管理</td></tr>
 * 
 * <tr><td>審査結果テーブル</td><td>：審査員割り振り結果情報と申請書の審査結果を管理</td></tr>
 * 
 * <tr><td>アクセス制御テーブル</td><td>：業務担当者のアクセス制御情報を管理</td></tr>
 * </table>
 */
public class ShinseiMaintenance implements IShinseiMaintenance {

    //---------------------------------------------------------------------
    // Static data
    //---------------------------------------------------------------------

    /** ログ */
    protected static Log log = LogFactory.getLog(ShinseiMaintenance.class);

	/** ログ（領域計画書概要PDF変換）*/
	protected static Log pdfLog = LogFactory.getLog("gaiyoPdf");
     
//  2007/02/03 張志男　追加ここから
    /** ログ（ステイタス）*/
    protected static Log statusLog = LogFactory.getLog("status");
// 2007/02/03　張志男　追加ここまで
    //ADD　START 2007/07/20 BIS 趙一非
    //制度改正カスタマイズ
    //一括受理ログ出力
    protected static Log juriLog = LogFactory.getLog("juri");
    //ADD　END 2007/07/20 BIS 趙一非
// 2007/02/26 苗　追加ここから
    /** ログ（領域計画書再採番）*/
    protected static Log regetRyoikiLog = LogFactory.getLog("regetRyoiki");
    
    /** ログ（応募情報再採番）*/
    protected static Log regetShinseiLog = LogFactory.getLog("regetShinsei");
// 2007/02/26　苗　追加ここまで    
    
    /** システム受付番号取得リトライ回数 */
    protected static final int SYSTEM_NO_MAX_RETRY_COUNT =
                                ApplicationSettings.getInt(ISettingKeys.SYSTEM_NO_MAX_RETRY_COUNT);
    
    /** 重複申請チェックフラグ */
    protected static final boolean CHECK_DUPLICACATION_FLAG =
                                ApplicationSettings.getBoolean(ISettingKeys.CHECK_DUPLICACATION_FLAG);    
    
    /** 
     * 申請書添付ファイル格納フォルダ.<br><br>
     * 
     * フォルダパターン：<br>
     * ${shinsei_path}/data/{0}/{1}/word/{1}.doc
     * （{0}=事業ID,{1}=システム受付番号）
     */
    private static final String SHINSEI_ANNEX_FOLDER = 
                                ApplicationSettings.getString(ISettingKeys.SHINSEI_ANNEX_FOLDER);

    /** 申請書添付PDFファイル格納フォルダ.<br><br>
     * 
     * フォルダパターン：<br>
     * ${shinsei_path}/data/{0}/{1}/word/{1}.pdf
     * （{0}=事業ID,{1}=システム受付番号）
     */
    private static final String SHINSEI_ANNEX_PDF_FOLDER = 
                                ApplicationSettings.getString(ISettingKeys.SHINSEI_ANNEX_PDF_FOLDER);

    /** 申請書添付エラーPDFファイル格納フォルダ.<br><br>
     * 
     * フォルダパターン：<br>
     * ${shinsei_path}/logs/pdf/err/{1}.pdf
     * （{0}=事業ID,{1}=システム受付番号）
     */
    private static final String SHINSEI_ANNEX_ERR_FOLDER = 
                                ApplicationSettings.getString(ISettingKeys.SHINSEI_ANNEX_ERR_FOLDER);
    
    /** 
     * 申請書推薦書ファイル格納フォルダ.<br><br>
     * 
     * フォルダパターン：<br>
     * ${shinsei_path}/data/{0}/{1}/suisen/s{1}.pdf
     * （{0}=事業ID,{1}=システム受付番号）
     */
    public static final String SHINSEI_SUISEN_FOLDER = 
                                ApplicationSettings.getString(ISettingKeys.SHINSEI_SUISEN_FOLDER);
    
    /** 
     * 申請書PDFファイル（パスワードロック無し版）格納フォルダ.<br><br>
     * 
     * フォルダパターン：<br>
     * ${shinsei_path}/data/pdf/{0}/{1}.pdf
     * （{0}=事業ID,{1}=システム受付番号）
     */
    public static final String SHINSEI_PDF_NO_PASSWORD =
                                ApplicationSettings.getString(ISettingKeys.SHINSEI_PDF_NO_PASSWORD);

    /** 
     * 評価結果ファイル格納フォルダ.<br><br>
     * 
     * フォルダパターン：<br>
     * ${shinsei_path}/work/hyoka/
     */        
    public static final String HYOKA_WORK_FOLDER =
                                ApplicationSettings.getString(ISettingKeys.HYOKA_WORK_FOLDER);
    
    /** 
     * 評価結果フォーマットパス.<br><br>
     * 
     * フォルダパターン：<br>
     * ${shinsei_path}/settings/hyoka/
     */
    public static final String HYOKA_FORMAT_PATH =
                                ApplicationSettings.getString(ISettingKeys.HYOKA_FORMAT_PATH);
    
    /** 
     * 評価結果フォーマット名.<br><br>
     * 
     * ファイル名：HYOKA.doc
     */
    public static final String HYOKA_FORMAT_FILE_NAME =
                                ApplicationSettings.getString(ISettingKeys.HYOKA_FORMAT_FILE_NAME);

    /** 評価結果出力CSVファイル名 */
    public static final String CSV_FILENAME = "HYOKA";
    
    /** 申請受理フラグ：受理 */
    public static final String FLAG_JURI_KEKKA_JURI      = "0";
    
    /** 申請受理フラグ：不受理 */
    public static final String FLAG_JURI_KEKKA_FUJURI    = "1";

    /** 申請受理フラグ：修正依頼 */
    public static final String FLAG_JURI_KEKKA_SHUSEIIRAI    = "2";
    

    /** WORDファイルの拡張子 */
    private static final String DOC = ".doc";

    /** PDFファイルの拡張子 */
    private static final String PDF = ".pdf";
    
    
    //-----------------------------------------------------------------------
    /** メールサーバアドレス */
    private static final String SMTP_SERVER_ADDRESS = 
                                ApplicationSettings.getString(ISettingKeys.SMTP_SERVER_ADDRESS); 
    /** 
     * 差出人 統一して１つ
     * */
    private static final String FROM_ADDRESS = 
                                ApplicationSettings.getString(ISettingKeys.FROM_ADDRESS);
    
    /** メール内容（申請者が申請書確認を完了したとき）「件名」 */
    private static final String SUBJECT_SHINSEISHO_KAKUNIN_KANRYO = 
                                ApplicationSettings.getString(ISettingKeys.SUBJECT_SHINSEISHO_KAKUNIN_KANRYO);

    /** メール内容（申請者が申請書確認を完了したとき）「本文」 */
    private static final String CONTENT_SHINSEISHO_KAKUNIN_KANRYO = 
                                ApplicationSettings.getString(ISettingKeys.CONTENT_SHINSEISHO_KAKUNIN_KANRYO);
    
    /** メール内容（所属機関が申請書を承認したとき）「件名」 */
    private static final String SUBJECT_SHINSEISHO_SHOZOKUKIKAN_SHONIN = 
                                ApplicationSettings.getString(ISettingKeys.SUBJECT_SHINSEISHO_SHOZOKUKIKAN_SHONIN);

    /** メール内容（所属機関が申請書を承認したとき）「本文」 */
    private static final String CONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONIN = 
                                ApplicationSettings.getString(ISettingKeys.CONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONIN);    
    
//  2006/06/29  追加　張建平　ここから      
    /** メール内容（領域代表者が研究計画調書を却下したとき）「件名」 */
    private static final String SUBJECT_RYOIKIDAIHYOSHA_KYAKKA = 
                                ApplicationSettings.getString(ISettingKeys.SUBJECT_RYOIKIDAIHYOSHA_KYAKKA);

    /** メール内容（領域代表者が研究計画調書を却下したとき）「本文」 */
    private static final String CONTENT_RYOIKIDAIHYOSHA_KYAKKA = 
                                ApplicationSettings.getString(ISettingKeys.CONTENT_RYOIKIDAIHYOSHA_KYAKKA); 
//  2006/06/29  追加　張建平　ここまで   
    //-----------------------------------------------------------------------

    /** ShinseiDataInfoDaoのsearchCsvHyokaListで繰り返しの審査員情報が格納される列 */
    private static final int COMMENT_INDEX = 22;

    /** 各審査員のコメント数 */
    private static final int COMMENT_NUM = 6;

    /** 各審査員のコメントを除いた情報数 */
    private static final int SHINSAIN_INFO_NUM = 5;

    /** 審査員数 */
    private static final int SHINSAIN_NUM = 6;
    
    /** 細目番号がマスタに存在しないフラグ 2005/8/31エラーメッセージが重複出力しない為追加 */
    private boolean notSaimokuFlg = true;
    
//2006/07/21 苗　追加ここから
    /** 申請書PDFファイル格納フォルダ(本フォルダ配下に「事業ID\システム受付番号\pdf」と続く) */
    private static String SHINSEI_PDF_FOLDER = ApplicationSettings.getString(ISettingKeys.SHINSEI_PDF_FOLDER);

    //2006.09.25 iso iso タイトルに「概要」をつけたPDF作成のため
	/** 領域計画書PDFファイル(概要つき)格納フォルダ(本フォルダ配下に「事業ID」と続く) */
    private static String RG_PDF_FOLDER = ApplicationSettings.getString(ISettingKeys.RG_PDF_FOLDER);
    
    /** 申請書XMLファイル格納フォルダ */
    private static String SHINSEI_XML_FOLDER = ApplicationSettings.getString(ISettingKeys.SHINSEI_XML_FOLDER); 
//2006/07/21　苗　追加ここまで
    
    //---------------------------------------------------------------------
    // Constructors
    //---------------------------------------------------------------------
    /**
     * コンストラクタ.
     */
    public ShinseiMaintenance() {
        super();
    }

    //---------------------------------------------------------------------
    // Methods
    //---------------------------------------------------------------------
    /**
     * システム受付番号の生成.<br><br>
     * 
     * WASのシステム日付をフォーマットし、受付番号を取得する。<br>
     * フォーマットパターン−"yyyyMMddHHmmssSSS"
     * 
     * @return システム受付番号
     */
    //2004/11/25 private → pubic
    public synchronized static String getSystemNumber() {

        //念のため1ミリ秒スリープさせて確実に別番号を返す。
        try{
            Thread.sleep(1);
        }catch(InterruptedException e){
            e.printStackTrace();    //特に何も処理しない
        }
        //現在時刻をシステム受付番号のフォーマットに変換する
        Date now = new Date();
        String systemNo = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(now);
        return systemNo;
    }

    /**
     * 申請番号の生成.<br><br>
     * 
     * 所属機関コード、整理番号から申請番号を生成する。<br><br>
     * 
     * <b>1.整理番号の取得</b>
     * 　<li>学創･･･募集区分（推薦[0],第1回[1],第2回[2]...）(1桁) + 所属機関ごとの連番(3桁)</li>
     * 　<li>特推･･･所属機関ごとの連番(4桁)</li>
     * 　<li>基盤･･･所属機関ごとの連番(4桁)（暫定）</li><br>
     * 連番は１から始まり、桁があふれた場合は０から再度連番を振っていく。<br><br>
     * 
     * (1)所属機関ごとの連番を取得<br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     select        -- 変数select　動的に変化する(下記表を参照)
     * FROM
     *     SHINSEIDATAKANRI A    -- 申請データ管理テーブル
     * WHERE
     *     A.UKETUKE_NO IS NOT NULL        -- 申請番号がNullでない
     *     AND A.SHOZOKU_CD = ?            -- 所属機関コード
     *     AND A.JIGYO_ID = ?            -- 事業コード
     * </pre>
     * </td></tr>
     * </table><br/>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.SHOZOKU_CD</td><td>第二引数dataInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.JIGYO_ID</td><td>第二引数dataInfoの変数jigyoId</td></tr>
     * </table><br>
     * 
     * 変数selectの値<br>
     * dataInfoの変数jigyoKubunの値によって動的に変化する。
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">条件</td><td width="10%">事業区分</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>1または2のとき</td><td>学創</td><td>TO_CHAR(MAX(SUBSTR(A.UKETUKE_NO,8,3)) + 1, 'FM000') SEQ_NUM</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>3のとき</td><td>特推</td><td>TO_CHAR(MAX(SUBSTR(A.UKETUKE_NO,7,4)) + 1, 'FM0000') SEQ_NUM</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>4のとき</td><td>基盤</td><td>TO_CHAR(MAX(SUBSTR(A.UKETUKE_NO,7,4)) + 1, 'FM0000') SEQ_NUM</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>1〜4以外</td><td>その他</td><td>TO_CHAR(MAX(SUBSTR(A.UKETUKE_NO,7,4)) + 1, 'FM0000') SEQ_NUM</td></tr>
     * </table><br><br>
     * 
     * (2)整理番号生成<br>
     * 　(a)学創(jigyoKubunが1または2)の場合<br>
     * 　　(1)で取得した値を所属機関ごとの連番とし、nullのときは"001"を所属機関ごとの連番とする。<br>
     * 　　StringUtilsクラスのright()メソッドを使用して、後ろから3桁に変換する。（桁あふれ対策）<br><br>
     * 
     * 　　非公募の場合は所属機関ごとの連番の先頭に「0」を付加する。<br>
     * 　　公募の場合は所属機関ごとの連番の先頭に回数(dataInfoの変数kaisu)を付加する。<br><br>
     * 
     * 　　(例)連番：008　回数：2のとき<br>
     * 　　　　整理番号：2008 となる。<br><br>
     * 
     * 　(b)特推(jigyoKubunが3)の場合<br>
     * 　　(1)で取得した値を所属機関ごとの連番とし、nullのときは"0001"を同所属機関ごとの連番とする。<br>
     * 　　StringUtilsクラスのright()メソッドを使用して、後ろから4桁に変換する。（桁あふれ対策）<br><br>
     * 
     * 　(c)基盤(jigyoKubunが4)・その他の場合(jigyoKubunが1〜4以外)<br>
     * 　　"(b)特推の場合"と同じ処理（暫定）<br><br>
     * 
     * <b>2.申請番号の生成</b><br>
     * 申請番号（機関コード−整理番号）を生成する。<br><br>
     * 
     * dataInfoから所属機関コードを取得。<br>
     * [取得した所属機関コード + "-" + 1で取得した整理番号] を申請番号とする。<br><br>
     * 
     * (例)所属機関コード：10101　取得整理番号：2008 のとき<br>
     * 　　申請番号：10101-2008 となる。<br><br>
     * 
     * 生成した申請番号を返却する。
     * 
     * @param connection    Connection
     * @param userInfo        UserInfo
     * @param dataInfo        ShinseiDataInfo
     * @return　申請番号
     * @throws ApplicationException
     */
    private static String getUketukeNumber(Connection connection,
                                           UserInfo userInfo,
                                           ShinseiDataInfo dataInfo)
            throws ApplicationException {

        try{
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            String seiriNumber = dao.getSeiriNumber(connection, dataInfo);
            
            //所属機関コード＋ハイフン＋整理番号
            return new StringBuffer(dataInfo.getDaihyouInfo().getShozokuCd())
                    .append("-")
                    .append(seiriNumber)
                    .toString();
                                
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請番号採番中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
    }

    /**
     * 重複申請チェックメソッド.<br><br>
     * 
     * 申請情報の重複チェックを行う。<br><br>
     * CHECK_DUPLICACATION_FLAGが"false"のときは必ずtrueを返す。<br><br>
     * 
     * 基盤の場合のみ重複チェックを行う｡<BR>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）<BR>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     COUNT(*) CNT 
     * FROM 
     *     SHINSEIDATAKANRI SDK 
     * INNER JOIN 
     *     JIGYOKANRI JK 
     * ON 
     *     JK.JIGYO_ID= SDK.JIGYO_ID 
     *     AND JK.NENDO = ? 
     *     AND JK.JIGYO_KUBUN = 4 
     *     AND JK.KAISU = SDK.KAISU 
     * WHERE 
     *     SDK.SHINSEISHA_ID = ? 
     *     AND SUBSTR(JK.JIGYO_ID,3,5) IN (
     *         ?        -- 二重申請のチェック対象となる事業CDのLISTの数だけ繰り返し
     *     )
     *     AND SDK.DEL_FLG = 0 
     *     AND SDK.KAISU = ?
     * </pre>
     * </td></tr>
     * </table><br/>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JK.NENDO</td><td>第三引数shinseiDataInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SDK.SHINSEISHA_ID</td><td>第三引数shinseiDataInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUBSTR(shinseiDataInfo,3,5)</td><td>第三引数dataInfoの変数jigyoCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SDK.KAISU</td><td>第三引数shinseiDataInfoの変数kaisu</td></tr>
     * </table><br>
     * 
     * 二重申請のチェック対象となる事業CDのLIST
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">基盤名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>基盤(S)</td><td>00031, 00051, 00053. 00061, 00062, 00121, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>基盤(A)（一般）</td><td>00041, 00051, 00061, 00121, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>基盤(A)（海外）</td><td>00043, 00053, 00121, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>基盤(B)（一般）</td><td>00031, 00041, 00051, 00061, 00121, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>基盤(B)（海外）</td><td>00031, 00043, 00053, 00121, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>基盤(C)（一般）</td><td>00031, 00041, 00051, 00061, 00111, 00121, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>基盤(C)（企画）</td><td>00031, 00062</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>萌芽</td><td>00061, 00111, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>若手(A)</td><td>00031, 00041, 00043, 00051, 00053, 00061, 00121, 00131</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>若手(B)</td><td>00031, 00041, 00043, 00051, 00053, 00061, 00111, 00121, 00131</td></tr>
     * </table><br>
     * 
     * SQLの実行結果から件数を取得し、0件の場合はtrueを、それ以外の場合はfalseを返す。<BR>
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return  [true]重複申請では無い場合, [false]重複申請の場合
     * @throws ApplicationException
     */
    private boolean checkDuplication(Connection connection,
                                     UserInfo userInfo,
                                     ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        if(!CHECK_DUPLICACATION_FLAG){
            log.info("重複チェックフラグがfalse  -> 処理を迂回する。");
            return true;
        }
        
        ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
        int count = 0;
        try{
            count = dao.countDuplicateApplication(connection, shinseiDataInfo);
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //重複チェック結果
        boolean result = false;
        if(count == 0){
            result = true;
        }
        //2005.08.03 iso チェックに引っかかった場合のログ出力を追加
        else {
            log.info("重複申請チェック");
            log.info(shinseiDataInfo);
        }
        
        return result;
    }

    /**
     * 受理登録時の重複申請チェックメソッド.<br><br>
     * 
     * 処理は未実装。
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return  [true]重複申請では無い場合, [false]重複申請の場合
     * @throws ApplicationException
     */
    private boolean checkDuplicationForJuri(Connection connection,
                                            UserInfo userInfo,
                                            ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
        int count = 0;
        try{
            count = dao.countDuplicateApplicationForJuri(connection, shinseiDataInfo);
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //重複チェック結果
        boolean result = false;
        if(count == 0){
            result = true;
        }
        //2005.08.03 iso チェックに引っかかった場合のログ出力を追加
        else {
            log.error("受理登録重複申請チェック");
            log.error(shinseiDataInfo);
        }
        
        return result;
    }
    
    /**
     * 登録時のチェックリストチェックメソッド.<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）<BR>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.JOKYO_ID
     * FROM 
     *     CHCKLISTINFO A 
     * INNER JOIN 
     *     JIGYOKANRI B 
     * ON 
     *     A.JIGYO_ID = B.JIGYO_ID 
     * WHERE 
     *     A.SHOZOKU_CD = ? 
     *     AND A.JIGYO_ID = ?
     * </pre>
     * </td></tr>
     * </table><br/>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.SHOZOKU_CD</td><td>第三引数shinseiDataInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.JIGYO_ID</td><td>第三引数shinseiDataInfoの変数jigyoId</td></tr>
     * </table><br>
     * 
     * SQLから取得した事業IDが"03"の場合はtrue、それ以外の場合はfalseを返す。<BR>
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return  [true]申請書登録が可能場合, [false]申請書登録が不可能な場合
     * @throws ApplicationException
     */
    private boolean checkCheckList(Connection connection,
                                   UserInfo userInfo,
                                   ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        CheckListInfoDao dao = new CheckListInfoDao(userInfo);
        String jokyoId = "";
        CheckListSearchInfo searchInfo = new CheckListSearchInfo();
        searchInfo.setJigyoId(shinseiDataInfo.getJigyoId());
        searchInfo.setShozokuCd(shinseiDataInfo.getDaihyouInfo().getShozokuCd());
        
// 20050617
        searchInfo.setJigyoKubun(shinseiDataInfo.getKadaiInfo().getJigyoKubun());
// Horikoshi
        
        try{
            jokyoId = dao.checkJokyoId(connection, searchInfo, false);
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //チェックリスト状況チェック結果
        boolean result = false;
        if(jokyoId == null || "03".equals(jokyoId)){
            result = true;
        }
        //2005.08.03 iso チェックに引っかかった場合のログ出力を追加
        else {
            log.info("チェックリストチェック");
            log.info(shinseiDataInfo);
        }
        
        return result;
    }
    
    /**
     * 継続分の課題番号チェックメソッド.<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）<BR>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     JIGYO_ID              -- 事業ID
     *     , KADAI_NO            -- 課題番号
     *     , ZENNENDO_KUBUN      -- 前年度応募可否区分
     *     , BIKO                -- 備考
     *  FROM 
     *     MASTER_KEIZOKU        -- 継続課題マスタ    
     *  WHERE 
     *     JIGYO_ID = ?
     *     AND KADAI_NO = ?
     * </pre>
     * </td></tr>
     * </table><br/>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>第三引数shinseiDataInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO</td><td>第三引数shinseiDataInfoの変数kadaiNoKeizoku</td></tr>
     * </table><br>
     * 
     * 結果を取得できた場合は1を、取得した結果の前年度区分が1(継続可)の場合は2を、それ以外の場合は0を返す。<BR>
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return 0→課題番号が存在しない 1→継続可ではない課題番号 2→継続可の課題番号
     * @throws ApplicationException
     */
    private int checkKadaiNoKeizoku(Connection connection,
                                    UserInfo userInfo,
                                    ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        int resultFlg = 0;
        KeizokuPk keizokuPk = new KeizokuPk();
        keizokuPk.setJigyoId(shinseiDataInfo.getJigyoId());
        keizokuPk.setKadaiNo(shinseiDataInfo.getKadaiNoKeizoku());
        
        MasterKeizokuInfoDao dao = new MasterKeizokuInfoDao(userInfo);
        
        List resultList = new ArrayList();
        
        try{
            resultList = dao.select(connection, keizokuPk);
            
            //継続番号を取得できた場合
            if(resultList.size() != 0){
                resultFlg = 1;
            }
                        
            //取得した継続番号が継続可の場合
            KeizokuInfo keizokuInfo = (KeizokuInfo)resultList.get(0);
            if("1".equals(keizokuInfo.getZennendoKubun())){
                resultFlg = 2;
            }
            
        }catch(NoDataFoundException e){
            //継続課題番号が有効ではない
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        return resultFlg;
    }
    
    /**
     * 最終年度課題番号チェックメソッド.<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）<BR>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     JIGYO_ID              -- 事業ID
     *     , KADAI_NO            -- 課題番号
     *     , ZENNENDO_KUBUN      -- 前年度応募可否区分
     *     , BIKO                -- 備考
     *  FROM 
     *     MASTER_KEIZOKU        -- 継続課題マスタ    
     *  WHERE 
     *     JIGYO_ID = ?
     *     AND KADAI_NO = ?
     * </pre>
     * </td></tr>
     * </table><br/>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>第三引数shinseiDataInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO</td><td>第三引数shinseiDataInfoの変数kadaiNoSaisyu</td></tr>
     * </table><br>
     * 
     * 結果を取得できた場合は1を、取得した結果の前年度区分が1(継続可)の場合は2を、それ以外の場合は0を返す。<BR>
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return 0→課題番号が存在しない 1→継続可ではない課題番号 2→継続可の課題番号
     * @throws ApplicationException
     */
    private int checkKadaiNoSaisyu(Connection connection,
                                   UserInfo userInfo,
                                   ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        int resultFlg = 0;
// 20050826 取得条件変更のため削除
//        KeizokuPk keizokuPk = new KeizokuPk();
//        keizokuPk.setJigyoId(shinseiDataInfo.getJigyoId());
//        keizokuPk.setKadaiNo(shinseiDataInfo.getKadaiNoSaisyu());
        MasterKeizokuInfoDao dao = new MasterKeizokuInfoDao(userInfo);
        List resultList = new ArrayList();
        try{
// 20050826 取得条件を変更
//            resultList = dao.select(connection, keizokuPk);
            resultList = dao.select(connection, shinseiDataInfo.getKadaiNoSaisyu());
            //継続番号を取得できた場合
            if(resultList.size() != 0){
                resultFlg = 1;
            }
            //取得した継続番号が継続可の場合
            KeizokuInfo keizokuInfo = (KeizokuInfo)resultList.get(0);
            if("1".equals(keizokuInfo.getZennendoKubun())){
                resultFlg = 2;
            }
        }catch(NoDataFoundException e){
            //継続課題番号が有効ではない
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        return resultFlg;
    }

    /**
     * 併願チェック.<br><br>
     * 
     * 処理は未実装。
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return  [true]併願可能な場合, [false]併願不可能な場合
     * @throws ApplicationException
     */
    private boolean checkParallel(Connection connection,
                                  UserInfo userInfo,
                                  ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {
        //TODO takano 未実装の状態（併願申請チェック）。
        return true;
    }
    
    
    /**
     * 学振受付期間チェック.<br><br>
     * 
     * 現在のシステム日付が当該事業の学振受付期間（終了）を過ぎていないかチェックする。<br><br>
     * 
     * <b>1.当該事業の事業情報を取得する。</b><br>
     * 　pkInfo(JigyoKanriPk)にshinseiDataInfoの変数jigyoIdをセットする。<br>
     * 　JigyoKanriMaintenanceクラスのselect(UserInfo, JigyoKanriPk)メソッド呼び、事業情報を取得する。<br>
     * 　引数に、第一引数userInfoとpkInfoを渡す。<br><br>
     * 
     *   JigyoKanriInfoが返却される。<br><br>
     * 
     * <b>2.現在日付と受付期間終了日を比較</b><br>
     * 　1で取得した事業情報から学振受付期間（終了）を取得し、現在日付(システム日付)と比較する。<br>
     * 　DateUtilクラスのgetElapse()メソッドにて比較する。<br><br>
     * 　現在日付＞受付期間終了日の場合：false<br>
     * 　現在日付＜受付期間終了日の場合：true<br>
     * 　を返却する。
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return [true]学振受付期間（終了）を過ぎていない場合, [false]学振受付期間（終了）を過ぎている場合
     * @throws ApplicationException
     */
    private boolean checkGakusinUketukeKikan(
            UserInfo userInfo, 
            ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        //-----当該事業の事業情報を取得する
        JigyoKanriPk pkInfo = new JigyoKanriPk(shinseiDataInfo.getJigyoId());
        JigyoKanriInfo jigyoKanriInfo = null;
        try{
            IJigyoKanriMaintenance jigyoMainte = new JigyoKanriMaintenance();
            jigyoKanriInfo = jigyoMainte.select(userInfo, pkInfo);
        } catch (ApplicationException e) {
            throw new ApplicationException(
                "事業情報管理管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //学振受付期間（終了）の取得
        DateUtil uketukeEnd = new DateUtil(jigyoKanriInfo.getUketukekikanEnd());
        DateUtil now = new DateUtil();
        
        //現在日付と受付期間終了日を比較
        boolean bFlag = true;
        int hi = now.getElapse(uketukeEnd);
        if(hi < 0){
            //受付期間終了日を過ぎている場合
            bFlag = false;
            
            //2005.08.03 iso チェックに引っかかった場合のログ出力を追加
            log.info("チェックリストチェック");
            log.info(shinseiDataInfo);
        }    
        
        return bFlag;
    }

    /**
     * 分科細目1をセット.<br><br>
     * 
     * <b>1.分科細目コードの取得</b><br>
     * 第三引数shinseiDataInfoから課題情報kadaiInfoを取得する。<br>
     * kadaiInfoから、分科細目コードbunkasaimokuCdと、分割番号bunkatsuNoを取得する。<br><br>
     * kadaiInfoから、分割番号bunkatsuNoを取得する。<br><br>
     * 
     * bunkasaimokuCdが空のときkadaiInfoの細目名(saimokuName)、分野名(bunya)、分科名(bunka)を初期化し、falseを返却する。<br><br>
     * 
     * kadaiInfoから、事業区分jigyoKubunを取得する。<BR><BR>
     * jigyoKubunが"4"(基盤事業)で分割番号が空の場合は、'-'をセットする。<BR><BR>
     * 
     * <b>2.分科細目情報を取得</b><br>
     * 1で取得したbunkasaimokuCdが空でないとき、当該分科細目コードの分科名、細目名を取得する。<br><br>
     * bukatsuNoがあるかどうかで実行するSQLが異なる。<BR><BR>
     * 
     * bunkatsuNoがある場合、以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.BUNKASAIMOKU_CD        -- 分科細目コード
     *     ,A.SAIMOKU_NAME          -- 細目名
     *     ,A.BUNKA_CD              -- 分科コード
     *     ,A.BUNKA_NAME            -- 分科名
     *     ,A.BUNYA_CD              -- 分野コード
     *     ,A.BUNYA_NAME            -- 分野名
     *     ,A.KEI                   -- 系
     *     ,A.BUNKATSU_NO           -- 分割番号
     * FROM
     *     MASTER_SAIMOKU A         -- 分科細目マスタテーブル
     * WHERE
     *     BUNKASAIMOKU_CD = ?
     *     AND BUNKATSU_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>bunkasaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>bunkatsuNo</td></tr>
     * </table><br>
     * 
     * bunkatsuNoがない場合、以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.BUNKASAIMOKU_CD       -- 分科細目コード
     *     ,A.SAIMOKU_NAME         -- 細目名
     *     ,A.BUNKA_CD             -- 分科コード
     *     ,A.BUNKA_NAME           -- 分科名
     *     ,A.BUNYA_CD             -- 分野コード
     *     ,A.BUNYA_NAME           -- 分野名
     *     ,A.KEI                  -- 系
     * FROM 
     *     MASTER_SAIMOKU A
     * WHERE 
     *     BUNKASAIMOKU_CD = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>bunkasaimokuCd</td></tr>
     * </table><br>
     * 
     * 結果が0件のとき、例外をthrowする。<br><br>
     * 
     * <b>3.分科細目情報をセット</b><br>
     * 結果が0件でないとき、取得した分科細目情報をkadaiInfoにセットする。<br>
     * セットする分科細目情報は分科細目コード(bunkaSaimokuCd)、細目名(saimokuName)、分野名(bunya)、分科名(bunka)、分割番号(bunkatsuNo)。<br><br>
     * trueを返却する。
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    shinseiDataInfo
     * @return [true]分科細目のセット完了, [false]分科細目コードが指定されていない
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    private boolean setBunkaSaimoku(Connection connection,
                                    UserInfo userInfo,
                                    ShinseiDataInfo shinseiDataInfo)
            throws NoDataFoundException, ApplicationException {

        //課題情報の取得
        KadaiInfo kadaiInfo = shinseiDataInfo.getKadaiInfo();
        
        //分科細目コードの取得
        String bunkasaimokuCd = kadaiInfo.getBunkaSaimokuCd();
        
        //分割番号の取得
        String bunkatsuNo = kadaiInfo.getBunkatsuNo();
        
        if(bunkasaimokuCd == null || bunkasaimokuCd.length() == 0){
            //コードが空の場合は初期化する
            kadaiInfo.setSaimokuName(null);
            kadaiInfo.setBunya(null);
            kadaiInfo.setBunka(null);
            return false;
        }
        
//        理由:分割番号追加のため
        String jigyoKubun = shinseiDataInfo.getKadaiInfo().getJigyoKubun();
        //分割番号があるのは基盤事業のみ
// 2006/02/13 Update 理由:「若手スタートアップ」と「特別研究促進費」を追加する
        if (IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(jigyoKubun)
                || IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(jigyoKubun)
                || IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(jigyoKubun)) {
            // 分割番号が空の場合は、'-'をセットする
            if (bunkatsuNo == null || bunkatsuNo.length() == 0) {
                bunkatsuNo = "-";
            }
        }
// End Nae        
        
        //DAO生成
        MasterSaimokuInfoDao dao = new MasterSaimokuInfoDao(userInfo);
        
        //当該分科細目コードの分科名、細目名を取得する
        SaimokuPk saimokuPk = new SaimokuPk(bunkasaimokuCd,bunkatsuNo);
        SaimokuInfo saimokuInfo = null;
        try{
            saimokuInfo = dao.selectSaimokuInfo(connection, saimokuPk);
        }catch(NoDataFoundException e){
            throw e;
        }catch (DataAccessException e) {
            throw new ApplicationException(
                "分科細目情報取得時に例外が発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //分科細目情報をセット
        kadaiInfo.setBunkaSaimokuCd(saimokuInfo.getBunkaSaimokuCd());
        kadaiInfo.setSaimokuName(saimokuInfo.getSaimokuName());
        kadaiInfo.setBunya(saimokuInfo.getBunyaName());
        kadaiInfo.setBunka(saimokuInfo.getBunkaName());
        kadaiInfo.setBunkatsuNo(saimokuInfo.getBunkatsuNo());
    
        return true;
    }

    /**
     * 分科細目2をセット.<br><br>
     * 
     * <b>1.分科細目コードの取得</b><br>
     * 第三引数shinseiDataInfoから課題情報kadaiInfoを取得する。<br>
     * kadaiInfoから、分科細目コードbunkasaimokuCd2を取得する。<br><br>
     * kadaiInfoから、分割番号bunkatsuNoを取得する。<br><br>
     * 
     * bunkasaimokuCd2が空のとき細目名(saimokuName2)、分野名(bunya2)、分科名(bunka2)を初期化し、falseを返却する。<br><br>
     * 
     * kadaiInfoから、事業区分jigyoKubunを取得する。<BR><BR>
     * jigyoKubunが"4"(基盤事業)で分割番号が空の場合は、'-'をセットする。<BR><BR>
     * 
     * <b>2.分科細目情報を取得</b><br>
     * 1で取得したbunkasaimokuCd2が空でないとき、当該分科細目コードの分科名、細目名を取得する。<br><br>
     * bukatsuNoがあるかどうかで実行するSQLが異なる。<BR><BR>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.BUNKASAIMOKU_CD        -- 分科細目コード
     *     ,A.SAIMOKU_NAME          -- 細目名
     *     ,A.BUNKA_CD              -- 分科コード
     *     ,A.BUNKA_NAME            -- 分科名
     *     ,A.BUNYA_CD              -- 分野コード
     *     ,A.BUNYA_NAME            -- 分野名
     *     ,A.KEI                   -- 系
     *     ,A.BUNKATSU_NO           -- 分割番号
     * FROM
     *     MASTER_SAIMOKU A         -- 分科細目マスタテーブル
     * WHERE
     *     BUNKASAIMOKU_CD = ?
     *     AND BUNKATSU_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>bunkasaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>bunkatsuNo</td></tr>
     * </table><br>
     * 
     * bunkatsuNoがない場合、以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.BUNKASAIMOKU_CD        -- 分科細目コード
     *     ,A.SAIMOKU_NAME          -- 細目名
     *     ,A.BUNKA_CD              -- 分科コード
     *     ,A.BUNKA_NAME            -- 分科名
     *     ,A.BUNYA_CD              -- 分野コード
     *     ,A.BUNYA_NAME            -- 分野名
     *     ,A.KEI                   -- 系 
     * FROM 
     *     MASTER_SAIMOKU A     
     * WHERE 
     *     BUNKASAIMOKU_CD = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>bunkasaimokuCd2</td></tr>
     * </table><br>
     * 
     * 結果が0件のとき、例外をthrowする。<br><br>
     * 
     * <b>3.分科細目情報をセット</b><br>
     * 結果が0件でないとき、取得した分科細目情報をkadaiInfoにセットする。<br>
     * セットする分科細目情報は分科細目コード(bunkaSaimokuCd2)、細目名(saimokuName)、分野名(bunya)、分科名(bunka)。<br>
     * trueを返却する。
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    shinseiDataInfo
     * @return [true]分科細目のセット完了, [false]分科細目コードが指定されていない
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    private boolean setBunkaSaimoku2(Connection connection,
                                     UserInfo userInfo,
                                     ShinseiDataInfo shinseiDataInfo)
            throws NoDataFoundException, ApplicationException {

        //課題情報の取得
        KadaiInfo kadaiInfo = shinseiDataInfo.getKadaiInfo();
        
        //分科細目コードの取得
        String bunkasaimokuCd = kadaiInfo.getBunkaSaimokuCd2();
        
//        2005/04/12 追加 ここから----------
//        理由:分割番号追加のため
        //分割番号の取得
        String bunkatsuNo = kadaiInfo.getBunkatsuNo();
//        2005/04/12 追加 ここまで----------
        
        if(bunkasaimokuCd == null || bunkasaimokuCd.length() == 0){
            //コードが空の場合は初期化する
            kadaiInfo.setSaimokuName2(null);
            kadaiInfo.setBunya2(null);
            kadaiInfo.setBunka2(null);
            return false;
        }
        
//        2005/04/12 追加 ここから----------
//        理由:分割番号追加のため
//2006/02/13 Update 理由:「若手スタートアップ」と「特別研究促進費」を追加する
        String jigyoKubun = shinseiDataInfo.getKadaiInfo().getJigyoKubun();
        if (IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(jigyoKubun)
                || IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(jigyoKubun)
                || IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(jigyoKubun)) {
            //分割番号が空の場合は、'-'をセットする
            if(bunkatsuNo == null || bunkatsuNo.length() == 0){
                bunkatsuNo = "-";
            }
        }
//Nae End        
//        2005/04/12 追加 ここまで----------
        
        //DAO生成
        MasterSaimokuInfoDao dao = new MasterSaimokuInfoDao(userInfo);
        
        //当該分科細目コードの分科名、細目名を取得する
        SaimokuPk saimokuPk = new SaimokuPk(bunkasaimokuCd,bunkatsuNo);
        SaimokuInfo saimokuInfo = null;
        try{
            saimokuInfo = dao.selectSaimokuInfo(connection, saimokuPk);
        }catch(NoDataFoundException e){
            throw e;
        }catch (DataAccessException e) {
            throw new ApplicationException(
                "分科細目情報取得時に例外が発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //分科細目情報をセット
        kadaiInfo.setBunkaSaimokuCd2(saimokuInfo.getBunkaSaimokuCd());
        kadaiInfo.setSaimokuName2(saimokuInfo.getSaimokuName());
        kadaiInfo.setBunya2(saimokuInfo.getBunyaName());
        kadaiInfo.setBunka2(saimokuInfo.getBunkaName());
    
        return true;
    }

    /**
     * 系等の区分のセット.<br><br>
     * 
     * <b>1.系等の区分コードの取得</b><br>
     * 第三引数shinseiDataInfoから課題情報kadaiInfoを取得する。<br>
     * kadaiInfoから、系等の区分コードkeiNameNoを取得する。<br><br>
     * 
     * keiNameNoが空のとき、falseを返却する。<br><br>
     * 
     * <b>2.当該コードの名称、略称を取得</b><br>
     * 1で取得したkeiNameNoが空でないとき、当該コードの名称、略称を取得する。<br><br>
     * 
     * kadaiInfoから、事業区分jigyoKubunを取得する。<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.ATAI        -- 値
     *     ,A.NAME        -- 名称
     *     ,A.RYAKU        -- 略称
     *     ,A.SORT        -- ソート
     *     ,A.BIKO        -- 備考
     * FROM
     *     MASTER_LABEL A    -- ラベルマスタテーブル 
     * WHERE
     *     A.LABEL_KUBUN = ?    -- ラベル区分
     *     AND A.ATAI = ?
     * 
     * ORDER BY SORT
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.LABEL_KUBUN</td><td>"KEI_KUBUN_"(ILabelKubun.KEI_KUBUN) + jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.ATAI</td><td>keiNameNo</td></tr>
     * </table><br>
     * 
     * 結果が0件のとき、例外をthrowする。<br><br>
     * 
     * <b>3.系等の区分情報をセット</b><br>
     * 結果が0件でないとき、取得した系等の区分情報をkadaiInfoにセットする。<br>
     * セットする系等の区分情報は名称(keiName)、略称(keiNameRyaku)。<br>
     * trueを返却する。
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return [true]系等の区分情報のセット完了, [false]系等の区分コードが指定されていない
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    private boolean setKeitouKubun(Connection connection,
                                   UserInfo userInfo,
                                   ShinseiDataInfo shinseiDataInfo)
            throws NoDataFoundException, ApplicationException {

        //課題情報の取得
        KadaiInfo kadaiInfo = shinseiDataInfo.getKadaiInfo();
        
        //系等の区分コードの取得
        String keiNameNo = kadaiInfo.getKeiNameNo();
        if(keiNameNo == null || keiNameNo.length() == 0){
            return false;
        }
        
        //事業区分
        String jigyoKubun = kadaiInfo.getJigyoKubun();
        
        //当該コードの名称、略称を取得する
        try{
            Map resultMap = MasterLabelInfoDao.selectRecord(connection,
                                                            ILabelKubun.KEI_KUBUN + jigyoKubun,
                                                            keiNameNo);
            kadaiInfo.setKeiName((String)resultMap.get("NAME"));
            kadaiInfo.setKeiNameRyaku((String)resultMap.get("RYAKU"));            
        }catch(NoDataFoundException e){
            throw e;
        }catch (DataAccessException e) {
            throw new ApplicationException(
                "系統の区分情報取得時に例外が発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        return true;
    }

    /**
     * 推薦の観点のセット.<br><br>
     * 
     * <b>1.推薦の観点コードの取得</b><br>
     * 第三引数shinseiDataInfoから課題情報kadaiInfoを取得する。<br>
     * kadaiInfoから、推薦の観点コードkantenNoを取得する。<br><br>
     * 
     * kantenNoが空のとき、falseを返却する。<br><br>
     * 
     * <b>2.当該コードの名称、略称を取得</b><br>
     * 1で取得したkantenNoが空でないとき、当該コードの名称、略称を取得する。<br><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.ATAI        -- 値
     *     ,A.NAME        -- 名称
     *     ,A.RYAKU        -- 略称
     *     ,A.SORT        -- ソート
     *     ,A.BIKO        -- 備考
     * FROM
     *     MASTER_LABEL A    -- ラベルマスタテーブル 
     * WHERE
     *     A.LABEL_KUBUN = ?    -- ラベル区分
     *     AND A.ATAI = ?
     * 
     * ORDER BY SORT
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.LABEL_KUBUN</td><td>"SUISEN" (ILabelKubun.SUISEN)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.ATAI</td><td>kantenNo</td></tr>
     * </table><br>
     * 
     * 結果が0件のとき、例外をthrowする。<br><br>
     * 
     * <b>3.推薦の観点情報をセット</b><br>
     * 結果が0件でないとき、取得した推薦の観点情報をkadaiInfoにセットする。<br>
     * セットする推薦の観点情報は名称(keiName)、略称(keiNameRyaku)。<br>
     * trueを返却する。
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return [true]推薦の観点情報のセット完了, [false]推薦の観点コードが指定されていない
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    private boolean setSuisenInfo(Connection connection,
                                  UserInfo userInfo,
                                  ShinseiDataInfo shinseiDataInfo)
            throws NoDataFoundException, ApplicationException {

        //課題情報の取得
        KadaiInfo kadaiInfo = shinseiDataInfo.getKadaiInfo();
        
        //推薦の観点コードの取得
        String kantenNo = kadaiInfo.getKantenNo();
        if(kantenNo == null || kantenNo.length() == 0){
            return false;
        }
        
        //当該コードの名称、略称を取得する
        try{
            Map resultMap = MasterLabelInfoDao.selectRecord(connection,
                                                            ILabelKubun.SUISEN,
                                                            kantenNo);
            kadaiInfo.setKanten((String)resultMap.get("NAME"));
            kadaiInfo.setKantenRyaku((String)resultMap.get("RYAKU"));            
        }catch(NoDataFoundException e){
            throw e;
        }catch (DataAccessException e) {
            throw new ApplicationException(
                "推薦の観点情報取得時に例外が発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        return true;
    }    

    /**
     * 研究組織情報のセット.<br><br>
     * 
     * 機関名称、部局名、職名をセットする。<br><br>
     * 
     * (1)研究組織情報を取得<br>
     * 第二引数dataInfoから研究組織情報kenkyushaListを取得する。<br>
     * 研究組織情報には、研究者情報が複数格納されている。<br><br>
     * 
     * (2)研究者情報を取得<br>
     * kenkyushaListから、研究者情報kenkyushaInfo(KenkyuSoshikiKenkyushaInfo)を取得する。<br>
     * 
     * (3)機関名称の取得、セット<br>
     * kenkyushaInfoから、所属機関コードsyozokuCdを取得する。<br><br>
     * 取得した所属機関コードが空でないとき、次の処理を行う。<br>
     * 所属機関コードが空のとき、次の処理は行わない。<br><br>
     * 
     * 　(a)kenkyushaInfoの代表者分担者別buntanFlgが1のとき(研究代表者の場合)<br>
     * 　　機関情報を取得する。(コードがその他も含まれる)<br>
     * 　　　ShinseishaMaintenanceクラスのgetKikanCodeValue(UserInfo,String,String,String)メソッドを呼ぶ。<br>
     * 　　　引数に、第一引数userInfo、所属機関コード(kikanCd)、kenkyushaInfoの所属機関名（和文）、null(所属機関名(英語))を渡す。<br><br>
     * 
     * 　　　ShinseishaMaintenanceクラスのgetKikanCodeValue(UserInfo,String,String,String)メソッドでの主な処理<br>
     * 　　　　その他コードのときは引数の値（所属機関コード、所属機関名）をそのまま、所属機関略称は"その他"をKikanInfoに格納。<br>
     * 　　　　それ以外は所属機関マスタテーブルから該当データを取得してKikanInfoに格納。<br>
     * 　　　　KikanInfoを返却。<br><br>
     * 
     * 　　　該当するデータが存在しないとき、例外をthrowする。<br>
     * 　　　第二引数errorsにエラー詳細情報をaddする。<br><br>
     * 
     * 　(b)kenkyushaInfoの代表者分担者別buntanFlgが1でないとき(研究分担者の場合)<br>
     * 　　機関情報を取得する。(コードがその他は含まれない)<br>
     * 　　　ShinseishaMaintenanceクラスのgetKikanCodeValue4KenkyuSoshiki(UserInfo,String,String,String)メソッドを呼ぶ。<br>
     * 　　　引数に、第一引数userInfo、所属機関コード(kikanCd)、kenkyushaInfoの所属機関名（和文）、null(所属機関名(英語))を渡す。<br>
     * 　　　該当するデータが存在しないとき、例外をthrowする。<br>
     * 　　　第二引数errorsにエラー詳細情報をaddする。<br><br>
     * 
     * 　　　ShinseishaMaintenanceクラスのgetKikanCodeValue4KenkyuSoshiki(UserInfo,String,String,String)での主な処理<br>
     * 　　　　所属機関マスタテーブルから該当データを取得してKikanInfoに格納。<br>
     * 　　　　KikanInfoを返却。<br><br>
     * 
     * 　該当するデータが存在するとき、取得した機関名称(日本語)をkenkyushaInfoにセットする。<br><br>
     * 
     * (4)部局名の取得、セット<br>
     * kenkyushaInfoから、部局コードbukyokuCdを取得する。<br><br>
     * 取得した部局コードが空でないとき、次の処理を行う。<br>
     * 部局コードが空のとき、次の処理は行わない。<br><br>
     * 
     * 部局名を取得する。<br>
     * 　ShinseishaMaintenanceクラスのgetBukyokuCodeValue(UserInfo,String,String)メソッドを呼ぶ。<br>
     * 　引数に、第一引数userInfo、部局コード(bukyokuCd)、kenkyushaInfoの部局名を渡す。<br><br>
     * 
     * 　ShinseishaMaintenanceクラスのgetBukyokuCodeValue(UserInfo,String,String)での主な処理<br>
     * 　　その他コードのときは引数の値（部局名）をそのままMapに格納。<br>
     * 　　それ以外は部局マスタテーブルから該当データを取得して、部局名、部局名略称をMapに格納。<br>
     * 　　Mapから部局名を取得して返却。(String)<br><br>
     * 
     * 該当するデータが存在しないとき、例外をthrowする。<br>
     * 第二引数errorsにエラー詳細情報をaddする。<br><br>
     * 
     * 該当するデータが存在するとき、取得した部局名をkenkyushaInfoにセットする。<br><br>
     * 
     * (5)職名の取得、セット<br>
     * kenkyushaInfoから、職コードshokushuCdを取得する。<br><br>
     * 取得した職コードが空でないとき、次の処理を行う。<br>
     * 職コードが空のとき、次の処理は行わない。<br><br>
     * 
     * 職名を取得する。<br>
     * 　ShinseishaMaintenanceクラスのgetShokushuCodeValue(UserInfo,String,String)メソッドを呼ぶ。<br>
     * 　引数に、第一引数userInfo、職コード(shokushuCd)、kenkyushaInfoの職名（和文）を渡す。<br><br>
     * 
     * 　ShinseishaMaintenanceクラスのgetShokushuCodeValue(UserInfo,String,String)での主な処理<br>
     * 　　その他コード(25)のときは引数の値（職名）をそのままMapに格納。<br>
     * 　　研究員コード(24)かつ引数の値（職名）がnullでない場合、引数の値（職名）をそのままMapに格納。<br>
     * 　　それ以外は職種マスタテーブルから該当データを取得して、職名、職名略称をMapに格納。<br>
     * 　　Mapから職名を取得して返却。(String)<br><br>
     * 
     * 該当するデータが存在しないとき、例外をthrowする。<br>
     * 第二引数errorsにエラー詳細情報をaddする。<br><br>
     * 
     * 該当するデータが存在するとき、取得した職名をkenkyushaInfoにセットする。<br><br>
     * 
     * (2)〜(5)をkenkyushaListのsize分繰り返す。
     * 
     * @param userInfo    UserInfo
     * @param dataInfo    ShinseiDataInfo
     * @param errors    エラーリスト
     * @return なし
     * @throws ApplicationException
     */
    private void setValueFromCode(UserInfo userInfo, 
                                  ShinseiDataInfo dataInfo,
                                  List errors)
            throws ApplicationException {

        //研究組織情報の取得
        List kenkyushaList = dataInfo.getKenkyuSoshikiInfoList();
        
        ShinseishaMaintenance mainte = new ShinseishaMaintenance();
        for(int i=1; i<=kenkyushaList.size(); i++){
            KenkyuSoshikiKenkyushaInfo kenkyushaInfo = 
                        (KenkyuSoshikiKenkyushaInfo)kenkyushaList.get(i-1);
            //--機関コード
            try{
                String kikanCd = kenkyushaInfo.getShozokuCd();
                if(kikanCd != null && kikanCd.length() != 0){
                    KikanInfo kikanInfo = null;
                    //研究代表者の場合 → 「その他」を認める
                    if("1".equals(kenkyushaInfo.getBuntanFlag())){
                        kikanInfo = mainte.getKikanCodeValue(userInfo, 
                                                             kikanCd, 
                                                             kenkyushaInfo.getShozokuName(),
                                                             null);    //英語名は無視    
                        
                    //研究分担者の場合 → 「その他」を認めない
                    }else{
                        kikanInfo = mainte.getKikanCodeValue4KenkyuSoshiki(
                                                             userInfo, 
                                                             kikanCd, 
                                                             kenkyushaInfo.getShozokuName(),
                                                             null);    //英語名は無視    
                        kenkyushaInfo.setShozokuName(kikanInfo.getShozokuNameKanji());
                    }
                    kenkyushaInfo.setShozokuName(kikanInfo.getShozokuNameKanji());
                }
            }catch(NoDataFoundException e){
                String msg      = "研究組織表 所属機関名（番号） "+i+"行目";
                String property = "shinseiDataInfo.kenkyuSoshikiInfoList.shozokuCd";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
            
            if(i==1){
                kenkyushaInfo.setBukyokuName(dataInfo.getDaihyouInfo().getBukyokuName());
                kenkyushaInfo.setShokushuNameKanji(dataInfo.getDaihyouInfo().getShokushuNameKanji());
                continue;
            }

            //--部局コード
            try{

// 20050713 部局（和文名）チェックの追加
//                if(kenkyushaInfo.getBukyokuName() == null || kenkyushaInfo.getBukyokuName().length() <= 0){
//
//                String bukyokuCd = kenkyushaInfo.getBukyokuCd();
//                if(bukyokuCd != null && bukyokuCd.length() != 0){
//                    String bukyokuName = mainte.getBukyokuCodeValue(userInfo,
//                                                                    bukyokuCd,
//                                                                    kenkyushaInfo.getBukyokuName());
//                    kenkyushaInfo.setBukyokuName(bukyokuName);
//                }
// 20050801 再修正　※元に戻す
                String bukyokuCd = kenkyushaInfo.getBukyokuCd();
                if(bukyokuCd != null && bukyokuCd.length() != 0){
                    String bukyokuName = mainte.getBukyokuCodeValue(userInfo,
                                                                    bukyokuCd,
                                                                    kenkyushaInfo.getBukyokuName());
                    kenkyushaInfo.setBukyokuName(bukyokuName);
// Horikoshi

                }
            }catch(NoDataFoundException e){
                String msg      = "研究組織表 部局名（番号） "+i+"行目";
                String property = "shinseiDataInfo.kenkyuSoshikiInfoList.bukyokuCd";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
            
            //---職コード
            try{
                String shokushuCd = kenkyushaInfo.getShokushuCd();
// 20050721 ※職名が入力されていた場合には入力された値を使用するため
                String chShokushuName = kenkyushaInfo.getShokushuNameKanji();
// 20050801 再修正 ※元に戻す
//                if(chShokushuName != null && chShokushuName.length() > 0){
//                    kenkyushaInfo.setShokushuNameKanji(chShokushuName);
//                }
//                else{

                //職コード25以外の場合、マスタよりセットする
                if(shokushuCd != null && shokushuCd.length() != 0 && !"25".equals(shokushuCd)){
                    String shokushuName = mainte.getShokushuCodeValue(userInfo,
                                                                      shokushuCd,
                                                                      chShokushuName);
                    kenkyushaInfo.setShokushuNameKanji(shokushuName);
                }

// Horikoshi
            }catch(NoDataFoundException e){
                String msg      = "研究組織表 職名 "+i+"行目";
                String property = "shinseiDataInfo.kenkyuSoshikiInfoList.shokushuCd";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
        }
    }    

    /**
     * 形式チェックメソッド.<br><br>
     * 
     * 各種コードに該当するデータを、申請データ情報(ShinseiDataInfo)にセットする。<br><br>
     * 
     * (1)系等の区分<br>
     * 自クラスのsetKeitouKubun(Connection, UserInfo, ShinseiDataInfo)メソッド呼び出し。<br><br>
     * 
     * (2)推薦の観点<br>
     * 自クラスのsetSuisenInfo(Connection, UserInfo, ShinseiDataInfo)メソッド呼び出し。<br><br>
     * 
     * (3)細目番号<br>
     * 自クラスのsetBunkaSaimoku(Connection, UserInfo, ShinseiDataInfo)メソッド呼び出し。<br><br>
     * 
     * (4)細目番号2<br>
     * 自クラスのsetBunkaSaimoku2(Connection, UserInfo, ShinseiDataInfo)メソッド呼び出し。<br><br>
     * 
     * (1)〜(4)について、引数には第一引数connection、第二引数userInfo、第三引数dataInfoを渡す。<br>
     * エラーが発生した場合（該当レコードが無い場合）、それぞれに第四引数errorsにエラー詳細情報を追加。<br><br>
     * 
     * (5)前年度応募の有無<BR>
     * 新規・継続区分が「継続」の場合に、自クラスのcheckKadaiNoKeizoku(Connection, UserInfo, ShinseiDataInfo)メソッドを呼び出して、
     * 取得した値が0(研究番号が存在しない)の場合は、第四引数errorsにエラー詳細情報を追加。<BR>
     * 前年度応募の有無が「該当する」の場合に、自クラスのcheckKadaiNoKeizoku(Connection, UserInfo, ShinseiDataInfo)メソッドを呼び出して、
     * 取得した値が0(研究番号が存在しない)、もしくは1(継続可ではない研究番号)の場合は、第四引数errorsにエラー詳細情報を追加。<BR>
     * 引数には第一引数connection、第二引数userInfo、第三引数dataInfoを渡す。<br>
     * 
     * (5)研究組織情報（機関名称、部局名、職名）<br>
     * 自クラスのsetValueFromCode(UserInfo, ShinseiDataInfo, List)メソッド呼び出し。<br>
     * 引数に、第一引数userInfo、第二引数dataInfo、第四引数errorsを渡す。
     * 
     * @param connection    Connection
     * @param userInfo        UserInfo
     * @param dataInfo        ShinseiDataInfo
     * @param errors        エラーリスト
     * @return なし
     * @throws ApplicationException
     */
    private void checkValidation(Connection connection,
                                 UserInfo userInfo,
                                 ShinseiDataInfo dataInfo,
                                 List errors)
            throws ApplicationException {
        
        try{
            setKeitouKubun(connection, userInfo, dataInfo);
        }catch(NoDataFoundException e){
            String msg      = "系等の区分";
            String property = "shinseiDataInfo.kadaiInfo.keiNameNo";
            errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
        }

        try{
            setSuisenInfo(connection, userInfo, dataInfo);
        }catch(NoDataFoundException e){
            String msg      = "推薦の観点";
            String property = "shinseiDataInfo.kadaiInfo.kantenNo";
            errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
        }

        try{
            //2005/8/31　エラーメッセージが重複表示しない為、フラグ設定
            notSaimokuFlg = false;
            setBunkaSaimoku(connection, userInfo, dataInfo);
        }catch(NoDataFoundException e){
            String msg = null;
            if(IJigyoCd.JIGYO_CD_TOKUSUI.equals(dataInfo.getJigyoCd())){
                msg = "細目番号(1)";
            }else{
// 20050831　メッセージ修正
//                msg = "存在しない細目番号を指定しているか細目番号と分割番号の組み合わせが";
                msg = "存在しない細目番号を指定しているか細目番号と分割番号の組み合わせ";
//ADD　START 2007-07-20 BIS 劉多良
        		//組み合わせのエラーを追加する
                String propertyKumiai = "shinseiDataInfo.kadaiInfo.bunkaSaimokuCd.kumiai";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, propertyKumiai));
//ADD　END 2007-07-20 BIS 劉多良
            }
            String property = "shinseiDataInfo.kadaiInfo.bunkaSaimokuCd";
            errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));

            //細目番号が存在しない時、trueを設定する
            notSaimokuFlg = true;
        }
        
        try{
            setBunkaSaimoku2(connection, userInfo, dataInfo);
        }catch(NoDataFoundException e){
            String msg      = "細目番号(2)";
            String property = "shinseiDataInfo.kadaiInfo.bunkaSaimokuCd2";
            errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
        }

//        2005/04/21 追加 ここから----------
//        理由:課題番号チェック追加のため
//        新規・継続区分が「継続」の場合のみチェックする
//20050805 終了研究の場合には新規で継続文の研究課題番号が必須になったため条件を変更
//2005/8/16 一時登録未入力時チェックしない為、条件変更
        if( dataInfo.getKadaiNoKeizoku() != null &&
                !dataInfo.getKadaiNoKeizoku().equals("") &&
            (IShinseiMaintenance.SHINSEI_CONTINUE.equals(dataInfo.getShinseiKubun()) ||
            IShinseiMaintenance.KUBUN_SHUURYOU.equals(dataInfo.getKenkyuKubun()) )
        ){
            int keizokuFlg = 0;
            keizokuFlg = checkKadaiNoKeizoku(connection, userInfo, dataInfo);

            //新規・継続区分が「継続」の場合、研究番号が存在していなければエラー
            if(keizokuFlg == 0){
                String msg      = "継続分の研究課題番号";
                String property = "shinseiDataInfo.kadaiNoKeizoku";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
        }

//        前年度応募の有無が「該当する」の場合のみチェックする
//        2005/8/16 一時登録未入力時チェックしない為、条件変更
        if( dataInfo.getKadaiNoSaisyu() != null &&
                !dataInfo.getKadaiNoSaisyu().equals("") &&
            "1".equals(dataInfo.getShinseiFlgNo())){
            int keizokuFlg = 0;
            keizokuFlg = checkKadaiNoSaisyu(connection, userInfo, dataInfo);
            //前年度応募の有無が「該当する」の場合、研究番号が存在していなければエラー
            if("1".equals(dataInfo.getShinseiFlgNo()) && keizokuFlg == 0){
                String msg      = "最終年度研究課題番号";
                String property = "shinseiDataInfo.kadaiNoSaisyu";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }

            //前年度応募の有無が「該当する」の場合、前年度の応募可否区分1でなければエラー
            if("1".equals(dataInfo.getShinseiFlgNo()) && keizokuFlg == 1){
                String msg      = "最終年度研究課題番号";
                String property = "shinseiDataInfo.kadaiNoSaisyu";
                errors.add(new ErrorInfo("errors.5036", new String[]{msg}, property));
            }
            
//2006/07/26 苗　追加ここから
            if(!(IJigyoCd.JIGYO_CD_KIBAN_HOGA.equals(dataInfo.getJigyoCd()) ||
                 IJigyoCd.JIGYO_CD_KIBAN_WAKATE_A.equals(dataInfo.getJigyoCd()) ||
                 IJigyoCd.JIGYO_CD_KIBAN_WAKATE_B.equals(dataInfo.getJigyoCd()))){
                if("1".equals(dataInfo.getShinseiFlgNo())){
                    int kadaiNoShu = checkKadaiNoSaisyuForKikan(connection, userInfo, dataInfo);
                    if(kadaiNoShu == 1){
                        String property = "shinseiDataInfo.kadaiNoSaisyu";
                        ErrorInfo err = new ErrorInfo("errors.5067");
                        err.setProperty(property);
                        errors.add(err);
                    }
                }
            }
//2006/07/26　苗　追加ここまで            
        }
//        2005/04/21 追加 ここまで----------

        //2005/8/27 追加 
        //部局名称が入力項目になったので、その他…"709"、"913"、"899"、"875"、"903"、"999"である
        //且つ未入力の場合、部局マスタよりセットする。その他以外は変更された可能があるので
        //やはり部局マスタよりセットする必要がある。
        String bukyokuCd = dataInfo.getDaihyouInfo().getBukyokuCd();
        String bukyokuName = dataInfo.getDaihyouInfo().getBukyokuName();
        ShinseishaMaintenance mainte = new ShinseishaMaintenance();
        bukyokuName = mainte.getBukyokuCodeValue(userInfo, bukyokuCd, bukyokuName);
        dataInfo.getDaihyouInfo().setBukyokuName(bukyokuName);
        //2005/8/27 end

        //2005/8/18職名コードが24で、職名が未入力の場合、マスタよりセットする.
        String shokushuCd = dataInfo.getDaihyouInfo().getShokushuCd();
        String shokushuName = dataInfo.getDaihyouInfo().getShokushuNameKanji();
        //2005/8/27職名コードが25以外、マスタよりセットする
        if (!"25".equals(shokushuCd)){
            shokushuName = mainte.getShokushuCodeValue(userInfo,
                            shokushuCd,
                            shokushuName);
            dataInfo.getDaihyouInfo().setShokushuNameKanji(shokushuName);
        }
        
        //機関コード、部局コード、職コード
        setValueFromCode(userInfo, dataInfo, errors);
    }

    /**
     * 研究者番号をチェック.<br><br>
     * 
     * (1)研究組織情報を取得<br>
     * 第一引数dataInfoから研究組織情報kenkyushaListを取得する。<br>
     * 研究組織情報には、研究者情報が複数格納されている。<br><br>
     * 
     * (2)研究者情報を取得<br>
     * kenkyushaListから、研究者情報kenkyushaInfoを取得する。<br><br>
     * 
     * (3)チェックデジットチェック<br>
     * 研究者情報から研究者番号を取得する。<br><br>
     * 
     * 研究分担者か    研究者番号「99999999」の場合、チェックデジットチェックを行わずcontinueで次のデータの処理へ。<br><br>
     * 
     * 研究分担者でない、または研究者番号「99999999」でないとき、次の処理を行う。<br><br>
     * 
     * ShinseishaMaintenanceクラスのcheckKenkyuNo(String)メソッドを呼び、研究者番号が正しいかを判定する。<br>
     * 研究者番号が正しくないとき、第二引数errorsにエラー詳細情報をaddする。<br><br>
     * 
     * (2)〜(3)をkenkyushaListのsize分繰り返す。<br><br>
     * 
     * 現状はチェックデジットが正しいかのみを判定。
     * 
     * @param dataInfo    ShinseiDataInfo
     * @param errors    エラーリスト
     * @throws ApplicationException 現状発生しない。今後DBを参照するようになった場合発生。
     */
    private void checkKenkyuNo(ShinseiDataInfo dataInfo, List errors)
            throws ApplicationException {
// 20050712
//未使用        String strKenkyuShozoku = "";
// Horikoshi
        
        //プロパティ名
        String property = "shinseiDataInfo.kenkyuSoshikiInfoList.kenkyuNo";
        
        //研究組織情報の取得
        List kenkyushaList = dataInfo.getKenkyuSoshikiInfoList();
        
        ShinseishaMaintenance mainte = new ShinseishaMaintenance();
        for(int i=1; i<=kenkyushaList.size(); i++){
            KenkyuSoshikiKenkyushaInfo kenkyushaInfo = 
                        (KenkyuSoshikiKenkyushaInfo)kenkyushaList.get(i-1);

            //研究分担者で「99999999」の場合は、チェックデジットチェックを行わない
            String kenkyuNo = kenkyushaInfo.getKenkyuNo();

// 20050627 研究者番号のALL9は入力エラーとする
// 仕様変更により対象となる研究者は研究分担者のみ
//            if("99999999".equals(kenkyuNo) && "2".equals(kenkyushaInfo.getBuntanFlag())){
//                continue;
//            }
            if(KENKYUU_ERROR_NO.equals(kenkyuNo) &&
                KENKYUU_BUNTAN.equals(kenkyushaInfo.getBuntanFlag())){
                String msg      = "研究組織表 研究者番号 "+i+"行目";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
// Horikoshi

            try{
                mainte.checkKenkyuNo(kenkyuNo);
            }catch(ValidationException e){
                String msg      = "研究組織表 研究者番号 "+i+"行目";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }catch(ApplicationException e){
                //現状発生しない。今後DBを参照するようになった場合発生。
                e.printStackTrace();
                throw e;
            }
            
            
            //2005/8/29 追加
            //必須チェック（職種コードが「その他(25)」のとき）一行目をチェックしない
            if(i > 1 && "25".equals(kenkyushaInfo.getShokushuCd())){
                String msg = "研究組織表 職 "+i+"行目";
                String value = kenkyushaInfo.getShokushuNameKanji();
                String name = "shinseiDataInfo.kenkyuSoshikiInfoList.shokushuNameKanji";

                //全角と半角空白を除去するチェック
                if(StringUtil.isSpaceString(value)){
                    errors.add(new ErrorInfo("errors.required", new String[]{msg}, name));
                }
                //「その他」を入力したら駄目です。
                else if ("その他".equals(value)){
                    errors.add(new ErrorInfo("errors.5060", new String[]{msg, "その他"}, name));
                }
            }
        }
    }

    /**
     * 添付ファイルを格納.<br><br>
     * 
     * 添付ファイルを登録する。<br><br>
     * 
     * <b>1.添付ファイル情報の削除</b><br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * (1)添付ファイル情報の検索<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO,                -- システム受付番号
     *     A.SEQ_TENPU,                -- シーケンス番号
     *     A.JIGYO_ID,                -- 事業ID
     *     A.TENPU_PATH,            -- 格納パス
     *     A.PDF_PATH                -- 変換ファイル格納パス
     * FROM
     *     TENPUFILEINFO A            -- 添付ファイル管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br/>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第三引数shinseiDataInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * 該当データが存在しないとき、例外をthrow<br><br><br>
     * 
     * (2)添付ファイル情報の削除<br>
     * 　(1)で該当データが存在したとき、添付ファイル情報の削除を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * DELETE
     * FROM
     *     TENPUFILEINFO        -- 添付ファイル管理テーブル
     * WHERE
     *     SYSTEM_NO = ?        -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第三引数shinseiDataInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.添付ファイル情報の登録</b><br>
     * (1)ファイルパスの生成<br>
     * 配列pathInfoに事業ID、システム受付番号を格納する。<br><br>
     * 
     * 変数SHINSEI_ANNEX_FOLDERのパターンに従い、配列pathInfoをMessageFormatクラスのformat()メソッドを用いてフォーマットする。<br>
     * ファイルパスを生成する。<br><br>
     * 
     * (例)ファイルパターン：${shinsei_path}/data/{0}/{1}/word/{1}.doc<br/>
     * 　　事業ID：04000011　システム受付番号：200412121510010　のとき<br>
     * 　　ファイルパス：${shinsei_path}/data/04000011/200412121510010/word/200412121510010.doc<br>
     * 　　　※${shinsei_path}の値はApplicationSettings.propertiesに設定<br><br>
     * 
     * 生成したファイルパスが存在する場合、FileUtilクラスのdelete()メソッドにて該当する既存ファイルを削除する。<br><br>
     * 
     * (2)添付ファイル情報の登録<br>
     * 　FileUtilクラスのwriteFile()メソッドを呼び、ファイルを書き込む。<br>
     * 　引数に(1)で生成したファイルパス、第四引数fileResのバイナリを渡す。<br><br>
     * 
     * ・重複チェック<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO,                -- システム受付番号
     *     A.SEQ_TENPU,                -- シーケンス番号
     *     A.JIGYO_ID,                -- 事業ID
     *     A.TENPU_PATH,            -- 格納パス
     *     A.PDF_PATH                -- 変換ファイル格納パス
     * FROM
     *     TENPUFILEINFO A            -- 添付ファイル管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     *     AND SEQ_TENPU = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第三引数shinseiDataInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SEQ_TENPU</td><td>1　(新規)</td></tr>
     * </table><br>
     * 
     * 　該当データが存在するとき、例外をthrow<br><br><br>
     * 
     * ・添付ファイル情報の登録<br>
     * 　重複チェックで該当するレコードが存在しないとき、登録処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * INSERT INTO TENPUFILEINFO(    -- 添付ファイル管理テーブル
     *     SYSTEM_NO,                -- システム受付番号
     *     SEQ_TENPU,                -- シーケンス番号
     *     JIGYO_ID,                -- 事業ID
     *     TENPU_PATH,                    -- 格納パス
     *     PDF_PATH                    -- PDFパス
     * )
     * VALUES(
     *     ?,?,?,?,?
     * )        
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第三引数shinseiDataInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SEQ_TENPU</td><td>1　新規登録なので必ず[1]</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>第三引数shinseiDataInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TENPU_PATH</td><td>(1)で生成したファイルパス</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>null</td></tr>
     * </table><br><br>
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @param fileRes            FileResource
     * @throws ApplicationException
     */
    private static void registTenpuFileInfo(Connection connection,
                                            UserInfo userInfo,
                                            ShinseiDataInfo shinseiDataInfo,
                                            FileResource fileRes)
            throws ApplicationException {

        //申請情報
        String systemNo  = shinseiDataInfo.getSystemNo();
        //String uketukeNo = shinseiDataInfo.getUketukeNo();
        String jigyoId   = shinseiDataInfo.getJigyoId();
        
        //DBアクセスクラス
        TenpuFileInfoDao dao = null;
        
        //---DB削除---
        try{
            dao = new TenpuFileInfoDao(userInfo);
            dao.deleteTenpuFileInfos(connection, shinseiDataInfo);
        }catch(NoDataFoundException e){
            //処理を抜ける
        }catch(DataAccessException e){
            throw new ApplicationException(
                "添付データDB削除中にエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }
        
        //---ファイル情報---
        String[] pathInfo = new String[]{jigyoId, systemNo};

        //2005.07.15 iso PDFファイル添付機能
        //国際と異なり、WORDファイルもPDF変換する。
//        String   outPath  = MessageFormat.format(SHINSEI_ANNEX_FOLDER, pathInfo);
        String outPath;
        String delPath;
        if(fileRes.getName().toLowerCase().endsWith(DOC)) {
            outPath  = MessageFormat.format(SHINSEI_ANNEX_FOLDER, pathInfo);
            delPath  = MessageFormat.format(SHINSEI_ANNEX_PDF_FOLDER, pathInfo);
        } else if(fileRes.getName().toLowerCase().endsWith(PDF)) {
            outPath  = MessageFormat.format(SHINSEI_ANNEX_PDF_FOLDER, pathInfo);
            delPath  = MessageFormat.format(SHINSEI_ANNEX_FOLDER, pathInfo);
        } else {
            throw new ApplicationException(
                "添付ファイル格納中にエラーが発生しました。",
                new ErrorInfo("errors.7001"));
        }

//2005/09/07 ファイルシステムに格納する前に形式チェックを移動 ここから -----
        try{
            //2005.07.15 iso PDFファイル添付機能
            //PDFファイル添付の場合、有効なPDFかチェックする。
            if(outPath.endsWith(PDF)) {
                String property = "uploadFile";
                IPdfConvert pdfConvert = new PdfConvert();
                int resultCode = pdfConvert.checkPdf(fileRes);
                if(resultCode != 0) {
                    //エラーファイルの場合、エラーフォルダに格納する
                    File errFile = new File(MessageFormat.format(SHINSEI_ANNEX_ERR_FOLDER, pathInfo));
                    FileUtil.writeFile(errFile, fileRes.getBinary());
    
                    List errors = new ArrayList();
                    if(resultCode == 27) {
                        errors.add(new ErrorInfo("errors.8101", new String[]{"PDFファイルにパスワードが設定されています。"}, property));
    //                } else if(resultCode == 33) {
    //                    errors.add(new ErrorInfo("errors.8102", new String[]{"PDFファイルの画像読み込みに失敗しました。"}, property));
                    } else {
                        errors.add(new ErrorInfo("errors.8100", new String[]{"PDFファイルが不正です。"}, property));
                    }
                    throw new ValidationException("PDFチェックでエラーが起きました。", errors);
                }
            }
        }catch(IOException e){
            throw new ApplicationException(
                "添付ファイル（エラーファイル）格納中にエラーが発生しました。",
                new ErrorInfo("errors.7001"),
                e);
        }
//2005/09/07 ファイルシステムに格納する前に形式チェックを移動 ここまで -----

        //2005.07.15 iso PDFファイル添付機能
//        File     outFile   = new File(outPath);
//        if(outFile.exists()){
//            FileUtil.delete(outFile);    //存在した場合は削除
//        }
        File     outFile   = new File(outPath);
        File     delFile   = new File(delPath);
        if(outFile.exists()){
            FileUtil.delete(outFile);    //存在した場合は削除
        }
        if(delFile.exists()){
            FileUtil.delete(delFile);    //存在した場合は削除
        }
        
        //-----新規登録-----
        try{
            //---ファイル格納---
            FileUtil.writeFile(outFile, fileRes.getBinary());

            //---DB登録---
            TenpuFileInfo tenpuInfo = new TenpuFileInfo();
            tenpuInfo.setSystemNo(systemNo);
            tenpuInfo.setSeqTenpu("1");            //新規登録なので必ず[1]
            tenpuInfo.setJigyoId(jigyoId);
            tenpuInfo.setTenpuPath(outPath);

            //2005.07.15 iso PDFファイル添付機能
            //Word(.doc)ならtenpuPath、PDF(.pdf)ならpdfPathのパスに書き込み
            if(outPath.endsWith(DOC)) {
                tenpuInfo.setTenpuPath(outPath);
            } else if(outPath.endsWith(PDF)) {
                tenpuInfo.setPdfPath(outPath);
            } else {
                throw new ApplicationException(
                    "添付ファイル格納中にエラーが発生しました。",
                    new ErrorInfo("errors.7001"));
            }
            
            dao.insertTenpuFileInfo(connection, tenpuInfo);

//2005/09/07 ファイルシステムに格納する前に形式チェックを移動する ここから -----
//            //2005.07.15 iso PDFファイル添付機能
//            //PDFファイル添付の場合、有効なPDFかチェックする。
//            if(outPath.endsWith(PDF)) {
//                String property = "uploadFile";
//                IPdfConvert pdfConvert = new PdfConvert();
//                int resultCode = pdfConvert.checkPdf(fileRes);
//                if(resultCode != 0) {
//                    //エラーファイルの場合、エラーフォルダに格納する
//                    File errFile = new File(MessageFormat.format(SHINSEI_ANNEX_ERR_FOLDER, pathInfo));
//                    FileUtil.writeFile(errFile, fileRes.getBinary());
//
//                    List errors = new ArrayList();
//                    if(resultCode == 27) {
//                        errors.add(new ErrorInfo("errors.8101", new String[]{"PDFファイルにパスワードが設定されています。"}, property));
////                    } else if(resultCode == 33) {
////                        errors.add(new ErrorInfo("errors.8102", new String[]{"PDFファイルの画像読み込みに失敗しました。"}, property));
//                    } else {
//                        errors.add(new ErrorInfo("errors.8100", new String[]{"PDFファイルが不正です。"}, property));
//                    }
//                    throw new ValidationException("PDFチェックでエラーが起きました。", errors);
//                }
//            }
//2005/09/07 ファイルシステムに格納する前に形式チェックを移動する ここまで -----

        }catch(IOException e){
            throw new ApplicationException(
                "添付ファイル格納中にエラーが発生しました。",
                new ErrorInfo("errors.7001"),
                e);
        }catch(DataAccessException e){
            throw new ApplicationException(
                "添付データDB登録中にエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }
    }

    /**
     * 研究組織情報を登録.<br><br>
     * 
     * <b>1.研究組織情報の取得</b><br>
     * 第三引数shinseiDataInfoから研究組織情報kenkyushaListを取得する。<br>
     * kenkyushaListにはKenkyuSoshikiKenkyushaInfoがMapで複数格納される。<br><br>
     * 
     * <b>2.研究者情報の削除</b><br>
     * 研究者情報の物理削除を行う。<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * DELETE
     * FROM
     *     KENKYUSOSHIKIKANRI       -- 研究組織表管理テーブル
     * WHERE
     *     SYSTEM_NO = ?            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第三引数shinseiDataInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>3.研究者情報の登録</b><br>
     * (1)研究者情報を取得<br>
     * 　kenkyushaListから、研究者情報kenkyushaInfoを取得する。<br>
     * 
     * (2)研究者情報の登録<br>
     * 　・重複チェック<br>
     * 　　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     SYSTEM_NO                    -- システム受付番号
     *     ,SEQ_NO                      -- シーケンス番号
     *     ,JIGYO_ID                    -- 事業ID
     *     ,BUNTAN_FLG                  -- 代表者分担者別
     *     ,KENKYU_NO                   -- 研究者番号
     *     ,NAME_KANJI_SEI              -- 氏名（漢字−姓）
     *     ,NAME_KANJI_MEI              -- 氏名（漢字−名）
     *     ,NAME_KANA_SEI               -- 氏名（フリガナ−姓）
     *     ,NAME_KANA_MEI               -- 氏名（フリガナ−名）
     *     ,SHOZOKU_CD                  -- 所属機関コード
     *     ,SHOZOKU_NAME                -- 所属機関名
     *     ,BUKYOKU_CD                  -- 部局コード
     *     ,BUKYOKU_NAME                -- 部局名
     *     ,SHOKUSHU_CD                 -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI         -- 職名
     *     ,SENMON                      -- 現在の専門
     *     ,GAKUI                       -- 学位
     *     ,BUNTAN                      -- 役割分担
     *     ,KEIHI                       -- 研究経費
     *     ,EFFORT                      -- エフォート
     *     ,NENREI                      -- 年齢
     * FROM
     *     KENKYUSOSHIKIKANRI           -- 研究組織表管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     *     AND SEQ_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第三引数shinseiDataInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SEQ_TENPU</td><td>1　(新規)</td></tr>
     * </table><br>
     * 
     * 　　該当データが存在するとき、例外をthrow<br><br><br>
     * 
     * 　・研究者情報の登録<br>
     * 　　重複チェックで該当するレコードが存在しないとき、登録処理を行う。<br><br>
     * 
     * 　　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * INSERT INTO KENKYUSOSHIKIKANRI (  -- 研究組織表管理テーブル
     *     SYSTEM_NO                     -- システム受付番号
     *     ,SEQ_NO                       -- シーケンス番号
     *     ,JIGYO_ID                     -- 事業ID
     *     ,BUNTAN_FLG                   -- 代表者分担者別
     *     ,KENKYU_NO                    -- 研究者番号
     *     ,NAME_KANJI_SEI               -- 氏名（漢字−姓）
     *     ,NAME_KANJI_MEI               -- 氏名（漢字−名）
     *     ,NAME_KANA_SEI                -- 氏名（フリガナ−姓）
     *     ,NAME_KANA_MEI                -- 氏名（フリガナ−名）
     *     ,SHOZOKU_CD                   -- 所属機関コード
     *     ,SHOZOKU_NAME                 -- 所属機関名
     *     ,BUKYOKU_CD                   -- 部局コード
     *     ,BUKYOKU_NAME                 -- 部局名
     *     ,SHOKUSHU_CD                  -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI          -- 職名
     *     ,SENMON                       -- 現在の専門
     *     ,GAKUI                        -- 学位
     *     ,BUNTAN                       -- 役割分担
     *     ,KEIHI                        -- 研究経費
     *     ,EFFORT                       -- エフォート
     *     ,NENREI                       -- 年齢
     * )
     * VALUES (
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
     * )
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>kenkyushaInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SEQ_NO</td><td>繰り返し処理の連番</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>kenkyushaInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN_FLG</td><td>kenkyushaInfoの変数BuntanFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>kenkyushaInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>kenkyushaInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>kenkyushaInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>kenkyushaInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>kenkyushaInfoの変数nameKanaMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>kenkyushaInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>kenkyushaInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>kenkyushaInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>kenkyushaInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>kenkyushaInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>kenkyushaInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>kenkyushaInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>kenkyushaInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>kenkyushaInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI</td><td>kenkyushaInfoの変数keihi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EFFORT</td><td>kenkyushaInfoの変数effort</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>kenkyushaInfoの変数nenrei</td></tr>
     * </table><br>
     * 
     * 　(1)〜(2)の処理をkenkyushaListのsize分繰り返す。
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return なし
     * @throws ApplicationException
     */
    private static void registKenkyuSoshikiKanriInfo(
            Connection connection,
            UserInfo userInfo,
            ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        //申請データに割り振ったシステム受付番号
        String systemNo = shinseiDataInfo.getSystemNo();
        try{
            List kenkyushaList = shinseiDataInfo.getKenkyuSoshikiInfoList();
            KenkyuSoshikikanriDao dao = new KenkyuSoshikikanriDao(userInfo);
            
            //---DB削除---
            try{
                dao.deleteKenkyuSoshikiKanriInfo(connection, shinseiDataInfo);
            }catch(NoDataFoundException e){
                //処理を抜ける
            }
            
            //---DB登録---
            for(int i=0; i<kenkyushaList.size(); i++){
                KenkyuSoshikiKenkyushaInfo kenkyushaInfo = 
                            (KenkyuSoshikiKenkyushaInfo)kenkyushaList.get(i);
                kenkyushaInfo.setSystemNo(systemNo);
                kenkyushaInfo.setSeqNo(String.valueOf(i+1));
                
                //TODO 2005.09.29 iso 分担フラグに空が入る対応で一時追加
                if(StringUtil.isBlank(kenkyushaInfo.getBuntanFlag())) {
                    kenkyushaInfo.setBuntanFlag("2");
                    log.info("【発生】分担フラグ空");
                }
                
                dao.insertKenkyuSoshikiKanriInfo(connection, kenkyushaInfo);
            }
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "研究組織管理データ登録中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }
    }

    /**
     * 申請ステータスを更新.<br><br>
     * 
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table                    -- 変数table(下記参照)
     * WHERE
     *     A.SYSTEM_NO IN ( ? )        -- システム受付番号
     *     
     *     --- 動的検索条件1 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.SYSTEM_NO</td><td>第三引数shinseiDataPk</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請ステータスの更新<br>
     * (1)のチェックで参照可能のとき、申請ステータスを更新する。<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI        -- 申請データ管理テーブル
     * SET
     *     JOKYO_ID = ?            -- 申請状況ID
     * WHERE
     *     SYSTEM_NO = ?        -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>第四引数status</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第三引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * ※更新する上でのステータス確認は行わない。<br>
     * 　当該申請の処理状況が更新可能ステータスであるかどうかは、上位メソッドで判断すること。<br><br>
     * 
     * @param connection        Connection
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @param status            申請ステータス(String)
     * @return なし
     * @throws ApplicationException
     */
    private void updateStatus(Connection connection,
                              UserInfo  userInfo,
                              ShinseiDataPk shinseiDataPk,
                              String status)
            throws ApplicationException {

        //---申請ステータス更新---
//        boolean   success    = false;
        try {
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            dao.updateStatus(connection, shinseiDataPk, status);
//            success = true;
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "申請ステータス更新中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }        
    }
    
    //  宮　2006/06/21　ここから
    /** 
     * 申請ステータスを更新.
     * @param connection        Connection
     * @param userInfo          UserInfo
     * @param shinseiDataInfo   ShinseiDataInfo
     * @return なし
     * @throws DataAccessException
     * @throws NoDataFoundException
     */   
//2007/02/05 苗　修正ここから    パラメータが多いので
//    private void updateShinseiDataInfo(
//            Connection connection,
//            UserInfo  userInfo,
//            ShinseiDataPk shinseiDataPk,
//            String status,
//            int edintion,
//            Date sakuseiDate,
//            File iodFile,
//            File xmlFile)
    private void updateShinseiDataInfo(
            Connection connection,
            UserInfo  userInfo,
            ShinseiDataInfo shinseiDataInfo)
//2007/02/05　苗　修正ここまで    
            throws DataAccessException, NoDataFoundException {

        //---申請ステータス更新---
        try {
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(userInfo);
//2007/02/05 苗　修正ここから            
//            shinseiDataInfoDao.updateShinseiInfo(connection, shinseiDataPk,
//                    status, edintion, sakuseiDate, iodFile, xmlFile);
            shinseiDataInfoDao.updateShinseiInfo(connection, shinseiDataInfo);
//2007/02/25　苗　修正ここまで            
        } catch (NoDataFoundException e) {
            throw new NoDataFoundException(
                "該当する情報が存在しませんでした。",e);
        }catch (DataAccessException e) {
            throw new DataAccessException(
                 "データ検索中にDBエラーが発生しました。",e);
        }             
    }
    //宮　ここまで
    
    /**
     * 受付番号生成に必要な値が変更されていないかチェックします。<BR>
     * 変更されいない場合→true<BR>
     * 変更されている場合→false<BR><BR>
     * 
     * @param connection    Connection
     * @param userInfo    UserInfo
     * @param shinseiDataInfo    ShinseiDataInfo
     * @return チェック結果
     * @throws ApplicationException
     */
    
    private static boolean checkRegistUketsukeNo(
            Connection connection,
            UserInfo userInfo,
            ShinseiDataInfo shinseiDataInfo)
            throws ApplicationException {

        ShinseiDataInfo resultInfo = new ShinseiDataInfo();
        ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
        boolean returnFlg = true;
        
        //---登録済みデータを取得しチェック---
        try{
            resultInfo = dao.selectShinseiDataInfo(connection, shinseiDataInfo, true);

// 20050708
//            //比較(所属機関コード・新規継続コード・細目コード・分割番号)して、１つでも変更されていたら再登録
//            if(!isEqual(shinseiDataInfo.getDaihyouInfo().getShozokuCd(), resultInfo.getDaihyouInfo().getShozokuCd()) ||
//                    !isEqual(shinseiDataInfo.getShinseiKubun(), resultInfo.getShinseiKubun()) ||
//                    !isEqual(shinseiDataInfo.getKadaiInfo().getBunkaSaimokuCd(), resultInfo.getKadaiInfo().getBunkaSaimokuCd()) ||
//                    !isEqual(shinseiDataInfo.getKadaiInfo().getBunkatsuNo(), resultInfo.getKadaiInfo().getBunkatsuNo())
//                    ){
//                returnFlg = false;
//            }
            if(shinseiDataInfo.getKadaiInfo().getJigyoKubun() != null &&
                shinseiDataInfo.getKadaiInfo().getJigyoKubun().length() > 0 &&
                (shinseiDataInfo.getKadaiInfo().getJigyoKubun().equals(IJigyoKubun.JIGYO_KUBUN_KIBAN) ||        //基盤
                shinseiDataInfo.getKadaiInfo().getJigyoKubun().equals(IJigyoKubun.JIGYO_KUBUN_TOKUTEI))            //特定領域
                ){
                //基盤の変更をチェック(細目番号、分割番号　※整理番号は入力側で変更できないので対象外)
                if(shinseiDataInfo.getKadaiInfo().getJigyoKubun().equals(IJigyoKubun.JIGYO_KUBUN_KIBAN) &&
                        (!isEqual(shinseiDataInfo.getKadaiInfo().getBunkaSaimokuCd(), resultInfo.getKadaiInfo().getBunkaSaimokuCd()) ||
                        !isEqual(shinseiDataInfo.getKadaiInfo().getBunkatsuNo(), resultInfo.getKadaiInfo().getBunkatsuNo()))
                        ){
                    returnFlg = false;
                }
                //特定領域の変更をチェック(領域番号、研究項目番号　※整理番号は入力側で変更できないので対象外)
                else if(shinseiDataInfo.getKadaiInfo().getJigyoKubun().equals(IJigyoKubun.JIGYO_KUBUN_TOKUTEI) &&
                        (!isEqual(shinseiDataInfo.getRyouikiNo(), resultInfo.getRyouikiNo()) ||
                        !isEqual(shinseiDataInfo.getRyouikiKoumokuNo(), resultInfo.getRyouikiKoumokuNo()))
                        ){
                    returnFlg = false;
                }
            }
            else if(IJigyoKubun.JIGYO_KUBUN_TOKUSUI.equals(shinseiDataInfo.getKadaiInfo().getJigyoKubun()) ||
                    IJigyoKubun.JIGYO_KUBUN_GAKUSOU_HIKOUBO.equals(shinseiDataInfo.getKadaiInfo().getJigyoKubun()) ||
                    IJigyoKubun.JIGYO_KUBUN_GAKUSOU_KOUBO.equals(shinseiDataInfo.getKadaiInfo().getJigyoKubun())
                    ){
                    //学創・特推の場合は無条件にtrue（受付番号が変更されないので）を返す。
                    return true;
                    
            }
            else{                                                                                                //その他
                //比較(所属機関コード・新規継続コード・細目コード・分割番号)して、１つでも変更されていたら再登録
                if(!isEqual(shinseiDataInfo.getDaihyouInfo().getShozokuCd(), resultInfo.getDaihyouInfo().getShozokuCd()) ||
                        !isEqual(shinseiDataInfo.getShinseiKubun(), resultInfo.getShinseiKubun()) ||
                        !isEqual(shinseiDataInfo.getKadaiInfo().getBunkaSaimokuCd(), resultInfo.getKadaiInfo().getBunkaSaimokuCd()) ||
                        !isEqual(shinseiDataInfo.getKadaiInfo().getBunkatsuNo(), resultInfo.getKadaiInfo().getBunkatsuNo())
                        ){
                    returnFlg = false;
                }
            }
// Horikoshi

        } catch(NoDataFoundException e){
            throw new ApplicationException("チェックデータ元が登録されていません。",
                    new ErrorInfo("errors.4001"), e);
        } catch (DataAccessException e) {
            throw new ApplicationException("受付番号再登録中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"), e);
        }
        return returnFlg;
    }
    
    /**引数のStringが同じものであるかチェックする.<BR>
     * 
     * @param str1    String
     * @param str2    String
     * @return    同じもの→true　違うもの→false
     */
    private static boolean isEqual(String str1,String str2){
        boolean ret = false;
        //null同士ならtrue
        if(str1 == str2 && str1 == null){
            ret = true;
        }
        //null以外で内容が同じならtrue
        if(str1 != null && str1.equals(str2)){
            ret = true;
        }
        return ret;
    }

    /**
     * 添付ファイル情報を出力する。
     * 
     * @param userInfo
     * @param fileRes
     */
    private void outputFileInfo(UserInfo userInfo, FileResource fileRes) {
        
        log.info("ユーザID=" + userInfo.getShinseishaInfo().getShinseishaId());
        if(fileRes == null) {
            log.info("添付ファイルなし");
        } else {
            log.info("ファイル名=" + fileRes.getName());
            log.info("ファイルサイズ=" + fileRes.getBinary().length);
        }
    }

    //---------------------------------------------------------------------
    // implement IShinseiMaintenance
    //---------------------------------------------------------------------    
    
    /**
     * 申請書一覧ページ情報を取得.<br><br>
     * 
     * (1)担当部局のチェック<BR>
     * 第一引数userInfoの変数roleがUserRole.BUKYOKUTANTOと同じ場合、
     * 検索条件の部局コードがユーザの担当部局と一致するかのチェックを行う。<BR>
     * 担当部局を持つユーザで、検索条件に部局コードをセットしていた場合、
     * BukyokutantoMaintenanceのselect(UserInfo, BukyokutantoInfo)メソッドを呼び、
     * 検索条件の部局コードとユーザの担当部局が一致する部局担当者情報を取得する。<BR>
     * 取得した部局担当者情報が0件の場合は、ユーザの担当する部局ではないとして例外をthrowする。<BR><BR>
     * 
     * (2)申請書一覧ページ情報の取得<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO,                    -- システム受付番号
     *     A.UKETUKE_NO,                -- 申請番号
     *     A.JIGYO_ID,                    -- 事業ID
     *     A.NENDO,                        -- 年度
     *     A.KAISU,                        -- 回数
     *     A.JIGYO_NAME,                -- 事業名
     *     A.SHINSEISHA_ID,                -- 申請者ID
     *     A.SAKUSEI_DATE,                -- 申請書作成日
     *     A.SHONIN_DATE,                -- 所属機関承認日
     *     A.NAME_KANJI_SEI,            -- 申請者氏名（漢字等-姓）
     *     A.NAME_KANJI_MEI,            -- 申請者氏名（漢字等-名）
     *     A.KENKYU_NO,                    -- 申請者研究者番号
     *     A.SHOZOKU_CD,                -- 所属機関コード
     *     A.SHOZOKU_NAME,                -- 所属機関名
     *     A.SHOZOKU_NAME_RYAKU,        -- 所属機関名（略称）
     *     A.BUKYOKU_NAME,                    -- 部局名
     *     A.BUKYOKU_NAME_RYAKU,            -- 部局名（略称）
     *     A.SHOKUSHU_NAME_KANJI,            -- 職名
     *     A.SHOKUSHU_NAME_RYAKU,            -- 職名（略称）            
     *     A.KADAI_NAME_KANJI,            -- 研究課題名(和文）
     *     A.JIGYO_KUBUN,                -- 事業区分
     *     A.KEKKA1_ABC,                -- 1次審査結果(ABC)
     *     A.KEKKA1_TEN,                -- 1次審査結果(点数)
     *     A.KEKKA1_TEN_SORTED,            -- 1次審査結果(点数順)
     *     A.KEKKA2,                    -- 2次審査結果
     *     A.JOKYO_ID,                    -- 申請状況ID
     *     A.SAISHINSEI_FLG,            -- 再申請フラグ
     *     A.KEI_NAME_RYAKU,            -- 系等の区分（略称）
     *     A.KANTEN_RYAKU,                -- 推薦の観点（略称）
     *     A.NENREI,                        -- 年齢
     *     CASE 
     *         WHEN CHCKLIST.SHOZOKU_CD IS NULL 
     *         THEN 'TRUE' 
     *         ELSE 'FALSE' 
     *         END EDITABLE,            -- 申請書修正フラグ
     *     DECODE (
     *         NVL(A.SUISENSHO_PATH,'null') 
     *         ,'null','FALSE'            -- 推薦書パスがNULLのとき
     *         ,      'TRUE'            -- 推薦書パスがNULL以外のとき
     *     ) SUISENSHO_FLG,             -- 推薦書登録フラグ
     *     B.UKETUKEKIKAN_END,            -- 学振受付期限（終了）
     *     B.HOKAN_DATE,                -- データ保管日
     *     B.YUKO_DATE,                    -- 保管有効期限
     *     DECODE (
     *         SIGN( 
     *               TO_DATE( TO_CHAR(B.UKETUKEKIKAN_END,'YYYY/MM/DD'), 'YYYY/MM/DD' ) 
     *             - TO_DATE( TO_CHAR(SYSDATE           ,'YYYY/MM/DD'), 'YYYY/MM/DD' ) 
     *         )
     *         ,0 , 'TRUE'                -- 現在時刻と同じ場合
     *         ,1 , 'TRUE'            -- 現在時刻の方が受付期限より前
     *         ,-1, 'FALSE'            -- 現在時刻の方が受付期限より後
     *     ) UKETUKE_END_FLAG,        -- 学振受付期限（終了）到達フラグ
     *     DECODE (
     *         NVL(A.PDF_PATH,'null') 
     *         ,'null','FALSE'        -- PDFの格納パスがNULLのとき
     *         ,      'TRUE'        -- PDFの格納パスがNULL以外のとき
     *     ) PDF_PATH_FLG,             -- PDFの格納パスフラグ
     *     DECODE (
     *         NVL(C.SYSTEM_NO,'null') 
     *         ,'null','FALSE'        -- 添付ファイルがNULLのとき
     *         ,      'TRUE'        -- 添付ファイルがNULL以外のとき
     *     ) TENPUFILE_FLG             -- 添付ファイルフラグ
     * FROM
     *     SHINSEIDATAKANRI A        -- 申請データ管理テーブル
     * INNER JOIN 
     *     JIGYOKANRI B                -- 事業管理テーブル
     * ON 
     *     A.JIGYO_ID = B.JIGYO_ID 
     * LEFT JOIN 
     *     TENPUFILEINFO C            -- 添付ファイル管理テーブル
     * ON 
     *     A.SYSTEM_NO = C.SYSTEM_NO 
     *     AND C.TENPU_PATH IS NOT NULL
     * 
     * ---------部局担当者の場合に追加----------
     * INNER JOIN 
     *     TANTOBUKYOKUKANRI T        -- 担当部局管理テーブル
     * ON 
     *     T.SHOZOKU_CD = A.SHOZOKU_CD 
     *     AND T.BUKYOKU_CD = A.BUKYOKU_CD 
     *     AND T.BUKYOKUTANTO_ID = 'userInfo.getBukyokutantoInfo().getBukyokutantoId()'
     * ----------------------------------------
     * 
     * LEFT JOIN 
     *     CHCKLISTINFO CHCKLIST    -- チェックリスト管理テーブル
     * ON 
     *     CHCKLIST.JIGYO_ID = A.JIGYO_ID 
     *     AND CHCKLIST.SHOZOKU_CD = A.SHOZOKU_CD 
     *     AND CHCKLIST.JOKYO_ID <> '03' 
     * 
     * WHERE
     *     A.JIGYO_ID = B.JIGYO_ID            -- 事業IDが同じもの
     * 
     *     --- 動的検索条件1 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br/>
     * searchInfoによって検索条件が動的に変化する。<br/>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム番号</td><td>systemNo</td><td>AND JIGYO_ID = 'システム番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請番号</td><td>uketukeNo</td><td>AND A.UKETUKE_NO = '申請番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業ID</td><td>jigyoId</td><td>AND A.JIGYO_ID = '事業ID'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業CD</td><td>jigyoCd</td><td>AND SUBSTR(A.JIGYO_ID, 3, 5) = '事業CD'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>担当事業CD</td><td>tantoJigyoCd</td><td>AND SUBSTR(A.JIGYO_ID, 3, 5) IN ('担当事業CD1', '担当事業CD2', …)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業名</td><td>jigyoName</td><td>AND A.JIGYO_NAME = '事業名'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>年度</td><td>nend</td><td>AND A.NENDO = '年度'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>回数</td><td>kaisu</td><td>AND A.KAISU = '回数'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者ID</td><td>shinseishaId</td><td>AND A.SHINSEISHA_ID = '申請者ID'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：姓）</td><td>nameKanjiSei</td><td>AND A.NAME_KANJI_SEI like '%申請者名（漢字：性)%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：名）</td><td>nameKanjiMei</td><td>AND A.NAME_KANJI_MEI like '%申請者名（漢字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：姓）</td><td>nameKanaSei</td><td>AND A.NAME_KANA_SEI like '%申請者名（カナ：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：名）</td><td>nameKanaMei</td><td>AND A.NAME_KANA_MEI like '%申請者名（カナ：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：姓）</td><td>nameRoSei</td><td>AND UPPER(A.NAME_RO_SEI) like '%申請者名（ローマ字：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：名）</td><td>nameRoMei</td><td>AND UPPER(A.NAME_RO_MEI) like '%申請者名（ローマ字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者研究者番号</td><td>kenkyuNo</td><td>AND A.KENKYU_NO = '申請者研究者番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業区分</td><td>jigyoKubun</td><td>AND A.JIGYO_KUBUN IN ('事業区分1', '事業区分2', …)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>shozokuCd</td><td>AND A.SHOZOKU_CD = '所属機関コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>系等の区分番号</td><td>keiNameNo</td><td>AND A.KEI_NAME_NO = '系統の区分番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>系等の区分</td><td>keiName</td><td>AND (A.KEI_NAME like '%系統の区分%' OR A.KEI_NAME_RYAKU like '%系統の区分%')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>細目番号</td><td>bunkasaimokuCd</td><td>AND (A.BUNKASAIMOKU_CD = '細目番号' OR A.BUNKASAIMOKU_CD2 = '細目番号')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>推薦の観点番号</td><td>kantenNo</td><td>AND A.KANTEN_NO = '推薦の観点番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>推薦の観点</td><td>kanten</td><td>AND A.KANTEN = '推薦の観点'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>推薦の観点略称</td><td>kantenRyaku</td><td>AND A.KANTEN_RYAKU = '推薦の観点略称'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>関連分野の研究者氏名</td><td>kanrenShimei</td><td>AND (A.KANREN_SHIMEI1 like '%関連分野の研究者氏名1%' OR A.KANREN_SHIMEI2 like '%関連分野の研究者氏名%' OR A.KANREN_SHIMEI3 like '%関連分野の研究者氏名%')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請状況</td><td>jokyoId</td><td>AND A.JOKYO_ID IN ('申請状況1', '申請状況2', …)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>再申請フラグ</td><td>saishinseiFlg</td><td>AND A.SAISHINSEI_FLG IN ('再申請フラグ1', '再申請フラグ2', …)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>2次審査結果</td><td>kekka2</td><td>AND A.KEKKA2 IN ('2次審査結果1', '2次審査結果2', …)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>作成日（From）</td><td>sakuseiDateFrom</td><td>AND A.SAKUSEI_DATE >= TO_DATE('作成日（From）', 'YYYY/MM/DD')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>作成日（To）</td><td>sakuseiDateTo</td><td>AND A.SAKUSEI_DATE <= TO_DATE('作成日（To）', 'YYYY/MM/DD')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関承認日（From）</td><td>shoninDateFrom</td><td>AND A.SHONIN_DATE >= TO_DATE('所属機関承認日（From）', 'YYYY/MM/DD')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関承認日（To）</td><td>shoninDateTo</td><td>AND A.SHONIN_DATE <= TO_DATE('所属機関承認日（To）', 'YYYY/MM/DD')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局コード</td><td>bukyokuCd</td><td>AND A.BUKYOKU_CD = '部局コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>組み合わせステータス状況</td><td>query</td><td>AND '組み合わせステータス状況'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>削除フラグ</td><td>delFlg</td><td>AND A.DEL_FLG IN ('削除フラグ1', '削除フラグ2', …)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>整列キー</td><td>order</td><td>ORDER BY '整列キー1', '整列キー2',…</td></tr>
     * </table><br><br>
     * 
     * (3)申請状況名のセット<br>
     * 　StatusManagerクラスのsetStatusName()メソッドを呼ぶ。<br>
     * 　引数は、コネクションと(1)で取得したページ情報を渡す。<br><br>
     * 
     * 　このメソッドにて、当該申請データの申請状況名（申請状況を表す文字列）を、pageオブジェクトに格納されているListにセットする。<br>
     * 　申請状況名は、キー値「JOKYO_NAME」としてMapに追加される。<br>
     * 　申請状況名は、実行するユーザ、事業の公開前後、申請状況IDに該当する文字列がセットされる。<br><br>
     * 
     * (4)ページ情報返却<br>
     * 　申請書一覧情報、申請状況名を格納したPageオブジェクトを返却する。<br><br>
     * 
     * @param userInfo        UserInfo
     * @param searchInfo    検索条件(ShinseSearchInfo)
     * @return 申請書一覧情報を格納したPageオブジェクト
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchApplication(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiSearchInfo)
     */
    public Page searchApplication(
            UserInfo userInfo,
            ShinseiSearchInfo searchInfo)
            throws NoDataFoundException, ApplicationException {
        
        //2005/04/20 追加 ここから----------------------------------------------
        //部局担当時に許可された部局かどうかの条件を追加
        if(userInfo.getRole().equals(UserRole.BUKYOKUTANTO)){
            //部局担当者のとき、検索条件の部局コードが自分の担当かチェックする
            BukyokutantoInfo info = userInfo.getBukyokutantoInfo();
            
            if(info.getTantoFlg()){
                if(searchInfo.getBukyokuCd() != null && !searchInfo.getBukyokuCd().equals("")){
                    IBukyokutantoMaintenance bukyokutantoMaintenance = new BukyokutantoMaintenance();
                    
                    //キーのセット
                    BukyokutantoPk pkInfo = new BukyokutantoPk();
                    pkInfo.setBukyokutantoId(info.getBukyokutantoId());
                    pkInfo.setBukyokuCd(searchInfo.getBukyokuCd());
                    
                    BukyokutantoInfo[] tanto = bukyokutantoMaintenance.select(userInfo,pkInfo);
                    
                    if(tanto.length == 0){
                        throw new NoDataFoundException(
                            "ログインユーザの担当する部局ではありません。"
                                + "検索キー：部局担当者ID'" + pkInfo.getBukyokutantoId() + "'"
                                + " 担当部局コード'" + pkInfo.getBukyokuCd()
                                + "'", new ErrorInfo("errors.authority"));
                    }
                }
            }
        }
        //追加 ここまで---------------------------------------------------------        
        
        //DBコネクションの取得
        Connection connection = null;    
        try{
            connection = DatabaseUtil.getConnection();
            
            //---申請書一覧ページ情報
            Page pageInfo = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                pageInfo = dao.searchApplication(connection, searchInfo);    //該当レコードを全件取得
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
        
            //申請状況名をセット
            new StatusManager(userInfo).setStatusName(connection, pageInfo);
            return pageInfo;
        
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }    

    /**
     * 簡易申請情報を取得.<br><br>
     * 
     * 簡易申請情報を取得する。<br><br>
     * 
     * 　※削除画面で使用<br><br>
     * 
     * 自クラスのselectSimpleShinseiDataInfos(UserInfo,ShinseiDataPk[])メソッドを呼ぶ。<br>
     * 引数に、第一引数userInfoと第二引数pkInfoを格納した配列(ShinseiDataPk)を渡す。<br><br>
     * 
     * 取得したSimpleShinseiDataInfoを返却する。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param pkInfo    ShinseiDataPk
     * @return 簡易申請情報(SimpleShinseiDataInfo)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#selectSimpleShinseiDataInfo(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public SimpleShinseiDataInfo selectSimpleShinseiDataInfo(
            UserInfo userInfo,
            ShinseiDataPk pkInfo)
            throws NoDataFoundException, ApplicationException {
        return selectSimpleShinseiDataInfos(userInfo, new ShinseiDataPk[]{pkInfo})[0];
    }

    /**
     * 簡易申請情報を取得.<br><br>
     * 
     * 複数件の簡易申請情報を取得する。<br><br>
     * 
     * <b>1.簡易申請情報の取得</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)簡易申請情報の取得<br>
     * 　(1)のチェックで参照可能申請データであれば、データ取得処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *    A.SYSTEM_NO,                -- システム受付番号
     *    A.UKETUKE_NO,                -- 申請番号
     *    A.JIGYO_ID,                -- 事業ID
     *    A.NENDO,                    -- 年度
     *    A.KAISU,                    -- 回数
     *    A.JIGYO_NAME,                -- 事業名
     *    A.SHINSEISHA_ID,            -- 申請者ID
     *    A.SAKUSEI_DATE,            -- 申請書作成日
     *    A.SHONIN_DATE,            -- 所属期間承認日
     *    A.NAME_KANJI_SEI,            -- 申請者氏名（漢字等-姓）
     *    A.NAME_KANJI_MEI,            -- 申請者氏名（漢字等-名）
     *    A.KENKYU_NO,                -- 申請者研究者番号
     *    A.SHOZOKU_CD,                -- 所属機関コード
     *    A.SHOZOKU_NAME,            -- 所属機関名
     *    A.SHOZOKU_NAME_RYAKU,        -- 所属機関名（略称）
     *    A.BUKYOKU_NAME,            -- 部局名
     *    A.BUKYOKU_NAME_RYAKU,        -- 部局名（略称）
     *    A.SHOKUSHU_NAME_KANJI,    -- 職名
     *    A.SHOKUSHU_NAME_RYAKU,    -- 職名（略称）    
     *    A.KADAI_NAME_KANJI,        -- 研究課題名(和文）
     *    A.JIGYO_KUBUN,            -- 事業区分
     *    A.SUISENSHO_PATH,            -- 推薦書パス
     *    A.JURI_KEKKA,                -- 受理結果
     *    A.JURI_BIKO,                -- 受理備考
     *    A.KEKKA1_ABC,                -- 1次審査結果(ABC)
     *    A.KEKKA1_TEN,                -- 1次審査結果(点数)
     *    A.KEKKA1_TEN_SORTED,        -- 1次審査結果(点数順)
     *    A.KEKKA2,                    -- 2次審査結果
     *    A.JOKYO_ID,                -- 申請状況ID
     *    A.SAISHINSEI_FLG,            -- 再申請フラグ
     *    B.UKETUKEKIKAN_END        -- 学振受付期限（終了）
     * FROM
     *    SHINSEIDATAKANRI A,        -- 申請データ管理テーブル
     *    JIGYOKANRI B                -- 事業情報管理テーブル
     * WHERE
     * 
     *  --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *    AND A.DEL_FLG = 0            -- 削除フラグが[0]
     *    AND A.JIGYO_ID = B.JIGYO_ID        -- 事業IDが同じもの
     * 
     * ORDER BY A.SYSTEM_NO
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b>2.申請状況名のセット</b><br>
     * StatusManagerクラスのsetStatusName()メソッドを呼ぶ。<br>
     * 引数は、コネクションと1.で取得した情報(SimpleShinseiDataInfo[])を渡す。<br><br>
     * 
     * このメソッドにて、当該申請データの申請状況名（申請状況を表す文字列）を、SimpleShinseiDataInfoにセットする。<br>
     * 申請状況名は、実行するユーザ、事業の公開前後、申請状況IDに該当する文字列がセットされる。<br><br>
     * 
     * <b>3.SimpleShinseiDataInfo[]の返却</b><br>
     * 簡易申請情報、申請状況名を格納したSimpleShinseiDataInfo[]を返却する。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param pkInfo    ShinseiDataPk[]
     * @return 簡易申請情報(SimpleShinseiDataInfo[])
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#selectSimpleShinseiDataInfo(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk[])
     */
    public SimpleShinseiDataInfo[] selectSimpleShinseiDataInfos(
            UserInfo userInfo,
            ShinseiDataPk[] pkInfo)
            throws NoDataFoundException, ApplicationException {

        //DBコネクションの取得
        Connection connection = null;    
        try{
            connection = DatabaseUtil.getConnection();
            
            //---簡易申請情報
            SimpleShinseiDataInfo[] simpleInfos = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                simpleInfos = dao.selectSimpleShinseiDataInfos(connection, pkInfo, true);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            
            //申請状況名をセット
            new StatusManager(userInfo).setStatusNames(connection, simpleInfos);
            return simpleInfos;
            
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 申請情報を取得.<br><br>
     * 
     * <b>1.申請情報の取得</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報取得<br>
     * 　(1)のチェックで参照可能申請データであれば、データ取得処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                -- システム受付番号
     *     ,A.UKETUKE_NO            -- 申請番号
     *     ,A.JIGYO_ID                -- 事業ID
     *     ,A.NENDO                    -- 年度
     *     ,A.KAISU                    -- 回数
     *     ,A.JIGYO_NAME            -- 事業名
     *     ,A.SHINSEISHA_ID            -- 申請者ID
     *     ,A.SAKUSEI_DATE            -- 申請書作成日
     *     ,A.SHONIN_DATE            -- 所属機関承認日
     *     ,A.JYURI_DATE            -- 学振受理日
     *     ,A.NAME_KANJI_SEI        -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI        -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI            -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI            -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI            -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI            -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                -- 年齢
     *     ,A.KENKYU_NO                -- 申請者研究者番号
     *     ,A.SHOZOKU_CD            -- 所属機関コード
     *     ,A.SHOZOKU_NAME            -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU    -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD            -- 部局コード
     *     ,A.BUKYOKU_NAME            -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU    -- 部局名（略称）
     *     ,A.SHOKUSHU_CD            -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI    -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU    -- 職名（略称）
     *     ,A.ZIP                    -- 郵便番号
     *     ,A.ADDRESS                -- 住所
     *     ,A.TEL                    -- TEL
     *     ,A.FAX                    -- FAX
     *     ,A.EMAIL                    -- E-Mail
     *     ,A.SENMON                -- 現在の専門
     *     ,A.GAKUI                    -- 学位
     *     ,A.BUNTAN                -- 役割分担
     *     ,A.KADAI_NAME_KANJI        -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO        -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN            -- 事業区分
     *     ,A.SHINSA_KUBUN            -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO    -- 審査区分名称
     *     ,A.BUNKATSU_NO            -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO    -- 分割番号名称
     *     ,A.KENKYU_TAISHO            -- 研究対象の類型
     *     ,A.KEI_NAME_NO            -- 系等の区分番号
     *     ,A.KEI_NAME                -- 系等の区分
     *     ,A.KEI_NAME_RYAKU        -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD        -- 細目番号
     *     ,A.BUNYA_NAME            -- 分野
     *     ,A.BUNKA_NAME            -- 分科
     *     ,A.SAIMOKU_NAME            -- 細目
     *     ,A.BUNKASAIMOKU_CD2        -- 細目番号2
     *     ,A.BUNYA_NAME2            -- 分野2
     *     ,A.BUNKA_NAME2            -- 分科2
     *     ,A.SAIMOKU_NAME2            -- 細目2
     *     ,A.KANTEN_NO                -- 推薦の観点番号
     *     ,A.KANTEN                -- 推薦の観点
     *     ,A.KANTEN_RYAKU            -- 推薦の観点略称
     *     ,A.KEIHI1                -- 1年目研究経費
     *     ,A.BIHINHI1                -- 1年目設備備品費
     *     ,A.SHOMOHINHI1            -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1            -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1            -- 1年目外国旅費
     *     ,A.RYOHI1                -- 1年目旅費
     *     ,A.SHAKIN1                -- 1年目謝金等
     *     ,A.SONOTA1                -- 1年目その他
     *     ,A.KEIHI2                -- 2年目研究経費
     *     ,A.BIHINHI2                -- 2年目設備備品費
     *     ,A.SHOMOHINHI2            -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2            -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2            -- 2年目外国旅費
     *     ,A.RYOHI2                -- 2年目旅費
     *     ,A.SHAKIN2                -- 2年目謝金等
     *     ,A.SONOTA2                -- 2年目その他
     *     ,A.KEIHI3                -- 3年目研究経費
     *     ,A.BIHINHI3                -- 3年目設備備品費
     *     ,A.SHOMOHINHI3            -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3            -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3            -- 3年目外国旅費
     *     ,A.RYOHI3                -- 3年目旅費
     *     ,A.SHAKIN3                -- 3年目謝金等
     *     ,A.SONOTA3                -- 3年目その他
     *     ,A.KEIHI4                -- 4年目研究経費
     *     ,A.BIHINHI4                -- 4年目設備備品費
     *     ,A.SHOMOHINHI4            -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4            -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4            -- 4年目外国旅費
     *     ,A.RYOHI4                -- 4年目旅費
     *     ,A.SHAKIN4                -- 4年目謝金等
     *     ,A.SONOTA4                -- 4年目その他
     *     ,A.KEIHI5                -- 5年目研究経費
     *     ,A.BIHINHI5                -- 5年目設備備品費
     *     ,A.SHOMOHINHI5            -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5            -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5            -- 5年目外国旅費
     *     ,A.RYOHI5                -- 5年目旅費
     *     ,A.SHAKIN5                -- 5年目謝金等
     *     ,A.SONOTA5                -- 5年目その他
     *     ,A.KEIHI_TOTAL            -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL            -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL        -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL    -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL    -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL            -- 総計-旅費
     *     ,A.SHAKIN_TOTAL            -- 総計-謝金等
     *     ,A.SONOTA_TOTAL            -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO        -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI        -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG            -- 分担金の有無
     *     ,A.KOYOHI                -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU            -- 研究者数
     *     ,A.TAKIKAN_NINZU            -- 他機関の分担者数
     * 　　,A.KYORYOKUSHA_NINZU        -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN            -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU        -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO        -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG            -- 申請の有無
     *     ,A.KADAI_NO_SAISYU        -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO        -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG            -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD        -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME        -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                -- XMLの格納パス
     *     ,A.PDF_PATH                -- PDFの格納パス
     *     ,A.JURI_KEKKA            -- 受理結果
     *     ,A.JURI_BIKO                -- 受理結果備考
     *     ,A.SUISENSHO_PATH        -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC            -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN            -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED        -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO            -- １次審査備考
     *     ,A.KEKKA2                -- ２次審査結果
     *     ,A.SOU_KEHI                -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI            -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO            -- 業務担当者記入欄
     *     ,A.JOKYO_ID                -- 申請状況ID
     *     ,A.SAISHINSEI_FLG        -- 再申請フラグ
     *     ,A.EDITION                -- 版
     *     ,A.DEL_FLG                -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A        -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * (3)事業CD、事業年度のセット<br>
     * 　事業IDより事業CD、事業年度を算出し、(2)で取得したShinseiDataInfoセットする。<br>
     * 　　事業CD　：事業IDの３〜７文字目<br>
     * 　　事業年度：事業IDの１〜２文字目<br><br>
     * 
     * <b>2.添付ファイル情報の取得</b><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO,                -- システム受付番号
     *     A.SEQ_TENPU,                -- シーケンス番号
     *     A.JIGYO_ID,                -- 事業ID
     *     A.TENPU_PATH,                -- 格納パス
     *     A.PDF_PATH                -- 変換ファイル格納パス
     * FROM
     *     TENPUFILEINFO A            -- 添付ファイル管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * 取得した添付ファイル情報(TenpuFileInfo[])を、ShinseiDataInfoにセットする。<br><br>
     * 
     * <b>3.研究組織情報の取得</b><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     SYSTEM_NO                    -- システム受付番号
     *     ,SEQ_NO                        -- シーケンス番号
     *     ,JIGYO_ID                    -- 事業ID
     *     ,BUNTAN_FLG                    -- 代表者分担者別
     *     ,KENKYU_NO                    -- 研究者番号
     *     ,NAME_KANJI_SEI                -- 氏名（漢字−姓）
     *     ,NAME_KANJI_MEI                -- 氏名（漢字−名）
     *     ,NAME_KANA_SEI                -- 氏名（フリガナ−姓）
     *     ,NAME_KANA_MEI                -- 氏名（フリガナ−名）
     *     ,SHOZOKU_CD                    -- 所属機関コード
     *     ,SHOZOKU_NAME                -- 所属機関名
     *     ,BUKYOKU_CD                    -- 部局コード
     *     ,BUKYOKU_NAME                -- 部局名
     *     ,SHOKUSHU_CD                    -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI            -- 職名
     *     ,SENMON                        -- 現在の専門
     *     ,GAKUI                        -- 学位
     *     ,BUNTAN                        -- 役割分担
     *     ,KEIHI                        -- 研究経費
     *     ,EFFORT                        -- エフォート
     *     ,NENREI                        -- 年齢
     * FROM
     *     KENKYUSOSHIKIKANRI            -- 研究組織表管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * ORDER BY SEQ_NO
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * 取得した研究組織情報(List)を、ShinseiDataInfoにセットする。<br><br>
     * 
     * <b>4.ShinseiDataInfoの返却</b><br>
     * ShinseiDataInfoを返却する。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param pkInfo    ShinseiDataPk
     * @return 申請情報(ShinseiDataInfo)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#selectShinseiDataInfo(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public ShinseiDataInfo selectShinseiDataInfo(
            UserInfo userInfo,
            ShinseiDataPk pkInfo)
            throws NoDataFoundException, ApplicationException {
        
        //DBコネクションの取得
        Connection connection = null;
        
        try{
            connection = DatabaseUtil.getConnection();
            //---申請情報
            ShinseiDataInfo shinseiDataInfo = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                shinseiDataInfo = dao.selectShinseiDataInfo(connection, pkInfo, true);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            
            //---事業IDより算出してセット
            String jigyoId = shinseiDataInfo.getJigyoId();
            shinseiDataInfo.setJigyoCd(jigyoId.substring(2,7));            //事業CD
            shinseiDataInfo.setNendoSeireki(jigyoId.substring(0,2));    //年度（西暦）
            
//2006/02/16 Add Start 理由は：学振受付期間（終了）を追加する            
            //---事業情報管理
            JigyoKanriInfo jigyoKanriInfo = null;
            try{
                //事業管理主キーオブジェクトの生成
                JigyoKanriPk jigyoKanriPk = new JigyoKanriPk(jigyoId);
                IJigyoKanriMaintenance jigyoMainte = new JigyoKanriMaintenance();
                jigyoKanriInfo = jigyoMainte.select(userInfo, jigyoKanriPk);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "事業情報管理管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
// End Nae
//            2006/02/15 Start 
            //学振受付期間
            shinseiDataInfo.setUketukekikanEnd(jigyoKanriInfo.getUketukekikanEnd());
            //研究者名簿締切日を追加
            if(IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(shinseiDataInfo.getKadaiInfo().getJigyoKubun())){
                String meiboDate = jigyoKanriInfo.getMeiboDate().toString();
                shinseiDataInfo.setMeiboDate(jigyoKanriInfo.getMeiboDate());                    //研究者名簿締切日
                DateUtil dateUtil = new DateUtil();
                if (!StringUtil.isBlank(meiboDate)) {
                    shinseiDataInfo.setMeiboDateWareki(dateUtil.getJpyString(
                            meiboDate.substring(0, 4), meiboDate.substring(5, 7), 
                            meiboDate.substring(8, 10)));
                }
            }
//End Nae    
            
            //---添付ファイル情報
            TenpuFileInfo[] tenpuFileInfos = null;    
            try{
                TenpuFileInfoDao dao = new TenpuFileInfoDao(userInfo);
                tenpuFileInfos = dao.selectTenpuFileInfos(connection, pkInfo);
                shinseiDataInfo.setTenpuFileInfos(tenpuFileInfos);    //申請データオブジェクトにセット
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "添付ファイル情報検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            } catch (NoDataFoundException e) {
                //添付ファイルが登録されていない場合は何も処理しない
            }
            
            //---研究組織情報
            try{
                KenkyuSoshikikanriDao dao = new KenkyuSoshikikanriDao(userInfo);
                List list = dao.selectKenkyuSoshikiKenkyushaInfo(connection, pkInfo);
                shinseiDataInfo.setKenkyuSoshikiInfoList(list);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "研究組織情報検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            } catch (NoDataFoundException e) {
                //研究組織情報が登録されていない場合は何も処理しない
            }
            
            return shinseiDataInfo;
            
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 新規入力用初期データを返却.<br><br>
     * 
     * <b>1.事業情報取得</b><br>
     * JigyoKanriMaintenanceクラスのselect(UserInfo, JigyoKanriPk)メソッドを呼び、事業情報を取得する。<br>
     * 引数に、第一引数userInfoと第二引数pkInfoを渡す。<br><br>
     * 
     * <b>2.系等の区分、推薦の観点（プルダウン）のラベル名リスト取得</b><br>
     * LabelValueMaintenanceクラスのgetLabelList(String[])メソッドを呼び、ラベル名リストを取得する。<br>
     * 引数にラベル区分配列を渡す。<br>
     * ラベル区分配列の中身<br>
     * 　[0]："KEI_KUBUN_"(ILabelKubun.KEI_KUBUN)+jigyoKubun<br>
     * 　[1]："SUISEN"(ILabelKubun.SUISEN)<br><br>
     * 
     * LabelValueMaintenanceクラスのgetLabelList(String[])メソッド<br>
     * 系統の区分、推薦の観点それぞれに、以下の処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.ATAI
     *     , A.NAME
     *     , A.RYAKU
     *     , A.SORT
     *     , A.BIKO
     * FROM
     *     MASTER_LABEL A
     * WHERE
     *     A.LABEL_KUBUN = ?
     *     AND A.SORT != 0
     * 
     * ORDER BY SORT
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.LABEL_KUBUN</td><td>"KEI_KUBUN_"+jigyoKubun(系統の区分)<br>　or　<br>"SUISEN"(推薦の観点)</td></tr>
     * </table><br>
     * 
     * 　取得したラベル情報からラベル名称と値を取得し、リストに格納する。<br><br>
     * 
     * <b>3.職種（プルダウン、研究組織表入力）のラベル名リスト取得</b><br>
     * LabelValueMaintenanceクラスのgetShokushuList()メソッドを呼び、ラベル名リストを取得する。<br><br>
     * 
     * LabelValueMaintenanceクラスのgetShokushuList()メソッドの処理<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SHOKUSHU_CD            -- 職コード
     *     ,A.SHOKUSHU_NAME            -- 職名称
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名(略称)
     *     ,A.BIKO                    -- 備考
     * FROM
     *     MASTER_SHOKUSHU A        -- 職種マスタテーブル
     * 
     * ORDER BY A.SHOKUSHU_CD
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 　取得した職種一覧から職名称と職コードを取得し、リストに格納する。<br><br>
     * 
     * <b>4.申請者情報のセット</b><br>
     * 第一引数userInfoから申請者情報を取得し、ShinseishaInfoにセットする。<br>
     * 申請者情報ShinseishaInfoから値を取得し、各情報にセットする。<br>
     * セットする値は以下の通り。<br><br>
     * 
     * (1)ShinseiDataInfo(申請情報)のセット<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者ID</td><td>ShinseishaInfoのshinseishaId</td></tr>
     * </table><br><br>
     * 
     * (2)DaihyouInfo(研究代表者情報)のセット<br>
     * 　ShinseiDataInfoの研究代表者情報を取得する。<br><br>
     * 
     * 　申請者情報ShinseishaInfoから値を取得し、以下をセットする。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（漢字等-姓）</td><td>ShinseishaInfoのnameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（漢字等-名）</td><td>ShinseishaInfoのnameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（カナ-姓）</td><td>ShinseishaInfoのnameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（カナ-名）</td><td>ShinseishaInfoのnameKanaMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>研究者番号</td><td>ShinseishaInfoのkenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>ShinseishaInfoのshozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関名</td><td>ShinseishaInfoのshozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関名略称</td><td>ShinseishaInfoのshozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局コード</td><td>ShinseishaInfoのbukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局名</td><td>ShinseishaInfoのbukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局名略称</td><td>ShinseishaInfoのbukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職コード</td><td>ShinseishaInfoのshokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職名</td><td>ShinseishaInfoのshokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職名略称</td><td>ShinseishaInfoのshokushuNameRyaku</td></tr>
     * </table><br><br>
     * 
     * 
     * (3)KadaiInfo(課題情報)のセット<br>
     * 　ShinseiDataInfoの課題情報を取得する。<br><br>
     * 
     * 　1.で取得した事業情報JigyoKanriInfoから値を取得し、以下をセットする。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業区分</td><td>JigyoKanriInfoのjigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>審査区分</td><td>JigyoKanriInfoのshinsaKubun</td></tr>
     * </table><br><br>
     * 
     * (4)KenkyuSoshikiKenkyushaInfo(研究組織情報)のセット　※代表者関連の値のみセット<br>
     * 　1.で取得した事業情報から取得し、事業IDをセットする。<br>
     * 　"代表者分担者別"に"1"をセットする。<br><br>
     * 
     * 　申請者情報ShinseishaInfoから値を取得し、以下をセットする。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>研究者番号</td><td>ShinseishaInfoのkenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（漢字-姓）</td><td>ShinseishaInfoのnameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（漢字-名）</td><td>ShinseishaInfoのnameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（カナ-姓）</td><td>ShinseishaInfoのnameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（カナ-名）</td><td>ShinseishaInfoのnameKanaMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>ShinseishaInfoのshozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関名</td><td>ShinseishaInfoのshozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局コード</td><td>ShinseishaInfoのbukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局名</td><td>ShinseishaInfoのbukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職コード</td><td>ShinseishaInfoのshokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職名</td><td>ShinseishaInfoのshokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>年齢</td><td>ShinseishaInfoのbirthdayにDateFormat.getAgeOnApril1st()をかけたもの</td></tr>
     * </table><br><br>
     * 
     * KenkyuSoshikiKenkyushaInfo(研究組織情報)をリストに格納し、ShinseiDataInfo(申請情報)にセットする。<br><br>
     * 
     * (5)ShinseiDataInfo(申請情報)に事業情報をセットする。<br>
     * 　1.で取得した事業情報から値を取得し、以下をセットする。<br>
     * 　※事業CD、回数、事業年度は事業IDから抽出<br>
     * 　　　事業CD　：事業IDの３〜７文字目<br>
     * 　　　回数　　：事業IDの８文字目<br>
     * 　　　事業年度：事業IDの１〜２文字目<br><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業ID</td><td>JigyoKanriInfoのjigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業CD</td><td>JigyoKanriInfoのjigyoId.substring(3,7)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>回数</td><td>JigyoKanriInfoのjigyoId.substring(7,8)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業年度</td><td>JigyoKanriInfoのjigyoId.substring(0,2)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>年度</td><td>JigyoKanriInfoのnendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業名称</td><td>JigyoKanriInfoのjigyoName</td></tr>
     * </table><br><br>
     * 
     * <b>5.Map返却</b><br>
     * 申請情報、各種プルダウンリストをMapに格納して返却する。<br>
     * 各情報に対応するキーは以下の通り。<br><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">キー</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_SHINSEIDATA_INFO</td><td>shinseiDataInfo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_KEI_KUBUN_LIST</td><td>keitouList</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_SUISEN_LIST</td><td>suisenList</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_SHOKUSHU_LIST</td><td>shokushuList</td></tr>
     * </table><br><br>
     * 
     * @param userInfo    UserInfo
     * @param pkInfo    JigyoKanriPk
     * @return 新規入力用初期データ(Map)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#select(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.JigyoPk)
     */
    public Map selectShinseiDataForInput(UserInfo userInfo, JigyoKanriPk pkInfo)
            throws NoDataFoundException, ApplicationException {

        //---事業情報管理
        JigyoKanriInfo jigyoKanriInfo = null;
        try{
            IJigyoKanriMaintenance jigyoMainte = new JigyoKanriMaintenance();
            jigyoKanriInfo = jigyoMainte.select(userInfo, pkInfo);
        } catch (ApplicationException e) {
            throw new ApplicationException(
                "事業情報管理管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---事業情報
        String jigyoId     = null;
        String jigyoCd     = null;
        String kaisu       = null;
        String jigyoKubun  = null;
        String shinsaKubun = null;
        try{
            //事業IDより事業コードを抽出（事業ID=年度(2桁)+事業コード(5桁)+回数(1桁))
            jigyoId     = jigyoKanriInfo.getJigyoId();
            jigyoCd     = jigyoId.substring(2,7);
            kaisu       = jigyoId.substring(7,8);
            jigyoKubun  = jigyoKanriInfo.getJigyoKubun();        //事業区分
            shinsaKubun = jigyoKanriInfo.getShinsaKubun();        //審査区分
        }catch(RuntimeException e){
            throw new ApplicationException(
                "事業IDより事業コードの抽出時にエラーが発生しました。事業IDの形式が不正です。",
                e);
        }
        
        //---系統の区分、推薦の観点プルダウン
        List keitouList = null;
        List suisenList = null;
        try{
            String[] labelKubun = new String[]{ILabelKubun.KEI_KUBUN + jigyoKubun,
                                               ILabelKubun.SUISEN};
            List bothList = new LabelValueMaintenance().getLabelList(labelKubun);    //2つのラベルリスト
            keitouList = (List)bothList.get(0);
            suisenList = (List)bothList.get(1);
        }catch(ApplicationException e){
            throw new ApplicationException(
                "ラベルマスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---職種プルダウン（研究組織表入力）
        List shokushuList = null;
        try{
            shokushuList = new LabelValueMaintenance().getShokushuList();
        }catch(ApplicationException e){
            throw new ApplicationException(
                "職種マスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }

// 20050527 Start
        //---領域プルダウン
        List ryouikiList = null;
        try{
            ryouikiList = new LabelValueMaintenance().getKenkyuKubunList();
        }catch(ApplicationException e){
            throw new ApplicationException(
                "領域マスタ検索中にDBエラーが発生しました。",new ErrorInfo("errors.4004"),e);}
// Horikoshi End
        
//2007/02/08 苗　追加ここから
        //---審査希望分野名プルダウン
        List kiboubumonList = null;
        try{
            String[] labelKubun = new String[]{ILabelKubun.SHINSAKIBO_BUNYA_WAKA};
            List bothList = new LabelValueMaintenance().getLabelList(labelKubun);   //1つのラベルリスト
            kiboubumonList = (List)bothList.get(0);
        }catch(ApplicationException e){
            throw new ApplicationException(
                "ラベルマスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
//2007/02/08　苗　追加ここまで        

        //申請情報オブジェクトを生成する
        ShinseiDataInfo shinseiDataInfo = new ShinseiDataInfo();
        
        //ログイン情報から申請者情報をセットする
        ShinseishaInfo shinseishaInfo = userInfo.getShinseishaInfo();
        shinseiDataInfo.setShinseishaId(shinseishaInfo.getShinseishaId());                //申請者ID
        DaihyouInfo daihyouInfo = shinseiDataInfo.getDaihyouInfo();
        daihyouInfo.setNameKanjiSei(shinseishaInfo.getNameKanjiSei());                    //申請者氏名（漢字-姓）
        daihyouInfo.setNameKanjiMei(shinseishaInfo.getNameKanjiMei());                    //申請者氏名（漢字-名）
        //2005/04/27 削除 ここから------------------------------------------
        //ローマ字情報削除のため
        //daihyouInfo.setNameRoSei(shinseishaInfo.getNameRoSei());                        //申請者氏名（ローマ字-姓）
        //daihyouInfo.setNameRoMei(shinseishaInfo.getNameRoMei());                        //申請者氏名（ローマ字-名）
        //削除 ここまで-----------------------------------------------------
        daihyouInfo.setNameKanaSei(shinseishaInfo.getNameKanaSei());                    //申請者氏名（カナ-姓）
        daihyouInfo.setNameKanaMei(shinseishaInfo.getNameKanaMei());                    //申請者氏名（カナ-名）
        daihyouInfo.setKenkyuNo(shinseishaInfo.getKenkyuNo());                            //研究者番号
        daihyouInfo.setShozokuCd(shinseishaInfo.getShozokuCd());                        //所属機関コード
        daihyouInfo.setShozokuName(shinseishaInfo.getShozokuName());                    //所属機関名
        daihyouInfo.setShozokuNameRyaku(shinseishaInfo.getShozokuNameRyaku());            //所属機関名（略称）    
        daihyouInfo.setBukyokuCd(shinseishaInfo.getBukyokuCd());                        //部局コード
        daihyouInfo.setBukyokuName(shinseishaInfo.getBukyokuName());                    //部局名
        daihyouInfo.setBukyokuNameRyaku(shinseishaInfo.getBukyokuNameRyaku());            //部局名（略称）
        daihyouInfo.setShokushuCd(shinseishaInfo.getShokushuCd());                        //職コード
        daihyouInfo.setShokushuNameKanji(shinseishaInfo.getShokushuNameKanji());        //職名
        daihyouInfo.setShokushuNameRyaku(shinseishaInfo.getShokushuNameRyaku());        //職名（略称）


        //課題情報をセットする
        KadaiInfo kadaiInfo = shinseiDataInfo.getKadaiInfo();
        kadaiInfo.setJigyoKubun(jigyoKubun);                                            //事業区分
        kadaiInfo.setShinsaKubun(shinsaKubun);                                            //審査区分
        
        //研究組織情報の代表者部分のみセットする
        KenkyuSoshikiKenkyushaInfo kenkyuSoshikiInfo = new KenkyuSoshikiKenkyushaInfo();
        kenkyuSoshikiInfo.setJigyoID(jigyoId);                                            //事業ID
        kenkyuSoshikiInfo.setBuntanFlag("1");                                            //分担フラグ（1:代表者）
        kenkyuSoshikiInfo.setKenkyuNo(shinseishaInfo.getKenkyuNo());                    //研究者番号
        kenkyuSoshikiInfo.setNameKanjiSei(shinseishaInfo.getNameKanjiSei());            //申請者氏名（漢字-姓）
        kenkyuSoshikiInfo.setNameKanjiMei(shinseishaInfo.getNameKanjiMei());            //申請者氏名（漢字-名）
        kenkyuSoshikiInfo.setNameKanaSei(shinseishaInfo.getNameKanaSei());                //申請者氏名（カナ-姓）
        kenkyuSoshikiInfo.setNameKanaMei(shinseishaInfo.getNameKanaMei());                //申請者氏名（カナ-名）
        kenkyuSoshikiInfo.setShozokuCd(shinseishaInfo.getShozokuCd());                    //所属機関コード
        kenkyuSoshikiInfo.setShozokuName(shinseishaInfo.getShozokuName());                //所属機関名    
        kenkyuSoshikiInfo.setBukyokuCd(shinseishaInfo.getBukyokuCd());                    //部局コード
        kenkyuSoshikiInfo.setBukyokuName(shinseishaInfo.getBukyokuName());                //部局名
        kenkyuSoshikiInfo.setShokushuCd(shinseishaInfo.getShokushuCd());                //職コード
        kenkyuSoshikiInfo.setShokushuNameKanji(shinseishaInfo.getShokushuNameKanji());    //職名
// 20050712 4月2日時点での誕生日を取得するため　更に研究の年度ではなくシステム日付が基準日とされていたため
//        //2005/03/31 追加 ---------------------------------------ここから
//        //理由 年齢を申請者の誕生日から取得するように仕様が変更されたため
//        //その際4/1時点の年齢を計算する。
//        kenkyuSoshikiInfo.setNenrei(""+DateFormat.getAgeOnApril1st(shinseishaInfo.getBirthday()));    //年齢
//        //2005/03/31 追加 ---------------------------------------ここまで

        String chNendo = jigyoId.substring(0,2);
        chNendo = "20" + chNendo;        //2000年以降でよい
        if(chNendo != null && StringUtil.isDigit(chNendo) && chNendo.length() == 4){
                kenkyuSoshikiInfo.setNenrei("" + DateFormat.getAgeOnApril1st(
                    shinseishaInfo.getBirthday(),
                    StringUtil.parseInt(chNendo)
                ));    //年齢
        }
        else{
            //西暦が不正な場合は？
        }
// Horikoshi
        //研究者リストを作成して申請情報にセットする
        List kenkyushaList = new ArrayList();
        kenkyushaList.add(kenkyuSoshikiInfo);
        shinseiDataInfo.setKenkyuSoshikiInfoList(kenkyushaList);
        
        //事業管理情報をセットする
        shinseiDataInfo.setJigyoId(jigyoId);                                            //事業ID
        shinseiDataInfo.setJigyoCd(jigyoCd);                                            //事業CD
        shinseiDataInfo.setKaisu(kaisu);                                                //回数
        shinseiDataInfo.setNendoSeireki(jigyoId.substring(0,2));                        //年度（西暦）
        shinseiDataInfo.setNendo(jigyoKanriInfo.getNendo());                            //年度（和暦）
        shinseiDataInfo.setJigyoName(jigyoKanriInfo.getJigyoName());                    //事業名
// 2006/02/13 Start 学振受付期間（終了）
        shinseiDataInfo.setUketukekikanEnd(jigyoKanriInfo.getUketukekikanEnd());
// 2006/02/13 Nae
// 2006/02/08 Start 研究者名簿締切日を追加
        if(IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(jigyoKubun)){
            String meiboDate = jigyoKanriInfo.getMeiboDate().toString();
            shinseiDataInfo.setMeiboDate(jigyoKanriInfo.getMeiboDate());                    //研究者名簿締切日
            DateUtil dateUtil = new DateUtil();
            if (!StringUtil.isBlank(meiboDate)) {
                shinseiDataInfo.setMeiboDateWareki(dateUtil.getJpyString(
                        meiboDate.substring(0, 4), meiboDate.substring(5, 7),
                        meiboDate.substring(8, 10)));
            }
        }
// BYOU End

        //申請情報（申請者情報、事業管理情報含む）とプルダウンリストをMapに格納して返す
        Map map = new HashMap();
        map.put(KEY_SHINSEIDATA_INFO, shinseiDataInfo);
        map.put(KEY_KEI_KUBUN_LIST,   keitouList);
        map.put(KEY_SUISEN_LIST,      suisenList);
        map.put(KEY_SHOKUSHU_LIST,    shokushuList);
// 20050527 Start　※特定領域のリストをセット
        map.put(KEY_RYOUIKI_LIST,        ryouikiList);
// Horikoshi End
//2007/02/08 苗　追加ここから
        map.put(KEY_KIBOUBUMON_WAKA_LIST,kiboubumonList);       
//2007/02/08　苗　追加ここまで        

        return map;
    }

    /**
     * 修正用既存データを返却.<br><br>
     * 
     * <b>1.申請情報の取得</b><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.KYORYOKUSHA_NINZU            -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.EDITION                    -- 版
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * <b>2.研究組織情報の取得</b><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     SYSTEM_NO                    -- システム受付番号
     *     ,SEQ_NO                        -- シーケンス番号
     *     ,JIGYO_ID                    -- 事業ID
     *     ,BUNTAN_FLG                    -- 代表者分担者別
     *     ,KENKYU_NO                    -- 研究者番号
     *     ,NAME_KANJI_SEI                -- 氏名（漢字−姓）
     *     ,NAME_KANJI_MEI                -- 氏名（漢字−名）
     *     ,NAME_KANA_SEI                -- 氏名（フリガナ−姓）
     *     ,NAME_KANA_MEI                -- 氏名（フリガナ−名）
     *     ,SHOZOKU_CD                    -- 所属機関コード
     *     ,SHOZOKU_NAME                -- 所属機関名
     *     ,BUKYOKU_CD                    -- 部局コード
     *     ,BUKYOKU_NAME                -- 部局名
     *     ,SHOKUSHU_CD                    -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI            -- 職名
     *     ,SENMON                        -- 現在の専門
     *     ,GAKUI                        -- 学位
     *     ,BUNTAN                        -- 役割分担
     *     ,KEIHI                        -- 研究経費
     *     ,EFFORT                        -- エフォート
     *     ,NENREI                        -- 年齢
     * FROM
     *     KENKYUSOSHIKIKANRI            -- 研究組織表管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * ORDER BY SEQ_NO
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * 取得した研究組織情報(List)をShinseiDataInfoにセットする。<br><br>
     * 
     * <b>3.申請者情報のセット</b><br>
     * 申請者情報ShinseishaInfoから値を取得し、各情報にセットする。<br>
     * セットする値は以下の通り。<br><br>
     * 
     * (1)ShinseiDataInfo(申請情報)のセット<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業CD</td><td>ShinseiDataInfoのjigyoId.substring(2,7)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業年度</td><td>ShinseiDataInfoのjigyoId.substring(0,2)</td></tr>
     * </table><br><br>
     * 
     * 　第一引数userInfoから申請者情報ShinseishaInfoを取得する。<br>
     * 　ShinseiDataInfoの申請者IDを、InfoShinseishaInfoから取得しセットする。<BR><BR>
     * 
     * 
     * (2)DaihyouInfo(研究代表者情報)のセット<br>
     * 　ShinseiDataInfoの研究代表者情報を取得する。<br><br>
     * 
     * 　申請者情報ShinseishaInfoから値を取得し、以下をセットする。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（漢字等-姓）</td><td>ShinseishaInfoのnameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（漢字等-名）</td><td>ShinseishaInfoのnameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（ローマ字-姓）</td><td>ShinseishaInfoのnameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（ローマ字-名）</td><td>ShinseishaInfoのnameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（カナ-姓）</td><td>ShinseishaInfoのnameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者氏名（カナ-名）</td><td>ShinseishaInfoのnameKanaMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>研究者番号</td><td>ShinseishaInfoのkenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>ShinseishaInfoのshozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関名</td><td>ShinseishaInfoのshozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関名略称</td><td>ShinseishaInfoのshozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局コード</td><td>ShinseishaInfoのbukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局名</td><td>ShinseishaInfoのbukyokuName(shinseiDataInfoから取得した事業区分が"基盤研究"の場合)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局名略称</td><td>ShinseishaInfoのbukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職コード</td><td>ShinseishaInfoのshokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職名</td><td>ShinseishaInfoのshokushuNameKanji(shinseiDataInfoから取得した事業区分が"基盤研究"の場合)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職名略称</td><td>ShinseishaInfoのshokushuNameRyaku</td></tr>
     * </table><br><br>
     * 
     * (3)KenkyuSoshikiKenkyushaInfo(研究組織情報)のセット　※代表者関連の値のみセット<br>
     * 　1.で取得した事業情報から取得し、事業IDをセットする。<br>
     * 　"代表者分担者別"に"1"をセットする。<br><br>
     * 
     * 　申請者情報ShinseishaInfoから値を取得し、以下をセットする。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数名（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>研究者番号</td><td>ShinseishaInfoのkenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（漢字-姓）</td><td>ShinseishaInfoのnameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（漢字-名）</td><td>ShinseishaInfoのnameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（カナ-姓）</td><td>ShinseishaInfoのnameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>氏名（カナ-名）</td><td>ShinseishaInfoのnameKanaMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>ShinseishaInfoのshozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関名</td><td>ShinseishaInfoのshozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局コード</td><td>ShinseishaInfoのbukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>部局名</td><td>ShinseishaInfoのbukyokuName(shinseiDataInfoから取得した事業区分が"基盤研究"の場合)</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職コード</td><td>ShinseishaInfoのshokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>職名</td><td>ShinseishaInfoのshokushuNameKanji(shinseiDataInfoから取得した事業区分が"基盤研究"の場合)</td></tr>
     * </table><br><br>
     * 
     * <b>4.系等の区分、推薦の観点（プルダウン）のラベル名リスト取得</b><br>
     * LabelValueMaintenanceクラスのgetLabelList(String[])メソッドを呼び、ラベル名リストを取得する。<br>
     * 引数にラベル区分配列を渡す。<br>
     * ラベル区分配列の中身<br>
     * 　[0]："KEI_KUBUN_"(ILabelKubun.KEI_KUBUN)+jigyoKubun<br>
     * 　[1]："SUISEN"(ILabelKubun.SUISEN)<br><br>
     * 
     * JigyoKanriMaintenanceクラスのselect(UserInfo, JigyoKanriPk)メソッド<br>
     * 系等の区分、推薦の観点それぞれに、以下の処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.ATAI
     *     , A.NAME
     *     , A.RYAKU
     *     , A.SORT
     *     , A.BIKO
     * FROM
     *     MASTER_LABEL A
     * WHERE
     *     A.LABEL_KUBUN = ?
     *     AND A.SORT != 0
     * 
     * ORDER BY SORT
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>A.LABEL_KUBUN</td><td>"KEI_KUBUN_"+jigyoKubun(系統の区分)<br>　or　<br>"SUISEN"(推薦の観点)</td></tr>
     * </table><br>
     * 
     * 　取得したラベル情報からラベル名称と値を取得し、リストに格納する。<br><br>
     * 
     * <b>5.職種（プルダウン、研究組織表入力）のラベル名リスト取得</b><br>
     * LabelValueMaintenanceクラスのgetShokushuList()メソッドを呼び、ラベル名リストを取得する。<br><br>
     * 
     * LabelValueMaintenanceクラスのgetShokushuList()メソッドの処理<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SHOKUSHU_CD            -- 職コード
     *     ,A.SHOKUSHU_NAME            -- 職名称
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名(略称)
     *     ,A.BIKO                    -- 備考
     * FROM
     *     MASTER_SHOKUSHU A        -- 職種マスタテーブル
     * 
     * ORDER BY A.SHOKUSHU_CD
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 　取得した職種一覧から職名称と職コードを取得し、リストに格納する。<br><br>
     * 
     * <b>6.添付ファイル情報の取得</b><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO,                -- システム受付番号
     *     A.SEQ_TENPU,                -- シーケンス番号
     *     A.JIGYO_ID,                -- 事業ID
     *     A.TENPU_PATH,            -- 格納パス
     *     A.PDF_PATH                -- 変換ファイル格納パス
     * FROM
     *     TENPUFILEINFO A            -- 添付ファイル管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * 取得した添付ファイル情報(TenpuFileInfo[])を、ShinseiDataInfoにセットする。<br><br>
     * 
     * <b>7.Map返却</b><br>
     * 申請情報、各種プルダウンリストをMapに格納して返却する。<br>
     * 各情報に対応するキーは以下の通り。<br><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">キー</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_SHINSEIDATA_INFO</td><td>shinseiDataInfo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_KEI_KUBUN_LIST</td><td>keitouList</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_SUISEN_LIST</td><td>suisenList</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEY_SHOKUSHU_LIST</td><td>shokushuList</td></tr>
     * </table><br><br>
     * 
     * @param userInfo    UserInfo
     * @param pkInfo    ShinseiDataPk
     * @return  修正用既存データ(Map)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#select(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public Map selectShinseiDataForInput(UserInfo userInfo, ShinseiDataPk pkInfo)
            throws NoDataFoundException, ApplicationException {

        //DBコネクションの取得
        Connection connection = null;
        try{
            connection = DatabaseUtil.getConnection();
            
            //---申請情報
            ShinseiDataInfo shinseiDataInfo = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                shinseiDataInfo = dao.selectShinseiDataInfo(connection, pkInfo, true);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            //---研究組織情報
            try {
                KenkyuSoshikikanriDao dao = new KenkyuSoshikikanriDao(userInfo);
                List kenkyushaList = dao.selectKenkyuSoshikiKenkyushaInfo(connection, pkInfo);
                shinseiDataInfo.setKenkyuSoshikiInfoList(kenkyushaList);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "研究組織管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            

            //---事業IDより算出してセット
            String jigyoId = shinseiDataInfo.getJigyoId();
            shinseiDataInfo.setJigyoCd(jigyoId.substring(2,7));                                //事業CD
            shinseiDataInfo.setNendoSeireki(jigyoId.substring(0,2));                        //年度（西暦）    

// 2006/02/15 Add Start 理由は：学振受付期間（終了）を追加する            
            //---事業情報管理
            JigyoKanriInfo jigyoKanriInfo = null;
            try{
                //事業管理主キーオブジェクトの生成
                JigyoKanriPk jigyoKanriPk = new JigyoKanriPk(jigyoId);
                IJigyoKanriMaintenance jigyoMainte = new JigyoKanriMaintenance();
                jigyoKanriInfo = jigyoMainte.select(userInfo, jigyoKanriPk);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "事業情報管理管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
// End Nae
            
            //ログイン情報から申請者情報をセットする
            ShinseishaInfo shinseishaInfo = userInfo.getShinseishaInfo();
            shinseiDataInfo.setShinseishaId(shinseishaInfo.getShinseishaId());                //申請者ID
            DaihyouInfo daihyouInfo = shinseiDataInfo.getDaihyouInfo();
            daihyouInfo.setNameKanjiSei(shinseishaInfo.getNameKanjiSei());                    //申請者氏名（漢字-姓）
            daihyouInfo.setNameKanjiMei(shinseishaInfo.getNameKanjiMei());                    //申請者氏名（漢字-名）
            daihyouInfo.setNameRoSei(shinseishaInfo.getNameRoSei());                        //申請者氏名（ローマ字-姓）
            daihyouInfo.setNameRoMei(shinseishaInfo.getNameRoMei());                        //申請者氏名（ローマ字-名）
            daihyouInfo.setNameKanaSei(shinseishaInfo.getNameKanaSei());                    //申請者氏名（カナ-姓）
            daihyouInfo.setNameKanaMei(shinseishaInfo.getNameKanaMei());                    //申請者氏名（カナ-名）
            daihyouInfo.setKenkyuNo(shinseishaInfo.getKenkyuNo());                            //研究者番号
            daihyouInfo.setShozokuCd(shinseishaInfo.getShozokuCd());                        //所属機関コード
            daihyouInfo.setShozokuName(shinseishaInfo.getShozokuName());                    //所属機関名
            daihyouInfo.setShozokuNameRyaku(shinseishaInfo.getShozokuNameRyaku());            //所属機関名（略称）    
            
//2006/02/15 Start 
            //学振受付期間
            shinseiDataInfo.setUketukekikanEnd(jigyoKanriInfo.getUketukekikanEnd());
            //研究者名簿締切日を追加
            if(IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(shinseiDataInfo.getKadaiInfo().getJigyoKubun())){
                String meiboDate = jigyoKanriInfo.getMeiboDate().toString();
                shinseiDataInfo.setMeiboDate(jigyoKanriInfo.getMeiboDate());                    //研究者名簿締切日
                DateUtil dateUtil = new DateUtil();
                if (!StringUtil.isBlank(meiboDate)) {
                    shinseiDataInfo.setMeiboDateWareki(dateUtil.getJpyString(
                            meiboDate.substring(0, 4), meiboDate.substring(5, 7), 
                            meiboDate.substring(8, 10)));
                }
            }
//End Nae            
            
            //2005/8/31 ログイン者の部局コードは申請書情報の部局コードと異なる場合（申請者情報の変更がある）
            //ログイン者の情報で申請書情報を無条件に上書きする。
            //daihyouInfo.setBukyokuCd(shinseishaInfo.getBukyokuCd());                        //部局コード
            if (!daihyouInfo.getBukyokuCd().equals(shinseishaInfo.getBukyokuCd())){
                daihyouInfo.setBukyokuCd(shinseishaInfo.getBukyokuCd());                    //部局コード
                daihyouInfo.setBukyokuName(shinseishaInfo.getBukyokuName());                //部局名
            }
            //2005/8/19 部局コードが999,709,875,899,903,913以外の場合、設定する
//2006/06/30 苗　修正ここから　  理由は：部局コードのその他に、「901」を追加          
//            else if (!"999".equals(daihyouInfo.getBukyokuCd()) &&
//                    !"709".equals(daihyouInfo.getBukyokuCd()) &&
//                    !"875".equals(daihyouInfo.getBukyokuCd()) &&
//                    !"899".equals(daihyouInfo.getBukyokuCd()) &&
//                    !"903".equals(daihyouInfo.getBukyokuCd()) &&
//                    !"913".equals(daihyouInfo.getBukyokuCd())
            else if (!"999".equals(daihyouInfo.getBukyokuCd()) &&
                    !"709".equals(daihyouInfo.getBukyokuCd()) &&
                    !"875".equals(daihyouInfo.getBukyokuCd()) &&
                    !"899".equals(daihyouInfo.getBukyokuCd()) &&
                    !"901".equals(daihyouInfo.getBukyokuCd()) &&
                    !"903".equals(daihyouInfo.getBukyokuCd()) &&
                    !"913".equals(daihyouInfo.getBukyokuCd())
//2006/06/30　苗　修正ここまで                    
            ){
                daihyouInfo.setBukyokuName(shinseishaInfo.getBukyokuName());                //部局名
            }
            //略称がいつも申請者の情報をセットする 2005/8/31
            daihyouInfo.setBukyokuNameRyaku(shinseishaInfo.getBukyokuNameRyaku());            //部局名（略称）

            //2005/8/31 ログイン者の職コードは申請書情報の職コードと異なる場合（申請者情報の変更がある）
            //ログイン者の情報で申請書情報を無条件に上書きする。
            //daihyouInfo.setShokushuCd(shinseishaInfo.getShokushuCd());                    //職コード
            if (!daihyouInfo.getShokushuCd().equals(shinseishaInfo.getShokushuCd())){
                daihyouInfo.setShokushuCd(shinseishaInfo.getShokushuCd());                    //職コード
                daihyouInfo.setShokushuNameKanji(shinseishaInfo.getShokushuNameKanji());    //職名
            }
                //2005/8/19 職コードが24、25以外の場合設定する
            else if (!"24".equals(daihyouInfo.getShokushuCd()) && 
                    !"25".equals(daihyouInfo.getShokushuCd()) ){
                daihyouInfo.setShokushuNameKanji(shinseishaInfo.getShokushuNameKanji());    //職名
            }
            //略称がいつも申請者の情報をセットする 2005/8/31
            daihyouInfo.setShokushuNameRyaku(shinseishaInfo.getShokushuNameRyaku());        //職名（略称）


            //研究組織情報の代表者部分のみセットする
            List kenkyushaList = shinseiDataInfo.getKenkyuSoshikiInfoList();
            KenkyuSoshikiKenkyushaInfo kenkyuSoshikiInfo = (KenkyuSoshikiKenkyushaInfo)kenkyushaList.get(0);
            kenkyuSoshikiInfo.setJigyoID(jigyoId);                                            //事業ID
            kenkyuSoshikiInfo.setBuntanFlag("1");                                            //分担フラグ（1:代表者）
            kenkyuSoshikiInfo.setKenkyuNo(shinseishaInfo.getKenkyuNo());                    //研究者番号
            kenkyuSoshikiInfo.setNameKanjiSei(shinseishaInfo.getNameKanjiSei());            //申請者氏名（漢字-姓）
            kenkyuSoshikiInfo.setNameKanjiMei(shinseishaInfo.getNameKanjiMei());            //申請者氏名（漢字-名）
            kenkyuSoshikiInfo.setNameKanaSei(shinseishaInfo.getNameKanaSei());                //申請者氏名（カナ-姓）
            kenkyuSoshikiInfo.setNameKanaMei(shinseishaInfo.getNameKanaMei());                //申請者氏名（カナ-名）
            kenkyuSoshikiInfo.setShozokuCd(shinseishaInfo.getShozokuCd());                    //所属機関コード
            kenkyuSoshikiInfo.setShozokuName(shinseishaInfo.getShozokuName());                //所属機関名    
            //kenkyuSoshikiInfo.setBukyokuCd(shinseishaInfo.getBukyokuCd());                //部局コード
            //kenkyuSoshikiInfo.setShokushuCd(shinseishaInfo.getShokushuCd());                //職コード

            //2005/8/31 ログイン者の部局コードは申請書情報の部局コードと異なる場合（申請者情報の変更がある）
            //ログイン者の情報で申請書情報を無条件に上書きする。
            if (!kenkyuSoshikiInfo.getBukyokuCd().equals(shinseishaInfo.getBukyokuCd())){
                kenkyuSoshikiInfo.setBukyokuCd(shinseishaInfo.getBukyokuCd());                //部局コード
                kenkyuSoshikiInfo.setBukyokuName(shinseishaInfo.getBukyokuName());            //部局名
            }

            //2005/8/24 部局コードが999,709,875,899,903,913以外の場合、設定する
//2006/06/30 苗　修正ここから      理由は：部局コードのその他に、「901」を追加     
//            else if (!"999".equals(daihyouInfo.getBukyokuCd()) &&
//                !"709".equals(daihyouInfo.getBukyokuCd()) &&
//                !"875".equals(daihyouInfo.getBukyokuCd()) &&
//                !"899".equals(daihyouInfo.getBukyokuCd()) &&
//                !"903".equals(daihyouInfo.getBukyokuCd()) &&
//                !"913".equals(daihyouInfo.getBukyokuCd())
            else if (!"999".equals(daihyouInfo.getBukyokuCd()) &&
                    !"709".equals(daihyouInfo.getBukyokuCd()) &&
                    !"875".equals(daihyouInfo.getBukyokuCd()) &&
                    !"899".equals(daihyouInfo.getBukyokuCd()) &&
                    !"901".equals(daihyouInfo.getBukyokuCd()) &&
                    !"903".equals(daihyouInfo.getBukyokuCd()) &&
                    !"913".equals(daihyouInfo.getBukyokuCd())
//2006/06/30　苗　修正ここまで                
            ){
                kenkyuSoshikiInfo.setBukyokuName(shinseishaInfo.getBukyokuName());                //部局名
            }

            //2005/8/31 ログイン者の職コードは申請書情報の職コードと異なる場合（申請者情報の変更がある）
            //ログイン者の情報で申請書情報を無条件に上書きする。
            if (!kenkyuSoshikiInfo.getShokushuCd().equals(shinseishaInfo.getShokushuCd())){
                kenkyuSoshikiInfo.setShokushuCd(shinseishaInfo.getShokushuCd());                //職コード
                kenkyuSoshikiInfo.setShokushuNameKanji(shinseishaInfo.getShokushuNameKanji());    //職名
            }

            //2005/8/24 職コードが24、25以外の場合設定する
            else if (!"24".equals(daihyouInfo.getShokushuCd()) && 
                !"25".equals(daihyouInfo.getShokushuCd())    ){
                kenkyuSoshikiInfo.setShokushuNameKanji(shinseishaInfo.getShokushuNameKanji());    //職名
            }

// 20050822 年齢を算出
            String chNendo = jigyoId.substring(0,2);
            chNendo = "20" + chNendo;        //2000年以降でよい
            if(chNendo != null && StringUtil.isDigit(chNendo) && chNendo.length() == 4){
                    kenkyuSoshikiInfo.setNenrei("" + DateFormat.getAgeOnApril1st(
                        shinseishaInfo.getBirthday(),
                        StringUtil.parseInt(chNendo)
                    ));    //年齢
            }
            else{
                //西暦が不正な場合は？
            }
// Horikoshi

            //---系統の区分、推薦の観点プルダウン
            List keitouList = null;
            List suisenList = null;
            try{
                String jigyoKubun = shinseiDataInfo.getKadaiInfo().getJigyoKubun();
                String[] labelKubun = new String[]{ILabelKubun.KEI_KUBUN + jigyoKubun,
                                                   ILabelKubun.SUISEN};
                List bothList = new LabelValueMaintenance().getLabelList(labelKubun);    //2つのラベルリスト
                keitouList = (List)bothList.get(0);
                suisenList = (List)bothList.get(1);
            }catch(ApplicationException e){
                throw new ApplicationException(
                    "ラベルマスタ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
        
            //---職種プルダウン（研究組織表入力）
            List shokushuList = null;
            try{
                shokushuList = new LabelValueMaintenance().getShokushuList();
            }catch(ApplicationException e){
                throw new ApplicationException(
                    "職種マスタ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

// 20050527 Start
            //---領域プルダウン
            List ryouikiList = null;
            try{
                ryouikiList = new LabelValueMaintenance().getKenkyuKubunList();
            }catch(ApplicationException e){
                throw new ApplicationException(
                    "領域マスタ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
// Horikoshi End
            
//2007/02/08 苗　追加ここから
            //---審査希望分野名プルダウン
            List kiboubumonList = null;
            try{
                String[] labelKubun = new String[]{ILabelKubun.SHINSAKIBO_BUNYA_WAKA};
                List bothList = new LabelValueMaintenance().getLabelList(labelKubun);   //1つのラベルリスト
                kiboubumonList = (List)bothList.get(0);
            }catch(ApplicationException e){
                throw new ApplicationException(
                    "ラベルマスタ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
//2007/02/08　苗　追加ここまで 
            
            //---添付ファイル情報
            TenpuFileInfo[] tenpuFileInfos = null;    
            try{
                TenpuFileInfoDao dao = new TenpuFileInfoDao(userInfo);
                tenpuFileInfos = dao.selectTenpuFileInfos(connection, pkInfo);
                shinseiDataInfo.setTenpuFileInfos(tenpuFileInfos);    //申請データオブジェクトにセット
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "添付ファイル情報検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            } catch (NoDataFoundException e) {
                //添付ファイルが登録されていない場合は何も処理しない
            }
//2007/02/08 苗　削除ここから　使用しない            
//    2006/02/16 Start        
//            codeValue(connection, shinseiDataInfo);
//     End Syuu
//2007/02/08 苗　削除ここまで            
    
            //申請情報（申請者情報、事業管理情報含む）とプルダウンリストをMapに格納して返す
            Map map = new HashMap();
            map.put(KEY_SHINSEIDATA_INFO, shinseiDataInfo);
            map.put(KEY_KEI_KUBUN_LIST,   keitouList);
            map.put(KEY_SUISEN_LIST,      suisenList);
            map.put(KEY_SHOKUSHU_LIST,    shokushuList);
// 20050527 Start
            map.put(KEY_RYOUIKI_LIST,        ryouikiList);
// Horikoshi End
//2007/02/08 苗　追加ここから
            map.put(KEY_KIBOUBUMON_WAKA_LIST,kiboubumonList);       
//2007/02/08　苗　追加ここまで 

            return map;
            
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 申請情報の一時保存（新規用）.<br><br>
     * 
     * 新規作成の際の申請情報、研究組織情報、添付ファイルの登録（一時保存）を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * <b>1.初期登録用データのセット</b><br>
     * 申請情報に初期登録用データをセットする。<br><br>
     * 
     * 第二引数dataInfoに、以下をセットする。<br>
     * システム受付番号　：自クラスのgetSystemNumber()メソッドを呼び、システム受付番号を生成する。<br><br>
     * 作成日時　　　　　：本日日付（WASのシステム日付）<br>
     * 状況ID　　　　　　："01"　（作成中）<br>
     * 削除フラグ　　　　："0"　　　　　 （申請書削除フラグ（通常））<br><br>
     * 
     * <b>2.学振受付期間チェック、各種コードセット</b><br>
     * ・学振受付期間チェック<br>
     * 　自クラスのcheckGakusinUketukeKikan(UserInfo, ShinseiDataInfo)メソッドを呼び、受付期間チェックを行う。<br>
     * 　引数に第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br>
     * 　学振受付期間（終了）を過ぎている場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・各種コードチェック、該当データセット<br>
     * 　自クラスのcheckValidation(Connection, UserInfo, ShinseiDataInfo, List)を呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfo、エラーリストerrorsを渡す。<br><br>
     * 
     * 各チェックにてエラーが存在したとき（エラーリストのsizeが0でないとき）、例外をthrowする。<br><br>
     * 
     * エラーが存在しないとき、申請情報の登録処理を行う。<br><br>
     * 
     * <b>3.申請情報の登録</b><br>
     * (1)重複チェック<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * キーに一致するデータが存在するとき、例外をthrowする。<br><br>
     * 一致するデータが存在しないとき、登録処理を行う。→(2)の処理へ<br>
     * 一致するデータが存在するとき、リトライする。→(3)の処理へ<br><br>
     * 
     * (2)申請情報の登録<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * INSERT INTO SHINSEIDATAKANRI (        --申請データ管理テーブル
     *     SYSTEM_NO                    -- システム受付番号
     *     ,UKETUKE_NO                -- 申請番号
     *     ,JIGYO_ID                    -- 事業ID
     *     ,NENDO                        -- 年度
     *     ,KAISU                        -- 回数
     *     ,JIGYO_NAME                -- 事業名
     *     ,SHINSEISHA_ID                -- 申請者ID
     *     ,SAKUSEI_DATE                -- 申請書作成日
     *     ,SHONIN_DATE                -- 所属機関承認日
     *     ,JYURI_DATE                -- 学振受理日
     *     ,NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,NENREI                    -- 年齢
     *     ,KENKYU_NO                    -- 申請者研究者番号
     *     ,SHOZOKU_CD                -- 所属機関コード
     *     ,SHOZOKU_NAME                -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,BUKYOKU_CD                -- 部局コード
     *     ,BUKYOKU_NAME                -- 部局名
     *     ,BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,SHOKUSHU_CD                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,ZIP                        -- 郵便番号
     *     ,ADDRESS                    -- 住所
     *     ,TEL                        -- TEL
     *     ,FAX                        -- FAX
     *     ,EMAIL                        -- E-Mail
     *     ,SENMON                    -- 現在の専門
     *     ,GAKUI                        -- 学位
     *     ,BUNTAN                    -- 役割分担
     *     ,KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN                -- 事業区分
     *     ,SHINSA_KUBUN                -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,BUNKATSU_NO                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,KENKYU_TAISHO                -- 研究対象の類型
     *     ,KEI_NAME_NO                -- 系等の区分番号
     *     ,KEI_NAME                    -- 系等の区分
     *     ,KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD            -- 細目番号
     *     ,BUNYA_NAME                -- 分野
     *     ,BUNKA_NAME                -- 分科
     *     ,SAIMOKU_NAME                -- 細目
     *     ,BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,BUNYA_NAME2                -- 分野2
     *     ,BUNKA_NAME2                -- 分科2
     *     ,SAIMOKU_NAME2                -- 細目2
     *     ,KANTEN_NO                    -- 推薦の観点番号
     *     ,KANTEN                    -- 推薦の観点
     *     ,KANTEN_RYAKU                -- 推薦の観点略称
     *     ,KEIHI1                    -- 1年目研究経費
     *     ,BIHINHI1                    -- 1年目設備備品費
     *     ,SHOMOHINHI1                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,RYOHI1                    -- 1年目旅費
     *     ,SHAKIN1                    -- 1年目謝金等
     *     ,SONOTA1                    -- 1年目その他
     *     ,KEIHI2                    -- 2年目研究経費
     *     ,BIHINHI2                    -- 2年目設備備品費
     *     ,SHOMOHINHI2                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,RYOHI2                    -- 2年目旅費
     *     ,SHAKIN2                    -- 2年目謝金等
     *     ,SONOTA2                    -- 2年目その他
     *     ,KEIHI3                    -- 3年目研究経費
     *     ,BIHINHI3                    -- 3年目設備備品費
     *     ,SHOMOHINHI3                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,RYOHI3                    -- 3年目旅費
     *     ,SHAKIN3                    -- 3年目謝金等
     *     ,SONOTA3                    -- 3年目その他
     *     ,KEIHI4                    -- 4年目研究経費
     *     ,BIHINHI4                    -- 4年目設備備品費
     *     ,SHOMOHINHI4                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,RYOHI4                    -- 4年目旅費
     *     ,SHAKIN4                    -- 4年目謝金等
     *     ,SONOTA4                    -- 4年目その他
     *     ,KEIHI5                    -- 5年目研究経費
     *     ,BIHINHI5                    -- 5年目設備備品費
     *     ,SHOMOHINHI5                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,RYOHI5                    -- 5年目旅費
     *     ,SHAKIN5                    -- 5年目謝金等
     *     ,SONOTA5                    -- 5年目その他
     *     ,KEIHI_TOTAL                -- 総計-研究経費
     *     ,BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,RYOHI_TOTAL                -- 総計-旅費
     *     ,SHAKIN_TOTAL                -- 総計-謝金等
     *     ,SONOTA_TOTAL                -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,BUNTANKIN_FLG                -- 分担金の有無
     *     ,KOYOHI                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU                -- 研究者数
     *     ,TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,SHINSEI_KUBUN                -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG                -- 申請の有無
     *     ,KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH                -- XMLの格納パス
     *     ,PDF_PATH                -- PDFの格納パス
     *     ,JURI_KEKKA                -- 受理結果
     *     ,JURI_BIKO                -- 受理結果備考
     *     ,SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO            -- １次審査備考
     *     ,KEKKA2                    -- ２次審査結果
     *     ,SOU_KEHI                -- 総経費（学振入力）
     *     ,SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO            -- 業務担当者記入欄
     *     ,JOKYO_ID                -- 申請状況ID
     *     ,SAISHINSEI_FLG            -- 再申請フラグ
     *     ,DEL_FLG                    -- 削除フラグ
     * )
     * VALUES (
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 25個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 50個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 75個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 100個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 125個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 150個
     *     ?,?,?,?,?,?,?,?,?,?,?
     * )        
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数dataInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>第二引数dataInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>第二引数dataInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>第二引数dataInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>第二引数dataInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>第二引数dataInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>第二引数dataInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>第二引数dataInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>第二引数dataInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>第二引数dataInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>第二引数dataInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>第二引数dataInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>第二引数dataInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>第二引数dataInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>第二引数dataInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>第二引数dataInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>第二引数dataInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>第二引数dataInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>第二引数dataInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>第二引数dataInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>第二引数dataInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>第二引数dataInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>第二引数dataInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>第二引数dataInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>第二引数dataInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>第二引数dataInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>第二引数dataInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>第二引数dataInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>第二引数dataInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>第二引数dataInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>第二引数dataInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>第二引数dataInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>第二引数dataInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>第二引数dataInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>第二引数dataInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>第二引数dataInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>第二引数dataInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>第二引数dataInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>第二引数dataInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>第二引数dataInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>第二引数dataInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>第二引数dataInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>第二引数dataInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>第二引数dataInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>第二引数dataInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>第二引数dataInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>第二引数dataInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>第二引数dataInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>第二引数dataInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>第二引数dataInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>第二引数dataInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>第二引数dataInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>第二引数dataInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>第二引数dataInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>第二引数dataInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>第二引数dataInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>第二引数dataInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>第二引数dataInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>第二引数dataInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>第二引数dataInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>第二引数dataInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>第二引数dataInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>第二引数dataInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>第二引数dataInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>第二引数dataInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>第二引数dataInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>第二引数dataInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>第二引数dataInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>第二引数dataInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>第二引数dataInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>第二引数dataInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>第二引数dataInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>第二引数dataInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>第二引数dataInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>第二引数dataInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>第二引数dataInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>第二引数dataInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>第二引数dataInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>第二引数dataInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>第二引数dataInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>第二引数dataInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>第二引数dataInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>第二引数dataInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>第二引数dataInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>第二引数dataInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>第二引数dataInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>第二引数dataInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>第二引数dataInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>第二引数dataInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>第二引数dataInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>第二引数dataInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>第二引数dataInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>第二引数dataInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>第二引数dataInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>第二引数dataInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>第二引数dataInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>第二引数dataInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>第二引数dataInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>第二引数dataInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>第二引数dataInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>第二引数dataInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>第二引数dataInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>第二引数dataInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>第二引数dataInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>第二引数dataInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>第二引数dataInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>第二引数dataInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>第二引数dataInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>第二引数dataInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>第二引数dataInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>第二引数dataInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>第二引数dataInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>第二引数dataInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>第二引数dataInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>第二引数dataInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>第二引数dataInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>第二引数dataInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>第二引数dataInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>第二引数dataInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>第二引数dataInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>第二引数dataInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>第二引数dataInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>第二引数dataInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>第二引数dataInfoの変数delFlg</td></tr>
     * </table><br><br>
     * 
     * (3)リトライ処理<br>
     * 　(1)で例外をキャッチしたとき、リトライを行う。<br><br>
     * 
     * 　第二引数dataInfoに、新たなシステム受付番号をセットする。<br>
     * 　　自クラスのgetSystemNumber()メソッドを呼び、システム受付番号を生成する。<br><br>
     * 
     * 　(1)の処理を行う。<br><br>
     * 
     * 　最大リトライ回数は10回 (変数SYSTEM_NO_MAX_RETRY_COUNT)<br>
     * 　10回を超えたら、例外をthrowする。<br><br>
     * 
     * <b>4.研究組織情報の登録</b><br>
     * 自クラスのregistKenkyuSoshikiKanriInfo(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、1,2でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 
     * <b>5.添付ファイルの登録</b><br>
     * 自クラスのregistTenpuFileInfo(Connection, UserInfo, ShinseiDataInfo, FileResource)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、1,2でデータをセットした申請情報dataInfo、第三引数fileResを渡す。<br><br>
     * 
     * <b>6.コミット、ロールバック</b><br>
     * すべての登録処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 登録処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * <b>7.値の返却</b><br>
     * ShinseiDataInfoを返却する。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param dataInfo    ShinseiDataInfo
     * @param fileRes    FileResourse
     * @return 申請情報(ShinseiDataInfo)
     * @throws ValidationException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#transientSave(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataInfo, jp.go.jsps.kaken.util.FileResource)
     */
    public ShinseiDataInfo transientSaveNew(
            UserInfo userInfo,
            ShinseiDataInfo dataInfo,
            FileResource fileRes)
            throws ValidationException, ApplicationException {

        Connection      connection   = null;
        boolean        success      = false;
        ShinseiDataInfo resultInfo   = null;
        try{            
// 2007/02/03 張志男　追加ここから
            /** ログ（登録前） */
            statusLog.info( " 応募情報一時保存登録前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() + " , 事業ID : " + dataInfo.getJigyoId() );
// 2007/02/03　張志男　追加ここまで
            
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();

            //2005.08.08 iso ファイルログ出力
            outputFileInfo(userInfo, fileRes);
            
            //申請データに初期登録用データをセットする
            dataInfo.setSystemNo(getSystemNumber());                            //システム受付番号
            dataInfo.setSakuseiDate(new Date());                                //作成日時
            dataInfo.setJokyoId(StatusCode.STATUS_SAKUSEITHU);                //申請状況ステータス（作成中）
            dataInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_DEFAULT);    //再申請フラグ（初期値）
            dataInfo.setDelFlg(FLAG_APPLICATION_NOT_DELETE);                    //削除フラグ
            
            
            //-----形式チェック＋値セット-----
            List errors = new ArrayList();

            //学振受付期間チェック
            if(!checkGakusinUketukeKikan(userInfo, dataInfo)){
                errors.add(new ErrorInfo("errors.9007"));
            }
            
            //各種コードのチェックと該当データのセット
            checkValidation(connection, userInfo, dataInfo, errors);
  
//2007/03/09 　劉長宇　削除　ここから
//            //若手研究の年齢制限チェック
//            if(!blnWakateLimitCheck(userInfo, dataInfo)){
////2007/02/05 苗　修正ここから            
////              errors.add(new ErrorInfo("errors.5046"));
//              if (dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S)) {
//                  errors.add(new ErrorInfo("errors.5046", new String[] { "42" }));
//              } else {
//                  errors.add(new ErrorInfo("errors.5046", new String[] { "38" }));
//              }
////2007/02/05　苗　修正ここまで 
//            }
//2007/03/09 　劉長宇　削除　ここまで

//2006/06/15 苗　修正ここから            
            //特定領域の領域番号＆研究項目番号
//            if(IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
            if(IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())){
//2006/06/15　苗　修正ここまで                
                //公募研究と計画研究フラグチェック
                if (KUBUN_KEIKAKU.equals(dataInfo.getKenkyuKubun())
                 || KUBUN_KOUBO.equals(dataInfo.getKenkyuKubun())){
                    RyouikiInfoPk pkInfo = new RyouikiInfoPk();
                    pkInfo.setRyoikiNo(dataInfo.getRyouikiNo());
                    pkInfo.setKomokuNo(dataInfo.getRyouikiKoumokuNo());
                    try{
                        String kenkyuKubun = StringUtil.defaultString(dataInfo.getKenkyuKubun());
                        if(CHECK_ON.equals(dataInfo.getChangeFlg())){
                            kenkyuKubun = "";
                        }
                        Map rst = MasterRyouikiInfoDao.selectRecord(connection, pkInfo, kenkyuKubun);
                        dataInfo.setRyouikiRyakuName(StringUtil.defaultString(rst.get("RYOIKI_RYAKU")));
                    }catch(NoDataFoundException e){
                        //データが存在しない場合にはエラーとせずに空をセットする
                        dataInfo.setRyouikiRyakuName("");
                    }catch(Exception e){
                        throw new ApplicationException("領域番号チェック中にDBエラーが発生しました。",new ErrorInfo("errors.4001"),e);
                    }
                }
            }
        
//2006/06/15 苗　追加ここから
            //特定領域研究（新規領域）の場合     
            if(IJigyoCd.JIGYO_CD_TOKUTEI_SINKI.equals(dataInfo.getJigyoCd())){
                //領域計画書概要テーブル（当該年度の削除フラグ=0）に仮領域番号が存在するかチェック  
                checkRyoikoNoForTokuteiSinki(connection, userInfo, dataInfo, errors);
                //領域代表者以外のチェック
                checkKomokuNoForTokuteiSinki(connection, userInfo, dataInfo, errors);
                //計画研究のうち調整班
                if("X00".equals(dataInfo.getRyouikiKoumokuNo()) || "Y00".equals(dataInfo.getRyouikiKoumokuNo())){
                    dataInfo.setChouseiFlg(null);
                }
            }
//2006/06/15 苗　追加ここまで            

            //エラーが存在した場合
            if(errors.size() > 0){
                String msg = "申請書データのチェックで検証エラーとなりました。";
                throw new ValidationException(msg, errors);
            }

            //--------------------
            // 申請データ登録
            //--------------------
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                //-- 登録時にキーが重なった場合はリトライをかける --
                int count = 0;
                while(true){
                    try{
                        dao.insertShinseiDataInfo(connection, dataInfo);
                        success = true;
                        break;
                    }catch(DuplicateKeyException e){
                        count++;
                        if(count < SYSTEM_NO_MAX_RETRY_COUNT){
                            dataInfo.setSystemNo(getSystemNumber());  //システム受付番号を再取得
                            continue;
                        }else{
                            throw e;                    
                        }
                    }
                }
            } catch (DataAccessException e) {
                success = false;
                throw new ApplicationException(
                    "申請書管理データ登録中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }
            
            //--------------------
            // 研究組織情報登録
            //--------------------
            try{
                registKenkyuSoshikiKanriInfo(connection, userInfo, dataInfo);
                success = true;
            }catch(ApplicationException e){
                success = false;
                throw e;
            }
            
            //--------------------
            // 添付ファイル登録
            //--------------------
            //添付ファイルが指定されていた場合
            if(fileRes != null){
                try{
                    registTenpuFileInfo(connection, userInfo, dataInfo, fileRes);
                    success = true;
                }catch(ApplicationException e){
                    success = false;
                    throw e;
                }
            }
        }finally{
            try{
                if(success){
                    DatabaseUtil.commit(connection);
                    resultInfo = dataInfo;
                    
// 2007/02/03 張志男　追加ここから
                    /** ログ（登録後） */
                    statusLog.info( " 応募情報一時保存登録後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                            + " , システム受付番号 : " + dataInfo.getSystemNo() + " , 申請状況ID : " + dataInfo.getJokyoId() );
// 2007/02/03　張志男　追加ここまで
                    
                }else{
                    DatabaseUtil.rollback(connection);
                    
// 2007/02/03 張志男　追加ここから
                    /** ログ（登録失敗） */
                    statusLog.info( " 応募情報一時保存登録失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                            + " , 事業ID : " + dataInfo.getJigyoId() );
// 2007/02/03　張志男　追加ここまで
                    
                }
            }catch(TransactionException e){
                throw new ApplicationException(
                    "申請データDB登録中にエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }finally{
                DatabaseUtil.closeConnection(connection);
            }
        }

        return resultInfo;
    }    

    /**
     * 申請情報の一時保存（更新用）.<br><br>
     * 
     * 更新の際の申請情報、研究組織情報、添付ファイルの更新（一時保存）を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 　以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * <b>2.削除フラグチェック、ステータスチェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"01"(作成中)でないとき、例外をthrowする。<br><br>
     * 
     * <b>3.学振受付期間チェック、各種コードセット</b><br>
     * ・学振受付期間チェック<br>
     * 　自クラスのcheckGakusinUketukeKikan(UserInfo, ShinseiDataInfo)メソッドを呼び、受付期間チェックを行う。<br>
     * 　引数に第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br>
     * 　学振受付期間（終了）を過ぎている場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・各種コードチェック、該当データセット<br>
     * 　自クラスのcheckValidation(Connection, UserInfo, ShinseiDataInfo, List)を呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfo、エラーリストerrorsを渡す。<br><br>
     * 
     * 各チェックにてエラーが存在したとき（エラーリストのsizeが0でないとき）、例外をthrowする。<br><br>
     * 
     * エラーが存在しないとき、申請情報の更新処理を行う。<br><br>
     * 
     * dataInfoの作成日時に、WASの本日日付をセットする。<br><br>
     * 
     * <b>4.申請情報の更新</b><br><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *             -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?            -- システム受付番号
     *     ,UKETUKE_NO = ?            -- 申請番号
     *     ,JIGYO_ID = ?            -- 事業ID
     *     ,NENDO = ?                -- 年度
     *     ,KAISU = ?                -- 回数
     *     ,JIGYO_NAME = ?            -- 事業名
     *     ,SHINSEISHA_ID = ?        -- 申請者ID
     *     ,SAKUSEI_DATE = ?        -- 申請書作成日
     *     ,SHONIN_DATE = ?            -- 所属機関承認日
     *     ,JYURI_DATE = ?            -- 学振受理日
     *     ,NAME_KANJI_SEI = ?        -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?        -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?        -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?        -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?            -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?            -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                -- 年齢
     *     ,KENKYU_NO = ?            -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?            -- 所属機関コード
     *     ,SHOZOKU_NAME = ?        -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?            -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?            -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                -- 住所
     *     ,TEL = ?                    -- TEL
     *     ,FAX = ?                    -- FAX
     *     ,EMAIL = ?                -- E-Mail
     *     ,SENMON = ?                -- 現在の専門
     *     ,GAKUI = ?                -- 学位
     *     ,BUNTAN = ?                -- 役割分担
     *     ,KADAI_NAME_KANJI = ?    -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?        -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?            -- 事業区分
     *     ,SHINSA_KUBUN = ?        -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?            -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?            -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?        -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?            -- 分野
     *     ,BUNKA_NAME = ?            -- 分科
     *     ,SAIMOKU_NAME = ?        -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?            -- 分野2
     *     ,BUNKA_NAME2 = ?            -- 分科2
     *     ,SAIMOKU_NAME2 = ?        -- 細目2
     *     ,KANTEN_NO = ?            -- 推薦の観点番号
     *     ,KANTEN = ?                -- 推薦の観点
     *     ,KANTEN_RYAKU = ?        -- 推薦の観点略称
     *     ,KEIHI1 = ?                -- 1年目研究経費
     *     ,BIHINHI1 = ?            -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?            -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?        -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?        -- 1年目外国旅費
     *     ,RYOHI1 = ?                -- 1年目旅費
     *     ,SHAKIN1 = ?                -- 1年目謝金等
     *     ,SONOTA1 = ?                -- 1年目その他
     *     ,KEIHI2 = ?                -- 2年目研究経費
     *     ,BIHINHI2 = ?            -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?            -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?        -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?        -- 2年目外国旅費
     *     ,RYOHI2 = ?                -- 2年目旅費
     *     ,SHAKIN2 = ?                -- 2年目謝金等
     *     ,SONOTA2 = ?                -- 2年目その他
     *     ,KEIHI3 = ?                -- 3年目研究経費
     *     ,BIHINHI3 = ?            -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?            -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?        -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?        -- 3年目外国旅費
     *     ,RYOHI3 = ?                -- 3年目旅費
     *     ,SHAKIN3 = ?                -- 3年目謝金等
     *     ,SONOTA3 = ?                -- 3年目その他
     *     ,KEIHI4 = ?                -- 4年目研究経費
     *     ,BIHINHI4 = ?            -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?            -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?        -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?        -- 4年目外国旅費
     *     ,RYOHI4 = ?                -- 4年目旅費
     *     ,SHAKIN4 = ?                -- 4年目謝金等
     *     ,SONOTA4 = ?                -- 4年目その他
     *     ,KEIHI5 = ?                -- 5年目研究経費
     *     ,BIHINHI5 = ?            -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?            -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?        -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?        -- 5年目外国旅費
     *     ,RYOHI5 = ?                -- 5年目旅費
     *     ,SHAKIN5 = ?                -- 5年目謝金等
     *     ,SONOTA5 = ?                -- 5年目その他
     *     ,KEIHI_TOTAL = ?            -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?        -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?    -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?            -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?        -- 研究者数
     *     ,TAKIKAN_NINZU = ?        -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?        -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?            -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?        -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数dataInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>第二引数dataInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>第二引数dataInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>第二引数dataInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>第二引数dataInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>第二引数dataInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>第二引数dataInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>第二引数dataInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>第二引数dataInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>第二引数dataInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>第二引数dataInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>第二引数dataInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>第二引数dataInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>第二引数dataInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>第二引数dataInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>第二引数dataInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>第二引数dataInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>第二引数dataInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>第二引数dataInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>第二引数dataInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>第二引数dataInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>第二引数dataInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>第二引数dataInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>第二引数dataInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>第二引数dataInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>第二引数dataInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>第二引数dataInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>第二引数dataInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>第二引数dataInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>第二引数dataInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>第二引数dataInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>第二引数dataInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>第二引数dataInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>第二引数dataInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>第二引数dataInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>第二引数dataInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>第二引数dataInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>第二引数dataInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>第二引数dataInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>第二引数dataInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>第二引数dataInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>第二引数dataInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>第二引数dataInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>第二引数dataInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>第二引数dataInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>第二引数dataInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>第二引数dataInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>第二引数dataInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>第二引数dataInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>第二引数dataInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>第二引数dataInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>第二引数dataInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>第二引数dataInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>第二引数dataInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>第二引数dataInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>第二引数dataInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>第二引数dataInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>第二引数dataInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>第二引数dataInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>第二引数dataInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>第二引数dataInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>第二引数dataInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>第二引数dataInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>第二引数dataInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>第二引数dataInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>第二引数dataInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>第二引数dataInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>第二引数dataInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>第二引数dataInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>第二引数dataInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>第二引数dataInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>第二引数dataInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>第二引数dataInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>第二引数dataInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>第二引数dataInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>第二引数dataInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>第二引数dataInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>第二引数dataInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>第二引数dataInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>第二引数dataInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>第二引数dataInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>第二引数dataInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>第二引数dataInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>第二引数dataInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>第二引数dataInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>第二引数dataInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>第二引数dataInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>第二引数dataInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>第二引数dataInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>第二引数dataInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>第二引数dataInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>第二引数dataInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>第二引数dataInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>第二引数dataInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>第二引数dataInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>第二引数dataInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>第二引数dataInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>第二引数dataInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>第二引数dataInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>第二引数dataInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>第二引数dataInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>第二引数dataInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>第二引数dataInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>第二引数dataInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>第二引数dataInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>第二引数dataInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>第二引数dataInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>第二引数dataInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>第二引数dataInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>第二引数dataInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>第二引数dataInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>第二引数dataInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>第二引数dataInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>第二引数dataInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>第二引数dataInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>第二引数dataInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>第二引数dataInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>第二引数dataInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>第二引数dataInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>第二引数dataInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>第二引数dataInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>第二引数dataInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>第二引数dataInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>第二引数dataInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数dataInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>5.研究組織情報の登録</b><br>
     * 自クラスのregistKenkyuSoshikiKanriInfo(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、第二引数dataInfoを渡す。<br><br>
     * 
     * <b>6.添付ファイルの登録</b><br>
     * 第三引数fileResがnullでないとき、添付ファイルの登録処理を行う。<br><br>
     * 
     * 自クラスのregistTenpuFileInfo(Connection, UserInfo, ShinseiDataInfo, FileResource)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、第二引数dataInfo、第三引数fileResを渡す。<br><br>
     * 
     * <b>7.コミット、ロールバック</b><br>
     * すべての登録処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 登録処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param dataInfo ShinseiDataInfo
     * @param fileRes    FileResource
     * @return なし
     * @throws ValidationException
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#transientSave(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataInfo, jp.go.jsps.kaken.util.FileResource)
     */
    public void transientSaveUpdate(
            UserInfo userInfo,
            ShinseiDataInfo dataInfo,
            FileResource fileRes)
            throws ValidationException,
                   NoDataFoundException,
                   ApplicationException {
        Connection      connection   = null;
        boolean        success      = false;
        try {          
                  
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);

            //2005.08.08 iso ファイルログ出力
            outputFileInfo(userInfo, fileRes);
            
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, dataInfo, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag))
            {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + dataInfo.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();
            if(!StatusCode.STATUS_SAKUSEITHU.equals(jyokyoId))    //作成中以外はNG
            {
                throw new ApplicationException(
                    "当該申請データは一時保存可能なステータスではありません。SystemNo=" + dataInfo.getSystemNo(),
                    new ErrorInfo("errors.9002"));
            }

            //-----形式チェック＋値セット-----
            List errors = new ArrayList();

            //学振受付期間チェック
            if(!checkGakusinUketukeKikan(userInfo, dataInfo)){
                errors.add(new ErrorInfo("errors.9007"));
            }
            
            //各種コードのチェックと該当データのセット
            checkValidation(connection, userInfo, dataInfo, errors);
            
//2007/03/09 　劉長宇　削除　ここから 
//            //若手研究の年齢制限チェック
//            if(!blnWakateLimitCheck(userInfo, dataInfo)){
////2007/02/05 苗　修正ここから            
////              errors.add(new ErrorInfo("errors.5046"));
//              if (dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S)) {
//                  errors.add(new ErrorInfo("errors.5046", new String[] { "42" }));
//              } else {
//                  errors.add(new ErrorInfo("errors.5046", new String[] { "38" }));
//              }
////2007/02/05　苗　修正ここまで 
//            }
//2007/03/09 　劉長宇　削除　ここまで

//2006/06/15 苗　修正ここから            
            //特定領域の領域番号＆研究項目番号
//            if(IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
            if(IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())){
//2006/06/15 苗　修正ここまで                
                //公募研究と計画研究フラグチェック
                if (KUBUN_KEIKAKU.equals(dataInfo.getKenkyuKubun())
                 || KUBUN_KOUBO.equals(dataInfo.getKenkyuKubun())){
                    RyouikiInfoPk pkInfo = new RyouikiInfoPk();
                    pkInfo.setRyoikiNo(dataInfo.getRyouikiNo());
                    pkInfo.setKomokuNo(dataInfo.getRyouikiKoumokuNo());
                    try{
                        String kenkyuKubun = StringUtil.defaultString(dataInfo.getKenkyuKubun());
                        if(CHECK_ON.equals(dataInfo.getChangeFlg())){
                            kenkyuKubun = "";
                        }
                        Map rst = MasterRyouikiInfoDao.selectRecord(connection, pkInfo, kenkyuKubun);
                        dataInfo.setRyouikiRyakuName(StringUtil.defaultString(rst.get("RYOIKI_RYAKU")));
                    }catch(NoDataFoundException e){
                        //データが存在しない場合にはエラーとせずに空をセットする
                        dataInfo.setRyouikiRyakuName("");
                    }catch(Exception e){
                        throw new ApplicationException("領域番号チェック中にDBエラーが発生しました。",new ErrorInfo("errors.4001"),e);
                    }
                }
            }
            
//2006/06/15 苗　追加ここから
            //特定領域研究（新規領域） の場合     
            if(IJigyoCd.JIGYO_CD_TOKUTEI_SINKI.equals(dataInfo.getJigyoCd())){
                //領域計画書概要テーブル（当該年度の削除フラグ=0）に仮領域番号が存在するかチェック    
                checkRyoikoNoForTokuteiSinki(connection, userInfo, dataInfo, errors);
                //領域代表者以外のチェック
                checkKomokuNoForTokuteiSinki(connection, userInfo, dataInfo, errors);
                //計画研究のうち調整班
                if("X00".equals(dataInfo.getRyouikiKoumokuNo()) || "Y00".equals(dataInfo.getRyouikiKoumokuNo())){
                    dataInfo.setChouseiFlg(null);
                }
            }
//2006/06/15 苗　追加ここまで            

            //エラーが存在した場合
            if(errors.size() > 0){
                String msg = "申請書データのチェックで検証エラーとなりました。";
                throw new ValidationException(msg, errors);
            }            
            
            
            //--------------------
            // 申請データ登録
            //--------------------
            
// 2007/02/03 張志男　追加ここから
            /** ログ（更新前） */
            statusLog.info( " 応募情報一時保存更新前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                    + " , システム受付番号 : " + dataInfo.getSystemNo() + " , 更新前申請状況ID : " + existInfo.getJokyoId()  );
// 2007/02/03　張志男　追加ここまで
            
            try {
                dataInfo.setSakuseiDate(new Date());    //作成日時を更新
                dao.updateShinseiDataInfo(connection, dataInfo ,true);
                success = true;
            } catch (DataAccessException e) {
                success = false;
                throw new ApplicationException(
                    "申請書管理データ更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }
            
            //--------------------
            // 研究組織情報登録
            //--------------------
            try{
                registKenkyuSoshikiKanriInfo(connection, userInfo, dataInfo);
                success = true;
            }catch(ApplicationException e){
                success = false;
                throw e;
            }
            
            //--------------------
            // 添付ファイル登録
            //--------------------
            //添付ファイルが指定されていた場合
            if(fileRes != null){
                try{
                    registTenpuFileInfo(connection, userInfo, dataInfo, fileRes);
                    success = true;
                }catch(ApplicationException e){
                    success = false;
                    throw e;
                }
            }
        }finally{
            try{
                if(success){
                    DatabaseUtil.commit(connection);
                    
// 2007/02/03 張志男　追加ここから
                    /** ログ（更新後） */
                    statusLog.info( " 応募情報一時保存更新後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                            + " , システム受付番号 : " + dataInfo.getSystemNo() + " , 更新後申請状況ID : " + dataInfo.getJokyoId()  );
// 2007/02/03　張志男　追加ここまで
                    
                }else{
                    DatabaseUtil.rollback(connection);
                    
// 2007/02/03 張志男　追加ここから
                    /** ログ（更新失敗） */
                    statusLog.info( " 応募情報一時保存更新失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                            + " , システム受付番号 : " + dataInfo.getSystemNo() );
// 2007/02/03　張志男　追加ここまで
                    
                }
            }catch(TransactionException e){
                throw new ApplicationException(
                    "申請データDB登録中にエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }finally{
                DatabaseUtil.closeConnection(connection);
            }
        }
    }    

    /**
     * 申請情報の登録.<br><br>
     * 
     * 申請情報、研究組織情報、添付ファイルの登録を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * 申請番号をアプリケーションで採番するため、synchronizedブロックで処理を行う。<br>
     * 申請者情報の所属機関コードでロックをかける。<br><br>
     * 
     * <b>1.初期登録用データのセット</b><br>
     * 申請情報に初期登録用データをセットする。<br><br>
     * 
     * 第二引数dataInfoに、以下をセットする。<br>
     * システム受付番号　：自クラスのgetSystemNumber()メソッドを呼び、システム受付番号を生成する。<br><br>
     * 作成日時　　　　　：本日日付（WASのシステム日付）<br>
     * 状況ID　　　　　　："01"　（作成中）<br>
     * 削除フラグ　　　　："0"　　　　　 （申請書削除フラグ（通常））<br><br>
     * 
     * <b>2.各種チェック、各種コードセット</b><br>
     * ・学振受付期間チェック<br>
     * 　自クラスのcheckGakusinUketukeKikan(UserInfo, ShinseiDataInfo)メソッドを呼び、受付期間チェックを行う。<br>
     * 　引数に第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br>
     * 　学振受付期間（終了）を過ぎている場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・各種コードチェック、該当データセット<br>
     * 　自クラスのcheckValidation(Connection, UserInfo, ShinseiDataInfo, List)を呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfo、エラーリストerrorsを渡す。<br><br>
     * 
     * ・研究者番号チェック<br>
     * 　自クラスのcheckKenkyuNo(ShinseiDataInfo, List)メソッドを呼ぶ。<br>
     * 　引数に、1.でデータをセットした申請情報dataInfo、エラーリストerrorsを渡す。<br><br>
     * 
     * ・添付ファイルの登録済みチェック<br>
     * 　第三引数fileResがnullかつdataInfoの添付ファイル情報がnullのときエラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・重複申請チェック<br>
     * 　自クラスのcheckDuplication(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 　重複申請の場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・併願申請チェック<br>
     * 　自クラスのcheckParallel(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 　併願不可能な場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * 各チェックにてエラーが存在したとき（エラーリストのsizeが0でないとき）、例外をthrowする。<br><br>
     * 
     * <b>3.申請番号の取得</b><br>
     * 自クラスのgetUketukeNumber(Connection, UserInfo, ShinseiDataInfo)を呼び、申請番号を取得する。<br>
     * 引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 
     * 申請情報dataInfoに取得した申請番号をセットする。<br><br>
     * 
     * <b>4.申請情報の登録</b><br>
     * (1)重複チェック<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * キーに一致するデータが存在するとき、例外をthrowする。<br><br>
     * 一致するデータが存在しないとき、登録処理を行う。→(2)の処理へ<br>
     * 一致するデータが存在するとき、リトライする。→(3)の処理へ<br><br>
     * 
     * (2)申請情報の登録<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * INSERT INTO SHINSEIDATAKANRI (        --申請データ管理テーブル
     *     SYSTEM_NO                    -- システム受付番号
     *     ,UKETUKE_NO                -- 申請番号
     *     ,JIGYO_ID                    -- 事業ID
     *     ,NENDO                        -- 年度
     *     ,KAISU                        -- 回数
     *     ,JIGYO_NAME                -- 事業名
     *     ,SHINSEISHA_ID                -- 申請者ID
     *     ,SAKUSEI_DATE                -- 申請書作成日
     *     ,SHONIN_DATE                -- 所属機関承認日
     *     ,JYURI_DATE                -- 学振受理日
     *     ,NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,NENREI                    -- 年齢
     *     ,KENKYU_NO                    -- 申請者研究者番号
     *     ,SHOZOKU_CD                -- 所属機関コード
     *     ,SHOZOKU_NAME                -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,BUKYOKU_CD                -- 部局コード
     *     ,BUKYOKU_NAME                -- 部局名
     *     ,BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,SHOKUSHU_CD                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,ZIP                        -- 郵便番号
     *     ,ADDRESS                    -- 住所
     *     ,TEL                        -- TEL
     *     ,FAX                        -- FAX
     *     ,EMAIL                        -- E-Mail
     *     ,SENMON                    -- 現在の専門
     *     ,GAKUI                        -- 学位
     *     ,BUNTAN                    -- 役割分担
     *     ,KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN                -- 事業区分
     *     ,SHINSA_KUBUN                -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,BUNKATSU_NO                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,KENKYU_TAISHO                -- 研究対象の類型
     *     ,KEI_NAME_NO                -- 系等の区分番号
     *     ,KEI_NAME                    -- 系等の区分
     *     ,KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD            -- 細目番号
     *     ,BUNYA_NAME                -- 分野
     *     ,BUNKA_NAME                -- 分科
     *     ,SAIMOKU_NAME                -- 細目
     *     ,BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,BUNYA_NAME2                -- 分野2
     *     ,BUNKA_NAME2                -- 分科2
     *     ,SAIMOKU_NAME2                -- 細目2
     *     ,KANTEN_NO                    -- 推薦の観点番号
     *     ,KANTEN                    -- 推薦の観点
     *     ,KANTEN_RYAKU                -- 推薦の観点略称
     *     ,KEIHI1                    -- 1年目研究経費
     *     ,BIHINHI1                    -- 1年目設備備品費
     *     ,SHOMOHINHI1                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1            -- 1年目外国旅費
     *     ,RYOHI1                    -- 1年目旅費
     *     ,SHAKIN1                    -- 1年目謝金等
     *     ,SONOTA1                    -- 1年目その他
     *     ,KEIHI2                    -- 2年目研究経費
     *     ,BIHINHI2                -- 2年目設備備品費
     *     ,SHOMOHINHI2                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2            -- 2年目外国旅費
     *     ,RYOHI2                    -- 2年目旅費
     *     ,SHAKIN2                    -- 2年目謝金等
     *     ,SONOTA2                    -- 2年目その他
     *     ,KEIHI3                    -- 3年目研究経費
     *     ,BIHINHI3                -- 3年目設備備品費
     *     ,SHOMOHINHI3                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3            -- 3年目外国旅費
     *     ,RYOHI3                    -- 3年目旅費
     *     ,SHAKIN3                    -- 3年目謝金等
     *     ,SONOTA3                    -- 3年目その他
     *     ,KEIHI4                    -- 4年目研究経費
     *     ,BIHINHI4                -- 4年目設備備品費
     *     ,SHOMOHINHI4                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4            -- 4年目外国旅費
     *     ,RYOHI4                    -- 4年目旅費
     *     ,SHAKIN4                    -- 4年目謝金等
     *     ,SONOTA4                    -- 4年目その他
     *     ,KEIHI5                    -- 5年目研究経費
     *     ,BIHINHI5                -- 5年目設備備品費
     *     ,SHOMOHINHI5                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5            -- 5年目外国旅費
     *     ,RYOHI5                    -- 5年目旅費
     *     ,SHAKIN5                    -- 5年目謝金等
     *     ,SONOTA5                    -- 5年目その他
     *     ,KEIHI_TOTAL                -- 総計-研究経費
     *     ,BIHINHI_TOTAL            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,RYOHI_TOTAL                -- 総計-旅費
     *     ,SHAKIN_TOTAL            -- 総計-謝金等
     *     ,SONOTA_TOTAL            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,BUNTANKIN_FLG            -- 分担金の有無
     *     ,KOYOHI                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU            -- 研究者数
     *     ,TAKIKAN_NINZU            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG                -- 申請の有無
     *     ,KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH                -- XMLの格納パス
     *     ,PDF_PATH                -- PDFの格納パス
     *     ,JURI_KEKKA                -- 受理結果
     *     ,JURI_BIKO                -- 受理結果備考
     *     ,SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO            -- １次審査備考
     *     ,KEKKA2                    -- ２次審査結果
     *     ,SOU_KEHI                -- 総経費（学振入力）
     *     ,SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO            -- 業務担当者記入欄
     *     ,JOKYO_ID                -- 申請状況ID
     *     ,SAISHINSEI_FLG            -- 再申請フラグ
     *     ,DEL_FLG                    -- 削除フラグ
     * )
     * VALUES (
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 25個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 50個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 75個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 100個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 125個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 150個
     *     ?,?,?,?,?,?,?,?,?,?,?
     * )        
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数dataInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>第二引数dataInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>第二引数dataInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>第二引数dataInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>第二引数dataInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>第二引数dataInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>第二引数dataInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>第二引数dataInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>第二引数dataInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>第二引数dataInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>第二引数dataInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>第二引数dataInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>第二引数dataInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>第二引数dataInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>第二引数dataInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>第二引数dataInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>第二引数dataInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>第二引数dataInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>第二引数dataInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>第二引数dataInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>第二引数dataInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>第二引数dataInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>第二引数dataInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>第二引数dataInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>第二引数dataInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>第二引数dataInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>第二引数dataInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>第二引数dataInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>第二引数dataInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>第二引数dataInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>第二引数dataInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>第二引数dataInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>第二引数dataInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>第二引数dataInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>第二引数dataInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>第二引数dataInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>第二引数dataInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>第二引数dataInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>第二引数dataInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>第二引数dataInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>第二引数dataInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>第二引数dataInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>第二引数dataInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>第二引数dataInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>第二引数dataInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>第二引数dataInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>第二引数dataInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>第二引数dataInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>第二引数dataInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>第二引数dataInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>第二引数dataInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>第二引数dataInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>第二引数dataInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>第二引数dataInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>第二引数dataInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>第二引数dataInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>第二引数dataInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>第二引数dataInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>第二引数dataInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>第二引数dataInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>第二引数dataInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>第二引数dataInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>第二引数dataInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>第二引数dataInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>第二引数dataInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>第二引数dataInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>第二引数dataInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>第二引数dataInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>第二引数dataInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>第二引数dataInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>第二引数dataInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>第二引数dataInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>第二引数dataInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>第二引数dataInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>第二引数dataInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>第二引数dataInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>第二引数dataInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>第二引数dataInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>第二引数dataInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>第二引数dataInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>第二引数dataInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>第二引数dataInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>第二引数dataInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>第二引数dataInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>第二引数dataInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>第二引数dataInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>第二引数dataInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>第二引数dataInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>第二引数dataInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>第二引数dataInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>第二引数dataInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>第二引数dataInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>第二引数dataInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>第二引数dataInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>第二引数dataInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>第二引数dataInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>第二引数dataInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>第二引数dataInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>第二引数dataInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>第二引数dataInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>第二引数dataInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>第二引数dataInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>第二引数dataInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>第二引数dataInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>第二引数dataInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>第二引数dataInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>第二引数dataInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>第二引数dataInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>第二引数dataInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>第二引数dataInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>第二引数dataInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>第二引数dataInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>第二引数dataInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>第二引数dataInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>第二引数dataInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>第二引数dataInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>第二引数dataInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>第二引数dataInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>第二引数dataInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>第二引数dataInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>第二引数dataInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>第二引数dataInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>第二引数dataInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>第二引数dataInfoの変数delFlg</td></tr>
     * </table><br><br>
     * 
     * (3)リトライ処理<br>
     * 　(1)で例外をキャッチしたとき、リトライを行う。<br><br>
     * 
     * 　第二引数dataInfoに、新たなシステム受付番号をセットする。<br>
     * 　　自クラスのgetSystemNumber()メソッドを呼び、システム受付番号を生成する。<br><br>
     * 
     * 　(1)の処理を行う。<br><br>
     * 
     * 　最大リトライ回数は10回 (変数SYSTEM_NO_MAX_RETRY_COUNT)<br>
     * 　10回を超えたら、例外をthrowする。<br><br>
     * 
     * <b>5.研究組織情報の登録</b><br>
     * 自クラスのregistKenkyuSoshikiKanriInfo(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、1,2でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 
     * <b>6.添付ファイルの登録</b><br>
     * 第三引数fileResがnullでないとき、添付ファイルの登録を行う。<br><br>
     * 
     * 自クラスのregistTenpuFileInfo(Connection, UserInfo, ShinseiDataInfo, FileResource)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、1,2でデータをセットした申請情報dataInfo、第三引数fileResを渡す。<br><br>
     * 
     * <b>7.コミット、ロールバック</b><br>
     * すべての登録処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 登録処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * <b>8.値の返却</b><br>
     * ShinseiDataInfoを返却する。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param dataInfo    ShinseiDataInfo
     * @param fileRes    FileResource
     * @return 申請情報(ShinseiDataInfo)
     * @throws ValidationException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#regist(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataInfo, jp.go.jsps.kaken.util.FileResource)
     */
    public ShinseiDataInfo registApplicationNew(
            UserInfo userInfo,
            ShinseiDataInfo dataInfo,
            FileResource fileRes)
            throws ValidationException, ApplicationException {

        //-----申請者の所属機関コードで排他制御をかける-----
        //→ 申請番号（機関コード＋連番）をアプリケーションで採番するため必要。
        synchronized(userInfo.getShinseishaInfo().getShozokuCd().intern())
        {
            Connection      connection   = null;
            boolean        success      = false;
            ShinseiDataInfo resultInfo   = null;
            try {
                
// 2007/02/03 張志男　追加ここから
                /** ログ（登録前） */
                statusLog.info( " 応募情報本登録前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() + " , 事業ID : " + dataInfo.getJigyoId() );
// 2007/02/03　張志男　追加ここまで
                
                //DBコネクションの取得
                connection = DatabaseUtil.getConnection();

                //2005.08.08 iso ファイルログ出力
                outputFileInfo(userInfo, fileRes);
                
                success=registNew(dataInfo,connection,userInfo,fileRes);

            }finally{
                try{
                    if(success){
                        DatabaseUtil.commit(connection);
                        resultInfo = dataInfo;
                        
// 2007/02/03 張志男　追加ここから
                        /** ログ（登録後） */
                        statusLog.info( " 応募情報本登録後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + dataInfo.getSystemNo() + " , 整理番号 : " + dataInfo.getUketukeNo()  +" , 申請状況ID : " + dataInfo.getJokyoId() );
// 2007/02/03　張志男　追加ここまで
                        
                    }else{
                        DatabaseUtil.rollback(connection);
                        
// 2007/02/03 張志男　追加ここから
                        /** ログ（登録失敗） */
                        statusLog.info( " 応募情報本登録失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() + " , 事業ID : " + dataInfo.getJigyoId() );
// 2007/02/03　張志男　追加ここまで
                    }
                }catch(TransactionException e){
                    throw new ApplicationException(
                        "申請データDB登録中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }finally{
                    DatabaseUtil.closeConnection(connection);
                }
            }
            return resultInfo;
        }
    }

    /**
     * 申請情報新規登録
     * @param dataInfo
     * @param connection
     * @param userInfo
     * @param fileRes
     * @return
     * @throws ApplicationException
     */
    private boolean registNew(
            ShinseiDataInfo dataInfo,
            Connection connection,
            UserInfo userInfo,
            FileResource fileRes)
            throws ApplicationException {

        boolean        success      = false;
        //申請データに初期登録用データをセットする
        dataInfo.setSystemNo(getSystemNumber());                            //システム受付番号
        dataInfo.setSakuseiDate(new Date());                                //作成日時
        dataInfo.setJokyoId(StatusCode.STATUS_SAKUSEITHU);                //申請状況ステータス（作成中）
        dataInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_DEFAULT);    //再申請フラグ（初期値）
        dataInfo.setDelFlg(FLAG_APPLICATION_NOT_DELETE);                    //削除フラグ
        
        //-----形式チェック＋値セット-----
        List errors = new ArrayList();

        //学振受付期間チェック
        if(!checkGakusinUketukeKikan(userInfo, dataInfo)){
            errors.add(new ErrorInfo("errors.9007"));
        }
    
        //各種コードのチェックと該当データのセット
        checkValidation(connection, userInfo, dataInfo, errors);
        
        //2005/8/29代表者情報必須チェック
        checkHissuItem(connection, userInfo, dataInfo, errors);
        
        //研究組織表の研究者番号チェックデジットチェック
        checkKenkyuNo(dataInfo, errors);

        // 研究者番号の存在チェック(研究者マスタ)を追加
        checkKenkyuusha(connection, userInfo, dataInfo, errors);

//　2006/01/13 Start
        checkMeiboDate(userInfo, dataInfo, errors);
// End Nae
 
//2007/02/08 苗　削除ここから　使用しない           
//2006/02/16 Start        
//        codeValue(connection, dataInfo);
// End Syuu
//2007/02/08　苗　削除ここまで        

//        if(!checkKenkyuusha(connection, userInfo, dataInfo)){
//        errors.add(new ErrorInfo("errors.5042"));
//    }
//        List lstResult = new ArrayList();
//        lstResult = checkKenkyuusha(connection, userInfo, dataInfo, errors);
//        if(!lstResult.isEmpty()){
//            for(int i=0;i<lstResult.size();i++){
//                errors.add(new ErrorInfo(
//                        "errors.5051",
//                        new String[]{lstResult.get(i).toString()},
//                        "shinseiDataInfo.kenkyuSoshikiInfoList.kenkyuNo"
//                        ));
//            }
//        }
//Horikoshi

// 20050713
        //若手研究の年齢制限チェック
        if(!blnWakateLimitCheck(userInfo, dataInfo)){
//2007/02/05 苗　修正ここから            
//            errors.add(new ErrorInfo("errors.5046"));
            if (dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S)) {
                errors.add(new ErrorInfo("errors.5046", new String[] { Integer.toString(WAKATE_S_LIMIT+1) }));
            } else {
                errors.add(new ErrorInfo("errors.5046", new String[] { Integer.toString(WAKATE_LIMIT+1) }));
            }
//2007/02/05　苗　修正ここまで            
        }
// Horikoshi

        //添付ファイルが登録済みであるかをチェックする
        //2005/03/28 修正 ------------------------------------------------ここから
        //理由 基盤事業の場合、添付ファイルがないため、エラーとしない
        //if(fileRes == null && dataInfo.getTenpuFileInfos() == null){
        //    String msg      = "申請内容ファイル";
        //    String property = "uploadFile";
        //    errors.add(new ErrorInfo("errors.2002", new String[]{msg}, property));
        //}
        KadaiInfo kadaiInfo = dataInfo.getKadaiInfo();

// 20050603 Start 特定領域の事業区分を条件に追加
        //事業区分が基盤、特定領域以外の場合のみ添付ファイルを確認する。
//        if(kadaiInfo!=null&&!IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun())){
        if (kadaiInfo != null &&
                !(
//2006/05/31　苗　追加ここから                              
//                IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun()) ||
                IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd()) ||
                IJigyoCd.JIGYO_CD_KIBAN_C_KIKAKU.equals(dataInfo.getJigyoCd()) || 
// DEL START 2007-07-12 BIS 王志安
//                IJigyoCd.JIGYO_CD_KIBAN_HOGA.equals(dataInfo.getJigyoCd()) ||
// DEL END 2007-07-12 BIS 王志安
                IJigyoCd.JIGYO_CD_KIBAN_WAKATE_A.equals(dataInfo.getJigyoCd()) || 
                IJigyoCd.JIGYO_CD_KIBAN_WAKATE_B.equals(dataInfo.getJigyoCd())  
//2006/05/31 苗　追加ここまで
//2006/06/14 苗　修正ここから                
//                IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(kadaiInfo.getJigyoKubun()) ||
// DEL START 2007-07-12 BIS 王志安
//                || IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())
// DEL END 2007-07-12 BIS 王志安
//2006/06/14 苗　修正ここまで
//2007/02/28 劉長宇　削除　ここから 
//              ||IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(kadaiInfo.getJigyoKubun())
//              ||IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(kadaiInfo.getJigyoKubun())
//2007/02/28 劉長宇　削除　ここまで 
                )){
//Horikoshi End

            if(fileRes == null && dataInfo.getTenpuFileInfos() == null){
                String msg      = "応募内容ファイル";
                String property = "uploadFile";
                errors.add(new ErrorInfo("errors.2002", new String[]{msg}, property));
            }
        }
//2006/07/25 苗　修正ここから
//        else {
//            //ラベル情報をセットする
//            setLabels(dataInfo,userInfo,connection);
//        }
        if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun()) ||                
                IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd()) ||            
                IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(kadaiInfo.getJigyoKubun())||
                IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(kadaiInfo.getJigyoKubun())){
            //ラベル情報をセットする
            setLabels(dataInfo,userInfo,connection);
        }
//2006/07/25　苗　修正ここまで        
        //2005/03/28 修正 ------------------------------------------------ここまで
        
        //重複申請チェック
        if(!checkDuplication(connection, userInfo, dataInfo)){
            errors.add(new ErrorInfo("errors.9005"));
        }
        
        //併願申請チェック
        if(!checkParallel(connection, userInfo, dataInfo)){
            errors.add(new ErrorInfo("errors.9006"));
        }
        
//        2005/04/20 追加 ここから----------
//        理由:チェックリストチェックのため
        
        //基盤事業のみチェックリストチェック
// 20050617
        //特定領域の事業を追加
//        if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
//        if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) ||
//                IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
// Horikoshi
        
// 2006/02/16 Start
//2007/02/03 苗　修正ここから        
//        if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) ||
//                    IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())||
//                    IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(dataInfo.getKadaiInfo().getJigyoKubun())||
//                    IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
        if((IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) 
                && !IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S.equals(dataInfo.getJigyoCd())) ||
                IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//2007/02/08 劉長宇　削除　ここから
//                ||IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(dataInfo.getKadaiInfo().getJigyoKubun())               
//                ||IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//2007/02/08 劉長宇　削除　ここまで 
                ){ 
//2007/02/03 苗　修正ここまで            
            if(!checkCheckList(connection, userInfo, dataInfo)){
                errors.add(new ErrorInfo("errors.9000", new String[]{"当該事業は申請"}));
            }
        }
// End Nae        
//        2005/04/12 追加 ここまで----------
        
//2006/06/15 苗　修正ここから
        //特定領域の領域番号＆研究項目番号
//        if(IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
        if(IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())){
//2006/06/15 苗　修正ここまで            
            //2005/8/17 by xiang
            //公募研究と計画研究フラグチェック
            if (KUBUN_KEIKAKU.equals(dataInfo.getKenkyuKubun())
             || KUBUN_KOUBO.equals(dataInfo.getKenkyuKubun())){
                
                //キー作成
                RyouikiInfoPk pkInfo = new RyouikiInfoPk();
                pkInfo.setRyoikiNo(dataInfo.getRyouikiNo());
                pkInfo.setKomokuNo(dataInfo.getRyouikiKoumokuNo());
                
                try{
                    //条件に大幅な変更を追加 ※大幅な変更がチェックされている場合にはフラグに対してのチェックをしないため（存在チェックのみ）
                    String kenkyuKubun = StringUtil.defaultString(dataInfo.getKenkyuKubun());
                    if(CHECK_ON.equals(dataInfo.getChangeFlg())){
                        kenkyuKubun = "";
                    }
//                    Map rst = MasterRyouikiInfoDao.selectRecord(connection, pkInfo, dataInfo.getKenkyuKubun());
                    Map rst = MasterRyouikiInfoDao.selectRecord(connection, pkInfo, kenkyuKubun);
                    //取得情報から略称名をセット
                    dataInfo.setRyouikiRyakuName(StringUtil.defaultString(rst.get("RYOIKI_RYAKU")));
                }catch(NoDataFoundException e){
                    if (KUBUN_KEIKAKU.equals(dataInfo.getKenkyuKubun())){
                        errors.add(new ErrorInfo("errors.5057", new String[]{"計画研究"}));
                    }else{
                        errors.add(new ErrorInfo("errors.5057", new String[]{"公募研究"}));
                    }
                }catch(Exception e){
                    throw new ApplicationException(
                            "領域番号チェック中にDBエラーが発生しました。",
                            new ErrorInfo("errors.4001"),
                            e);
                }
            }
//2006/07/04 苗　追加ここから
            //応募年数チェック（特定領域（継続領域）用）
            ouboNennsuuCheckForKeyizoku(connection, dataInfo, errors);
//2006/07/04　苗　追加ここまで            
        }

//2006/06/15 苗　追加ここから
        //特定領域研究（新規領域） の場合     
        if(IJigyoCd.JIGYO_CD_TOKUTEI_SINKI.equals(dataInfo.getJigyoCd())){

            //領域計画書概要テーブル（当該年度の削除フラグ=0）に仮領域番号が存在するかチェック    
            checkRyoikoNoForTokuteiSinki(connection, userInfo, dataInfo, errors);

            //領域代表者以外のチェック
            checkKomokuNoForTokuteiSinki(connection, userInfo, dataInfo, errors);

            //領域計画書確定済のチェック
            checkRyoikikeikakushoKakutei(connection, userInfo, dataInfo, errors);
            
            //ADD START 2007/07/13 BIS 趙一非
            //Ｈ１９カスタマイズ
            //・初年度研究経費の有効な入力値チェックの表現を変更。（内容は変わっていない。）
            //・エラー発生時の画面イメージを追加
            checkKenkyuKeihiSoukeiInfo(connection, userInfo, dataInfo, errors);
//          ADD END 2007/07/13 BIS 趙一非
            //計画研究のうち調整班
            if("X00".equals(dataInfo.getRyouikiKoumokuNo()) || "Y00".equals(dataInfo.getRyouikiKoumokuNo())){
                dataInfo.setChouseiFlg(null);
            }
        }
//2006/06/15 苗　追加ここまで 
        
        //エラーが存在した場合
        if(errors.size() > 0){
            String msg = "申請書データ形式チェックで検証エラーとなりました。";
            throw new ValidationException(msg, errors);
        }
        
        
        //申請番号の採番
        String uketukeNo = getUketukeNumber(connection, userInfo, dataInfo);
        dataInfo.setUketukeNo(uketukeNo);

        //--------------------
        // 申請データ登録
        //--------------------
        try {
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            //-- 登録時にキーが重なった場合はリトライをかける --
            int count = 0;
            while(true){
                try{
                    dao.insertShinseiDataInfo(connection, dataInfo);
                    success = true;
                    break;
                }catch(DuplicateKeyException e){
                    count++;
                    if(count < SYSTEM_NO_MAX_RETRY_COUNT){
                        dataInfo.setSystemNo(getSystemNumber());  //システム受付番号を再取得
                        continue;
                    }else{
                        throw e;                    
                    }
                }
            }                
        } catch (DataAccessException e) {
            success = false;
            throw new ApplicationException(
                "申請書管理データ登録中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }
    
        //--------------------
        // 研究組織情報登録
        //--------------------
        try{
            registKenkyuSoshikiKanriInfo(connection, userInfo, dataInfo);
            success = true;
        }catch(ApplicationException e){
            success = false;
            throw e;
        }
        
//        2005/04/12 追加 ここから----------
//        理由:チェックリストテーブル追加の為

        //--------------------
        // 研究組織情報登録(基盤事業のみ)
        //--------------------

// 20050617 特定領域の追加のため
//        if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
//        if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) ||
//            IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
// Horikoshi
            
// 2006/02/14 特別研究促進費と若手スタートアップの追加のため    
//2006/07/17 苗　修正ここから        
//        if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun())
        if(IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd())
                ||IJigyoCd.JIGYO_CD_KIBAN_C_KIKAKU.equals(dataInfo.getJigyoCd())
                ||IJigyoCd.JIGYO_CD_KIBAN_HOGA.equals(dataInfo.getJigyoCd())
                ||IJigyoCd.JIGYO_CD_KIBAN_WAKATE_A.equals(dataInfo.getJigyoCd())
                ||IJigyoCd.JIGYO_CD_KIBAN_WAKATE_B.equals(dataInfo.getJigyoCd())
//2006/07/17　苗　修正ここまで
//2007/02/08  劉長宇　修正　ここから
                    ||IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())
//2007/02/08  劉長宇　修正　ここまで
//2007/02/06  劉長宇　削除　ここから
//              ||IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//              ||IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//2007/02/06  劉長宇　削除　ここまで
                ){    
// End Nae            
            try{
                CheckListInfoDao checkListDao = new CheckListInfoDao(userInfo);
                checkListDao.insertCheckListInfo(connection,dataInfo);
                success = true;
            
            //すでにチェックリストが登録されている場合は問題なし
            }catch(DuplicateKeyException e){
                success = true;
            
            }catch(DataAccessException e){
                success = false;
                throw new ApplicationException(
                        "チェックリストデータ登録中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
            }
        }
//        2005/04/12 追加 ここまで----------
    
        //--------------------
        // 添付ファイル登録
        //--------------------
        //添付ファイルが指定されていた場合
        if(fileRes != null){
            try{
                registTenpuFileInfo(connection, userInfo, dataInfo, fileRes);
                success = true;
            }catch(ApplicationException e){
                success = false;
                throw e;
            }
        }
        return success;
    }
    
    //2005/04/19 追加 -----------------------------ここから
    //理由 審査希望分野のラベルの取得が必要なため
    /**
     * 審査希望分野のラベルの取得
     * @param dataInfo
     * @param userInfo
     * @throws ApplicationException
     */
    private void setLabels(ShinseiDataInfo dataInfo,UserInfo userInfo,Connection con)
            throws ApplicationException {

        //基盤は開示希望の有無のラベルをセット
        //2005.08.09 iso getKaijikiboFlgNoが0の場合空をセットするよう変更
        if(dataInfo.getKaijikiboFlgNo() != null
                && IShinseiMaintenance.KAIJI_FLG_SET.equals(dataInfo.getKaijikiboFlgNo())) {
                    dataInfo.setKaijiKiboFlg("");
        }
        List kaijiKiboList=LabelValueManager.getKaijiKiboList();
        for(int i=0;i<kaijiKiboList.size();i++){
            LabelValueBean bean=(LabelValueBean)kaijiKiboList.get(i);
            if(bean.getValue().equals(dataInfo.getKaijikiboFlgNo())){
                dataInfo.setKaijiKiboFlg(bean.getLabel());
                break;
            }
        }
        
        //審査希望分野
        if(dataInfo.getKaigaibunyaCd()!=null&&!dataInfo.getKaigaibunyaCd().equals("")){
            try {
                KaigaiBunyaInfo kaigai=MasterKaigaibunyaInfoDao.getKaigaiBunyaInfo(con,dataInfo.getKaigaibunyaCd());
                if(kaigai!=null){
                    dataInfo.setKaigaibunyaName(kaigai.getKaigaibunyaName());
                    dataInfo.setKaigaibunyaNameRyaku(kaigai.getKaigaibunyaNameRyaku());
                }
                
                String shinseiFlg = LabelValueManager.getZennendoOboList(dataInfo.getShinseiFlg());
                if(shinseiFlg != null){
                    dataInfo.setShinseiFlg(shinseiFlg);
                }
                
            } catch (DataAccessException e) {
                String msg="審査希望分野の検索時に例外が発生しました。";
                log.error(msg,e);
                throw new ApplicationException(msg,e); 
            }
        }
        
        if(dataInfo.getShinseiFlgNo() != null && !dataInfo.getShinseiFlgNo().equals("")){
            try{
                String shinseiFlg = LabelValueManager.getZennendoOboList(dataInfo.getShinseiFlgNo());
                if(shinseiFlg != null){
                    dataInfo.setShinseiFlg(shinseiFlg);
                }
            } catch (ApplicationException e) {
                String msg="前年度応募有無ラベル検索時に例外が発生しました。";
                log.error(msg,e);
                throw new ApplicationException(msg,e); 
            }
        }
    }
    //2005/04/19 追加 -----------------------------ここまで

    /**
     * 申請情報の更新.<br><br>
     * 
     * 申請情報、研究組織情報、添付ファイルの更新を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * 申請番号をアプリケーションで採番するため、synchronizedブロックで処理を行う。<br>
     * 申請者情報の所属機関コードでロックをかける。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 　以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.削除フラグチェック、ステータスチェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDによって、dataInfoの状況IDをセットする。<br>
     * <table>
     * <tr><td>"01"(作成中)のとき</td><td>"01" (作成中)</td></tr>
     * <tr><td>"02"(申請書未確認)のとき</td><td>"02" (申請書未確認)</td></tr>
     * <tr><td>"03"(所属機関受付中)のとき</td><td>"02" (申請書未確認)</td></tr>
     * <tr><td>"05"(所属機関却下)のとき</td><td>"02" (申請書未確認)</td></tr>
     * </table>
     * 上記以外のとき<br>
     * 　再申請フラグが"01"(再申請中)であれば、"02" (申請書未確認)<br>
     * 　再申請フラグが"01"以外であれば、例外をthrowする。<br><br>
     * 
     * <b>3.各種チェック、各種コードセット</b><br>
     * ・学振受付期間チェック<br>
     * 　自クラスのcheckGakusinUketukeKikan(UserInfo, ShinseiDataInfo)メソッドを呼び、受付期間チェックを行う。<br>
     * 　引数に第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br>
     * 　学振受付期間（終了）を過ぎている場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・各種コードチェック、該当データセット<br>
     * 　自クラスのcheckValidation(Connection, UserInfo, ShinseiDataInfo, List)を呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfo、エラーリストerrorsを渡す。<br><br>
     * 
     * ・研究者番号チェック<br>
     * 　自クラスのcheckKenkyuNo(ShinseiDataInfo, List)メソッドを呼ぶ。<br>
     * 　引数に、1.でデータをセットした申請情報dataInfo、エラーリストerrorsを渡す。<br><br>
     * 
     * ・添付ファイルの登録済みチェック<br>
     * 　第三引数fileResがnullかつdataInfoの添付ファイル情報がnullのときエラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・重複申請チェック<br>
     * 　自クラスのcheckDuplication(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 　重複申請の場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * ・併願申請チェック<br>
     * 　自クラスのcheckParallel(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 　併願不可能な場合、エラーリストerrorsにエラー情報をaddする。<br><br>
     * 
     * 各チェックにてエラーが存在したとき（エラーリストのsizeが0でないとき）、例外をthrowする。<br><br>
     * 
     * エラーが存在しないとき、申請情報の更新処理を行う。<br><br>
     * 
     * 既存データに申請番号が採番されていない場合は採番する。<br>
     * 　自クラスのgetUketukeNumber(Connection, UserInfo, ShinseiDataInfo)を呼び、申請番号を取得する。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 
     * dataInfoの作成日時に、WASの本日日付をセットする。<br><br>
     * 
     * <b>4.申請情報の更新</b><br><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?            -- システム受付番号
     *     ,UKETUKE_NO = ?            -- 申請番号
     *     ,JIGYO_ID = ?            -- 事業ID
     *     ,NENDO = ?                -- 年度
     *     ,KAISU = ?                -- 回数
     *     ,JIGYO_NAME = ?            -- 事業名
     *     ,SHINSEISHA_ID = ?        -- 申請者ID
     *     ,SAKUSEI_DATE = ?        -- 申請書作成日
     *     ,SHONIN_DATE = ?            -- 所属機関承認日
     *     ,JYURI_DATE = ?            -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?            -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?            -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?            -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                    -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                    -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?        -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?            -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?            -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?            -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?            -- 細目2
     *     ,KANTEN_NO = ?                -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?            -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数dataInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>第二引数dataInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>第二引数dataInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>第二引数dataInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>第二引数dataInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>第二引数dataInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>第二引数dataInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>第二引数dataInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>第二引数dataInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>第二引数dataInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>第二引数dataInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>第二引数dataInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>第二引数dataInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>第二引数dataInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>第二引数dataInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>第二引数dataInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>第二引数dataInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>第二引数dataInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>第二引数dataInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>第二引数dataInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>第二引数dataInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>第二引数dataInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>第二引数dataInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>第二引数dataInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>第二引数dataInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>第二引数dataInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>第二引数dataInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>第二引数dataInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>第二引数dataInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>第二引数dataInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>第二引数dataInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>第二引数dataInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>第二引数dataInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>第二引数dataInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>第二引数dataInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>第二引数dataInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>第二引数dataInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>第二引数dataInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>第二引数dataInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>第二引数dataInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>第二引数dataInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>第二引数dataInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>第二引数dataInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>第二引数dataInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>第二引数dataInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>第二引数dataInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>第二引数dataInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>第二引数dataInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>第二引数dataInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>第二引数dataInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>第二引数dataInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>第二引数dataInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>第二引数dataInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>第二引数dataInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>第二引数dataInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>第二引数dataInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>第二引数dataInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>第二引数dataInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>第二引数dataInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>第二引数dataInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>第二引数dataInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>第二引数dataInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>第二引数dataInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>第二引数dataInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>第二引数dataInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>第二引数dataInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>第二引数dataInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>第二引数dataInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>第二引数dataInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>第二引数dataInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>第二引数dataInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>第二引数dataInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>第二引数dataInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>第二引数dataInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>第二引数dataInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>第二引数dataInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>第二引数dataInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>第二引数dataInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>第二引数dataInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>第二引数dataInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>第二引数dataInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>第二引数dataInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>第二引数dataInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>第二引数dataInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>第二引数dataInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>第二引数dataInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>第二引数dataInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>第二引数dataInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>第二引数dataInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>第二引数dataInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>第二引数dataInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>第二引数dataInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>第二引数dataInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>第二引数dataInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>第二引数dataInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>第二引数dataInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>第二引数dataInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>第二引数dataInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>第二引数dataInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>第二引数dataInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>第二引数dataInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>第二引数dataInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>第二引数dataInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>第二引数dataInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>第二引数dataInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>第二引数dataInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>第二引数dataInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>第二引数dataInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>第二引数dataInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>第二引数dataInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>第二引数dataInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>第二引数dataInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>第二引数dataInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>第二引数dataInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>第二引数dataInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>第二引数dataInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>第二引数dataInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>第二引数dataInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>第二引数dataInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>第二引数dataInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>第二引数dataInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>第二引数dataInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>第二引数dataInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>第二引数dataInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>第二引数dataInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>第二引数dataInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>第二引数dataInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数dataInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>5.研究組織情報の登録</b><br>
     * 自クラスのregistKenkyuSoshikiKanriInfo(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、第二引数dataInfoを渡す。<br><br>
     * 
     * <b>6.添付ファイルの登録</b><br>
     * 第三引数fileResがnullでないとき、添付ファイルの登録処理を行う。<br><br>
     * 
     * 自クラスのregistTenpuFileInfo(Connection, UserInfo, ShinseiDataInfo, FileResource)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、第二引数dataInfo、第三引数fileResを渡す。<br><br>
     * 
     * <b>7.コミット、ロールバック</b><br>
     * すべての登録処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 登録処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param dataInfo    ShinseiDataInfo
     * @param fileRes    FileResource
     * @return なし
     * @throws ValidationException
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#regist(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataInfo, jp.go.jsps.kaken.util.FileResource)
     */
    public ShinseiDataInfo registApplicationUpdate(
            UserInfo userInfo,
            ShinseiDataInfo dataInfo,
            FileResource fileRes)
            throws ValidationException, NoDataFoundException, ApplicationException {

        //-----申請者の所属機関コードで排他制御をかける-----
        //→ 申請番号（機関コード＋連番）をアプリケーションで採番するため必要。
        synchronized(userInfo.getShinseishaInfo().getShokushuCd().intern())
        {
            Connection      connection   = null;
            boolean        success      = false;
            try {
                //DBコネクションの取得
                connection = DatabaseUtil.getConnection();
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);

                //2005.08.08 iso ファイルログ出力
                outputFileInfo(userInfo, fileRes);
            
                //排他制御のため既存データを取得する
                ShinseiDataInfo existInfo = null;
                try{
                    existInfo = dao.selectShinseiDataInfoForLock(connection, dataInfo, true);
                }catch(NoDataFoundException e){
                    throw e;
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "申請書管理データ排他取得中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4004"),
                        e);
                }
    
                //---申請データ削除フラグチェック---
                String delFlag = existInfo.getDelFlg(); 
                if(FLAG_APPLICATION_DELETE.equals(delFlag))
                {
                    throw new ApplicationException(
                        "当該申請データは削除されています。SystemNo=" + dataInfo.getSystemNo(),
                        new ErrorInfo("errors.9001"));
                }
                //---申請データステータスチェック---
                String jyokyoId = existInfo.getJokyoId();
                //---作成中のとき
                if(StatusCode.STATUS_SAKUSEITHU.equals(jyokyoId)){
                    dataInfo.setJokyoId(StatusCode.STATUS_SAKUSEITHU);                    //作成中にセット
                //---申請書未確認のとき
                }else if(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN.equals(jyokyoId)){
                    dataInfo.setJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN);        //申請書未確認にセット    
                //---所属機関受付中のとき
                }else if(StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU.equals(jyokyoId)){
                    dataInfo.setJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN);        //申請書未確認にセット
                //---所属機関却下のとき
                }else if(StatusCode.STATUS_SHOZOKUKIKAN_KYAKKA.equals(jyokyoId)){
                    dataInfo.setJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN);        //申請書未確認にセット
//2006/07/14 苗　追加ここから
                //--領域代表者却下のとき
                }else if(StatusCode.STATUS_RYOUIKIDAIHYOU_KYAKKA.equals(jyokyoId)){
                    dataInfo.setJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN);        //申請書未確認にセット    
//2006/07/14　苗　追加ここまで                    
                //---それ以外のとき
                }else{
                    //---再申請中の場合はOK
                    if(StatusCode.SAISHINSEI_FLG_SAISHINSEITYU.equals(dataInfo.getSaishinseiFlg())){
                        dataInfo.setJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN);    //申請書未確認にセット
                    }else{
                        throw new ApplicationException(
                            "当該申請データは申請登録可能なステータスではありません。SystemNo=" + dataInfo.getSystemNo(),
                            new ErrorInfo("errors.9000", new String[]{"当該申請データは申請登録"}));
                    }
                }
    

                //申請データに初期登録用データをセットする
                dataInfo.setSakuseiDate(new Date());    //作成日時
    
                //-----形式チェック＋値セット-----
                List errors = new ArrayList();
                
                //学振受付期間チェック（再申請中の場合はチェックしない）
                if(!StatusCode.SAISHINSEI_FLG_SAISHINSEITYU.equals(dataInfo.getSaishinseiFlg())){
                    if(!checkGakusinUketukeKikan(userInfo, dataInfo)){
                        errors.add(new ErrorInfo("errors.9007"));
                    }
                }

                //各種コードのチェックと該当データのセット
                checkValidation(connection, userInfo, dataInfo, errors);

                //2005/8/29代表者情報必須チェック
                checkHissuItem(connection, userInfo, dataInfo, errors);
                
// 20050713
                //若手研究の年齢制限チェック
                if(!blnWakateLimitCheck(userInfo, dataInfo)){
//2007/02/05 苗　修正ここから            
//                  errors.add(new ErrorInfo("errors.5046"));
                  if (dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S)) {
                      errors.add(new ErrorInfo("errors.5046", new String[] { Integer.toString(WAKATE_S_LIMIT+1) }));
                  } else {
                      errors.add(new ErrorInfo("errors.5046", new String[] { Integer.toString(WAKATE_LIMIT+1) }));
                  }
//2007/02/05　苗　修正ここまで 
                }
// Horikoshi

                //研究組織表の研究者番号チェックデジットチェック
                checkKenkyuNo(dataInfo, errors);

                // 研究者番号の存在チェック(研究者マスタ)を追加
                checkKenkyuusha(connection, userInfo, dataInfo, errors);
                
//2006/01/13 Start
                checkMeiboDate(userInfo, dataInfo, errors);
//End Nae
                
//2007/02/08 苗　削除ここから　使用しない                 
//2006/04/28 追加ここから
//                codeValue(connection, dataInfo);
//苗　追加ここまで
//2007/02/08　苗　削除ここまで
                
//                if(!checkKenkyuusha(connection, userInfo, dataInfo)){
//                errors.add(new ErrorInfo("errors.5042"));
//            }
//            List lstResult = new ArrayList();
//            lstResult = checkKenkyuusha(connection, userInfo, dataInfo, errors);
//            if(!lstResult.isEmpty()){
//                for(int i=0;i<lstResult.size();i++){
//                    errors.add(new ErrorInfo(
//                            "errors.5051",
//                            new String[]{lstResult.get(i).toString()},
//                            "shinseiDataInfo.kenkyuSoshikiInfoList.kenkyuNo"
//                            ));
//                }
//            }
// Horikoshi

/* 2005/8/30 共通関数にしたので不要とする
// 20050725 キーワード存在チェック
             //2005.08.22 iso 基盤(C)一般で、時限付き細目番号が選択されていない場合、
             //「細目表キーワード必須」のチェックを行う。
            boolean selectFlg = true;                //キーワードを検索するか
            if(IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd())) {
                try {
                    if(StringUtil.isBlank(dataInfo.getKigou())) {
                        if(Integer.parseInt(dataInfo.getKadaiInfo().getBunkaSaimokuCd()) <= IShinseiMaintenance.MAX_SAIMOKU_NOT_JIGEN) {
                            //細目表キーワードが空で時限細目番号でなければ、必須エラー
                            String property = "shinseiDataInfo.kigou";
                            errors.add(new ErrorInfo("errors.required", new String[]{"細目表キーワード"}, property));
                        } else {
                            //細目表キーワードが空で時限細目番号の場合、DB検索を行わないよう設定
                            selectFlg= false;
                            dataInfo.setKeyName("");
                        }
                        //キーワードが入力されていなかった場合にはキーワードチェックを行わない
                        selectFlg= false;
                    }
                } catch (NumberFormatException e) {
                    //数値チェックはvalidaton.xmlで行っているので考えない。
                }
            }
            
            if(selectFlg &&
                    IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) &&
                    !IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI.equals(dataInfo.getJigyoCd()) &&
                    !IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI.equals(dataInfo.getJigyoCd())
                    ){
                try{
                    if(!blnKeyWordCheck(connection, userInfo, dataInfo)){
                        String property = "shinseiDataInfo.kigou";
                        errors.add(new ErrorInfo("errors.5053", new String[]{}, property));
                    }
                }catch(NoDataFoundException ex){
                    String property = "shinseiDataInfo.kigou";
                    errors.add(new ErrorInfo("errors.5053", new String[]{}, property));
                }catch(ApplicationException ex){
                    String property = "shinseiDataInfo.kigou";
                    errors.add(new ErrorInfo("errors.4004"));
                }finally{
                    //TODO:
                }
            }
// Horikoshi
*/
                //添付ファイルが登録済みであるかをチェックする
                //2005/03/31 修正 ------------------------------------------------ここから
                //理由 基盤事業の場合、添付ファイルがないため、エラーとしない
                //if(fileRes == null && dataInfo.getTenpuFileInfos() == null){
                //    String msg      = "申請内容ファイル";
                //    String property = "uploadFile";
                //    errors.add(new ErrorInfo("errors.2002", new String[]{msg}, property));
                //}
                KadaiInfo kadaiInfo=dataInfo.getKadaiInfo();

// 20050603 Start 特定領域の事業区分を条件に追加
//                //事業区分が基盤以外の場合のみ添付ファイルを確認する。
//                if(kadaiInfo!=null&&!IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun())){
                //事業区分が基盤、特定領域以外の場合のみ添付ファイルを確認する。

//Update 2006/02/13
//                if(kadaiInfo!=null && 
//                        !(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun()) || 
//                        IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(kadaiInfo.getJigyoKubun()))){
                if(kadaiInfo!=null &&
                        !(
//2006/05/31　苗　追加ここから                                   
//                        IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun()) || 
                        IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd()) ||
                        IJigyoCd.JIGYO_CD_KIBAN_C_KIKAKU.equals(dataInfo.getJigyoCd()) || 
// DEL START 2007-07-12 BIS 王志安
//                        IJigyoCd.JIGYO_CD_KIBAN_HOGA.equals(dataInfo.getJigyoCd()) ||
// DEL END 2007-07-12 BIS 王志安
                        IJigyoCd.JIGYO_CD_KIBAN_WAKATE_A.equals(dataInfo.getJigyoCd()) || 
                        IJigyoCd.JIGYO_CD_KIBAN_WAKATE_B.equals(dataInfo.getJigyoCd())  
//2006/05/31　苗　追加ここまで 
//2006/06/15 苗　修正ここから                     
//                        IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(kadaiInfo.getJigyoKubun())
// DEL START 2007-07-12 BIS 王志安
//                        || IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())
// DEL END 2007-07-12 BIS 王志安
//2006/06/15 苗　修正ここまで 
//2007/02/28 劉長宇　削除　ここから 
//                      ||IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(kadaiInfo.getJigyoKubun())
//                      ||IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(kadaiInfo.getJigyoKubun())
//2007/02/28 劉長宇　削除　ここまで
                        )){
//Nae End
// Horikoshi End

                    if(fileRes == null && dataInfo.getTenpuFileInfos() == null){
                        String msg      = "応募内容ファイル";
                        String property = "uploadFile";
                        errors.add(new ErrorInfo("errors.2002", new String[]{msg}, property));
                    }
                } 
//2006/07/25 苗　修正ここから                
//                else {
//                    //ラベル情報をセットする
//                    setLabels(dataInfo,userInfo,connection);
//                }
                if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun()) ||                
                        IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd()) ||            
                        IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(kadaiInfo.getJigyoKubun())||
                        IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(kadaiInfo.getJigyoKubun())){
                    //ラベル情報をセットする
                    setLabels(dataInfo,userInfo,connection);
                }
//2006/07/25　苗　修正ここまで                
                //2005/03/31 修正 ------------------------------------------------ここまで
                
                //2005/04/26 削除 ------------------------------------------------ここから
                //理由 新規作成時に重複登録チェックが済んでいるため、更新登録時のチェックは不要
                //重複申請チェック
                //if(!checkDuplication(connection, userInfo, dataInfo)){
                //    errors.add(new ErrorInfo("errors.9005"));
                //}
                //2005/04/26 削除 ------------------------------------------------ここまで
                
                //併願申請チェック
                if(!checkParallel(connection, userInfo, dataInfo)){
                    errors.add(new ErrorInfo("errors.9006"));
                }
                
//                2005/04/20 追加 ここから----------
//                理由:チェックリストチェックのため

                //基盤事業のみチェックリストチェック
// 20050617 特定領域の事業を追加
//                if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
//                if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) ||
//                    IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
// Horikoshi
                
//2006/02/16 Start        
                if((IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) 
                        && !IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S.equals(dataInfo.getJigyoCd()))||
                            IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//2007/02/06  劉長宇　削除　ここから
//                          ||IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//                          ||IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//2007/02/06  劉長宇　削除　ここまで            
                ){    
//End Nae        
                    if(!checkCheckList(connection, userInfo, dataInfo)){
                        errors.add(new ErrorInfo("errors.9000", new String[]{"当該事業は申請"}));
                    }
                }
                
//                2005/04/20 追加 ここまで----------
//2006/06/15 苗　修正ここから
                //特定領域の領域番号＆研究項目番号＆重複チェック
//                if(IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
                if(IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())){
//2006/06/15　苗　修正ここまで                    
                    //2005/8/17 by xiang
                    //公募研究と計画研究フラグチェック
                    if (KUBUN_KEIKAKU.equals(dataInfo.getKenkyuKubun())
                     || KUBUN_KOUBO.equals(dataInfo.getKenkyuKubun())){
                        
                        //キー作成
                        RyouikiInfoPk pkInfo = new RyouikiInfoPk();
                        pkInfo.setRyoikiNo(dataInfo.getRyouikiNo());
                        pkInfo.setKomokuNo(dataInfo.getRyouikiKoumokuNo());
                        
                        try{
                            //条件に大幅な変更を追加 ※大幅な変更がチェックされている場合にはフラグに対してのチェックをしないため（存在チェックのみ）
                            String kenkyuKubun = StringUtil.defaultString(dataInfo.getKenkyuKubun());
                            if(CHECK_ON.equals(dataInfo.getChangeFlg())){
                                kenkyuKubun = "";
                            }
//                            Map rst = MasterRyouikiInfoDao.selectRecord(connection, pkInfo, dataInfo.getKenkyuKubun());
                            Map rst = MasterRyouikiInfoDao.selectRecord(connection, pkInfo, kenkyuKubun);
                            //取得情報から略称名をセット
                            dataInfo.setRyouikiRyakuName(StringUtil.defaultString(rst.get("RYOIKI_RYAKU")));
                        }catch(NoDataFoundException e){
                            if (KUBUN_KEIKAKU.equals(dataInfo.getKenkyuKubun())){
                                errors.add(new ErrorInfo("errors.5057", new String[]{"計画研究"}));
                            }else{
                                errors.add(new ErrorInfo("errors.5057", new String[]{"公募研究"}));
                            }
                        }catch(Exception e){
                            throw new ApplicationException(
                                    "領域番号チェック中にDBエラーが発生しました。",
                                    new ErrorInfo("errors.4001"),
                                    e);
                        }
                    }
//2006/07/04 苗　追加ここから
                    //応募年数チェック（特定領域（継続領域）用）
                    ouboNennsuuCheckForKeyizoku(connection, dataInfo, errors);
//2006/07/04　苗　追加ここまで                  
                }
// 20050809 重複チェックを追加 ※Updateの時も重複チェックを行う
                //重複申請チェック
                if(!checkDuplication(connection, userInfo, dataInfo)){
                    errors.add(new ErrorInfo("errors.9005"));
                }
// Horikoshi

//2006/06/15 苗　追加ここから
                //特定領域研究（新規領域） の場合     
                if(IJigyoCd.JIGYO_CD_TOKUTEI_SINKI.equals(dataInfo.getJigyoCd())){
                    //領域計画書概要テーブル（当該年度の削除フラグ=0）に仮領域番号が存在するかチェック    
                    checkRyoikoNoForTokuteiSinki(connection, userInfo, dataInfo, errors);
                    //領域代表者以外のチェック
                    checkKomokuNoForTokuteiSinki(connection, userInfo, dataInfo, errors);
                    //領域計画書確定済のチェック
                    checkRyoikikeikakushoKakutei(connection, userInfo, dataInfo, errors);
                    //計画研究のうち調整班
                    if("X00".equals(dataInfo.getRyouikiKoumokuNo()) || "Y00".equals(dataInfo.getRyouikiKoumokuNo())){
                        dataInfo.setChouseiFlg(null);
                    }
//2006/07/27 苗　追加ここから                    
                    if(!isEqual(dataInfo.getRyouikiNo(),existInfo.getRyouikiNo()) && 
                        isEqual(existInfo.getSaishinseiFlg(),StatusCode.SAISHINSEI_FLG_KYAKKA)){
                        dataInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_DEFAULT);
                    }
//2006/07/27　苗　追加ここまで                    
                }
//2006/06/15 苗　追加ここまで 

                //エラーが存在した場合
                if(errors.size() > 0){
                    String msg = "申請書データ形式チェックで検証エラーとなりました。";
                    throw new ValidationException(msg, errors);
                }
            
                //受付番号を構成する要素に変更がないかチェックする
                //変更があった場合は更新ではなく、既存データを削除し新規登録を行う　→　//2006.06.22 iso 処理変更
//2007/03/09   劉長宇　更新　ここから                
//              if(!checkRegistUketsukeNo(connection,userInfo,dataInfo)){
                if(!StringUtil.isBlank(dataInfo.getUketukeNo()) && !checkRegistUketsukeNo(connection,userInfo,dataInfo)){
//2007/03/09 　劉長宇　更新　ここまで
                    //2006.06.22 iso
                    //変更があったっ場合は、旧受付番号の削除データを新規登録するよう変更。
                    //既存データは新受付番号に更新する。
//                    //新しく登録し直すため、該当データを論理削除する
//                    try{
//                        dao.deleteFlagShinseiDataInfo(connection, dataInfo);
//                        success = true;
//                    }catch(DataAccessException e){
//                        success = false;
//                        throw new ApplicationException(
//                            "申請書管理データ論理削除中にDBエラーが発生しました。",
//                            new ErrorInfo("errors.4001"),
//                            e);
//                    }
//                    
//                    //削除後新規登録メソッドを呼び出し、処理を抜ける
//                    success = registNew(dataInfo, connection,userInfo,  fileRes);
//                    
//                    return dataInfo;
                    
                    //existInfoを直接書き換える。
                    //現状では影響がないが、ここより下でexistInfoを使用する場合は
                    //システム番号・削除フラグが変わっているので注意。
                    existInfo.setSystemNo(getSystemNumber());        //システム受付番号
                    existInfo.setDelFlg("1");                        //削除データとして登録する。
                    try {
                        dao.insertShinseiDataInfo(connection, existInfo);
                        success = true;
                    } catch(DataAccessException e) {
                        success = false;
                        throw new ApplicationException(
                            "申請書管理データ登録中にDBエラーが発生しました。",
                            new ErrorInfo("errors.4001"),
                            e);
                    }
                    
                    //新しい受付番号を採番するため、一旦空にする。
                    existInfo.setUketukeNo(null);
                }
            
                //既存データに申請番号が採番されていない場合は採番する
                if(existInfo.getUketukeNo() == null || existInfo.getUketukeNo().length() == 0){
                    String uketukeNo = getUketukeNumber(connection, userInfo, dataInfo);
                    dataInfo.setUketukeNo(uketukeNo);            
                }

                //--------------------
                // 申請データ登録
                //--------------------
                
// 2007/02/05 張志男　追加ここから
                /** ログ（更新前） */
                statusLog.info( " 応募情報本登録更新前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                        + " , システム受付番号 : " + dataInfo.getSystemNo() + " , 整理番号 : " + dataInfo.getUketukeNo() + " , 更新前申請状況ID : " + existInfo.getJokyoId() + " , 更新前再申請フラグ : " + existInfo.getSaishinseiFlg() );
// 2007/02/05　張志男　追加ここまで
                
                try {
                    dataInfo.setSakuseiDate(new Date());    //作成日時を更新
                    dao.updateShinseiDataInfo(connection, dataInfo, true);
                    success = true;
                } catch (DataAccessException e) {
                    success = false;
                    throw new ApplicationException(
                        "申請書管理データ更新中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
                
                //--------------------
                // 研究組織情報登録
                //--------------------
                try{
                    registKenkyuSoshikiKanriInfo(connection, userInfo, dataInfo);
                    success = true;
                }catch(ApplicationException e){
                    success = false;
                    throw e;
                }
            
                //--------------------
                // 添付ファイル登録
                //--------------------
                //添付ファイルが指定されていた場合
                if(fileRes != null){
                    try{
                        registTenpuFileInfo(connection, userInfo, dataInfo, fileRes);
                        success = true;
                    }catch(ApplicationException e){
                        success = false;
                        throw e;
                    }
                }
                
                //2005/05/28 追加 ここから----------
                //理由:一時保存後の登録時のチェックリストテーブル追加の為

                //--------------------
                // チェックリスト登録(基盤事業のみ)
                //--------------------
// 20050617
//                if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
//                if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) ||
//                    IJigyoKubun.JIGYO_KUBUN_TOKUTEI.equals(dataInfo.getKadaiInfo().getJigyoKubun())){
// Horikoshi
//2006/02/14 特別研究促進費と若手スタートアップの追加のため    
//2006/07/17 苗　修正ここから  
//                if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(dataInfo.getKadaiInfo().getJigyoKubun()) 
                if(IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd())
                    ||IJigyoCd.JIGYO_CD_KIBAN_C_KIKAKU.equals(dataInfo.getJigyoCd())
                    ||IJigyoCd.JIGYO_CD_KIBAN_HOGA.equals(dataInfo.getJigyoCd())
                    ||IJigyoCd.JIGYO_CD_KIBAN_WAKATE_A.equals(dataInfo.getJigyoCd())
                    ||IJigyoCd.JIGYO_CD_KIBAN_WAKATE_B.equals(dataInfo.getJigyoCd())
//2006/07/17　苗　修正ここまで
//2007/02/08  劉長宇　修正　ここから
                    ||IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(dataInfo.getJigyoCd())
//2007/02/08  劉長宇　修正　ここまで
//2007/02/06  劉長宇　削除　ここから
//                  ||IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//                  ||IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(dataInfo.getKadaiInfo().getJigyoKubun())
//2007/02/06  劉長宇　削除　ここまで
                    ){    
//End Nae                        
                    try{
                        CheckListInfoDao checkListDao = new CheckListInfoDao(userInfo);
                        checkListDao.insertCheckListInfo(connection,dataInfo);
                        success = true;
            
                    //すでにチェックリストが登録されている場合は問題なし
                    }catch(DuplicateKeyException e){
                        success = true;
            
                    }catch(DataAccessException e){
                        success = false;
                        throw new ApplicationException(
                                "チェックリストデータ登録中にDBエラーが発生しました。",
                                new ErrorInfo("errors.4001"),
                                e);
                    }
                }
                //2005/05/28 追加 ここまで----------                

            }finally{
                try{
                    if(success){
                        DatabaseUtil.commit(connection); 
                        
//  2007/02/05 張志男　追加ここから
                        /** ログ（更新後） */
                        statusLog.info( " 応募情報本登録更新後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + dataInfo.getSystemNo() + " , 整理番号 : " + dataInfo.getUketukeNo() + " , 更新後申請状況ID : " + dataInfo.getJokyoId() + " , 更新後再申請フラグ : " + dataInfo.getSaishinseiFlg() );
//  2007/02/05　張志男　追加ここまで
                    }else{
                        DatabaseUtil.rollback(connection);
                        
//  2007/02/05 張志男　追加ここから
                        /** ログ（更新失敗） */
                        statusLog.info( " 応募情報本登録更新失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + dataInfo.getSystemNo() + " , 整理番号 : " + dataInfo.getUketukeNo());
//  2007/02/05　張志男　追加ここまで
                        
                    }
                }catch(TransactionException e){
                    throw new ApplicationException(
                        "申請データDB登録中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }finally{
                    DatabaseUtil.closeConnection(connection);
                }
            }
            return dataInfo;
        }
    }

    /**
     * 申請情報の変換.<br><br>
     * 
     * 申請情報を変換し、申請ステータスを"申請書未確認"に更新する。<br>
     * 更新処理の途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * synchronizedブロックで処理を行う。<br>
     * 申請者IDでロックをかける。<br><br>
     * 
     * <b>1.PDF変換、XML変換</b><br>
     * PdfConvertクラスのshinseiDataConvert(UserInfo, ShinseiDataPk)メソッドを呼ぶ。<br>
     * 引数に第一引数userInfo、第二引数shinseiDataPkを渡す。<br><br>
     * 
     * 　PdfConvertクラスのshinseiDataConvert(UserInfo, ShinseiDataPk)メソッド<br>
     * 　　申請データ情報、添付ファイル情報よりIODファイルを作成し、申請データ管理に登録する。<br><br>
     * 
     * <b>2.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 　該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 　以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>3.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが、"01"(作成中)、"02"(申請書未確認)以外のとき、例外をthrowする。<br><br>
     * 
     * ・重複申請チェック<br>
     * 　自クラスのcheckDuplication(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br><br>
     * 　重複申請の場合、エラーリストerrorsにエラー情報をaddし、例外をthrowする。<br><br>
     * 
     * <b>4.ステータス更新</b><br>
     * 自クラスのupdateStatus(connection, userInfo, shinseiDataPk, status)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、第二引数shinseiDataPk、statusを渡す。<br>
     * 変数status−"02"（申請書未確認）<br><br>
     * 
     * <b>5.コミット、ロールバック</b><br>
     * すべての更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo    UserInfo
     * @param shinseiDataPk ShinseiDataPk
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#convert(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public void convertApplication(UserInfo userInfo, ShinseiDataPk shinseiDataPk)
        throws NoDataFoundException, ApplicationException {

        //-----申請者IDで排他制御をかける-----
        synchronized(userInfo.getShinseishaInfo().getShinseishaId().intern())
        {
            //===== PDF変換サービスメソッド呼び出し =====
            IPdfConvert pdfConvert = new PdfConvert();
            pdfConvert.shinseiDataConvert(userInfo, shinseiDataPk);        //内部でXML変換も同時に行う
            
            //===== 申請ステータス更新 =====
            Connection   connection  = null;
            boolean     success     = false;
            try {
            
                //DBコネクションの取得
                connection = DatabaseUtil.getConnection();
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                            
                //更新ステータス「申請書未確認」
                String status = StatusCode.STATUS_SHINSEISHO_MIKAKUNIN;
                
                //排他制御のため既存データを取得する
                ShinseiDataInfo existInfo = null;
                try{
                    existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
                }catch(NoDataFoundException e){
                    throw e;
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "申請書管理データ排他取得中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4004"),
                        e);
                }
    
                //---申請データ削除フラグチェック---
                String delFlag = existInfo.getDelFlg(); 
                if(FLAG_APPLICATION_DELETE.equals(delFlag))
                {
                    throw new ApplicationException(
                        "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                        new ErrorInfo("errors.9001"));
                }            
                //---申請データステータスチェック---
                String jyokyoId = existInfo.getJokyoId();
                
                //---作成中、申請書未確認以外の場合はエラー
                if( !(StatusCode.STATUS_SAKUSEITHU.equals(jyokyoId)) &&
                     !(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN.equals(jyokyoId))
                ) {               
                    throw new ApplicationException(
                        "当該申請データはファイル変換可能なステータスではありません。SystemNo="
                        + shinseiDataPk.getSystemNo(),
                        new ErrorInfo("errors.9004"));
                }            

                //重複申請チェック
                if(!checkDuplication(connection, userInfo, existInfo)){
                    String msg = "申請書データ形式チェックで検証エラーとなりました。";
                    List errors = new ArrayList();
                    errors.add(new ErrorInfo("errors.9005"));
                    throw new ValidationException(msg, errors);
                }
    
                //---ステータス更新---
                
// 2007/02/03 張志男　追加ここから
                /** ログ （更新前） */
                statusLog.info( " 応募情報PDF変換前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                        + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + ", 整理番号 : " + existInfo.getUketukeNo() + " , 更新前申請状況ID : " + existInfo.getJokyoId() );
// 2007/02/03　張志男　追加ここまで
                
                try {
                    updateStatus(connection, userInfo, shinseiDataPk, status);
                    success = true;
                } catch (ApplicationException e) {
                    throw new ApplicationException(
                        "申請ステータス更新中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                } finally {
                    try {
                        if (success) {
                            DatabaseUtil.commit(connection);
                            
// 2007/02/03 張志男　追加ここから
                            /** ログ （更新後） */
                            statusLog.info( " 応募情報PDF変換後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + ", 整理番号 : " + existInfo.getUketukeNo() + " , 更新後申請状況ID : " + status );
// 2007/02/03　張志男　追加ここまで
                            
                        } else {
                            DatabaseUtil.rollback(connection);
                            
//  2007/02/03 張志男　追加ここから
                            /** ログ （更新失敗） */
                            statusLog.info( " 応募情報PDF変換失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + ", 整理番号 : " + existInfo.getUketukeNo() );
// 2007/02/03　張志男　追加ここまで
                            
                        }
                    } catch (TransactionException e) {
                        throw new ApplicationException(
                            "申請ステータスDB更新中にエラーが発生しました。",
                            new ErrorInfo("errors.4001"),
                            e);
                    }                
                }
    
            } finally {
                DatabaseUtil.closeConnection(connection);
            }
        }
    }

    /**
     * 申請情報を削除.<br><br>
     * 
     * 申請情報を論理削除する。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 　該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 　以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが、"01"(作成中)、"02"(申請書未確認)、"03"(所属機関受付中)、"05"(所属機関却下)以外のとき、例外をthrowする。<br><br>
     * 
     * <b>3.申請情報を削除</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *             -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の削除<br>
     * 　(1)のチェックで参照可能データであれば、論理削除を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI        -- 申請データ管理テーブル
     * SET
     *     DEL_FLG = 1            -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?        -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>4.コミット、ロールバック</b><br>
     * すべての更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#delete(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataInfo)
     */
    public void deleteApplication(UserInfo userInfo, ShinseiDataPk shinseiDataPk)
            throws NoDataFoundException, ApplicationException {    

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag))
            {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();
            //---作成中、申請書未確認、所属機関受付中、所属機関却下以外の場合はエラー
            if( !(StatusCode.STATUS_SAKUSEITHU.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN.equals(jyokyoId)) &&
                  !(StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU.equals(jyokyoId)) && 
                   !(StatusCode.STATUS_SHOZOKUKIKAN_KYAKKA.equals(jyokyoId)) &&
// 2006/07/11 dyh add start
                   !(StatusCode.STATUS_RYOUIKIDAIHYOU_KYAKKA.equals(jyokyoId)) &&
// 2006/07/11 dyh add end
                    //2005/8/18 修正依頼も削除可能になる
                    !(StatusCode.STATUS_GAKUSIN_SHORITYU.equals(jyokyoId) && 
                      StatusCode.SAISHINSEI_FLG_SAISHINSEITYU.equals(existInfo.getSaishinseiFlg())) )
            {
                throw new ApplicationException(
                    "当該申請データは削除可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9008"));
            }            
            
            //---削除フラグ更新---
            
// 2007/02/05 張志男　追加ここから
            /** ログ（削除前） */
            statusLog.info( " 応募情報削除前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 整理番号 : " +  existInfo.getUketukeNo() + " , 削除前申請状況ID : " + existInfo.getJokyoId() );
// 2007/02/05　張志男　追加ここまで

            
            try {
                dao.deleteFlagShinseiDataInfo(connection, shinseiDataPk);
                success = true;
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請ステータス更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請ステータス更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                        
//  2007/02/05 張志男　追加ここから
                        /** ログ（削除後） */
                        statusLog.info( " 応募情報削除後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 整理番号 : " +  existInfo.getUketukeNo() + " , 削除後申請状況ID : " + existInfo.getJokyoId() );
//  2007/02/05　張志男　追加ここまで
                    } else {
                        DatabaseUtil.rollback(connection);
                        
//  2007/02/05 張志男　追加ここから
                        /** ログ（削除失敗） */
                        statusLog.info( " 応募情報削除失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 整理番号 : " +  existInfo.getUketukeNo());
//  2007/02/05　張志男　追加ここまで
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請ステータスDB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }    

    /**
     * PDFファイルリソース取得.<br><br>
     * 
     * PdfConvertクラスのgetShinseiFileResource(userInfo, shinseiDataPk)メソッドを呼び、申請情報よりPDFファイルを作成する。<br>
     * 引数に第一引数UserInfo、第二引数ShinseiDataPkを渡す。<br><br>
     * 
     * 作成されたPDFファイルリソースを返却する。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return (FileResource)
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#getPdfFileRes(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public FileResource getPdfFileRes(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk)
            throws ApplicationException {

        //===== PDF変換サービスメソッド呼び出し =====
        IPdfConvert pdfConvert = new PdfConvert();
        return pdfConvert.getShinseiFileResource(userInfo, shinseiDataPk);        
    }
    
    /**
     * 申請の受付.<br><br>
     * 
     * 申請ステータスを"所属機関受付中"に更新し、メールを送信する。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 　該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 　以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"02"(申請書未確認)以外のとき、例外をthrowする。<br><br>
     * 
     * ・学振受付期間チェック<br>
     * 　再申請フラグが"01"(再申請中)以外のとき、以下のチェックを行う。<br><br>
     * 
     * 　自クラスのcheckGakusinUketukeKikan(UserInfo, ShinseiDataInfo)メソッドを呼び、受付期間チェックを行う。<br>
     * 　引数に第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br>
     * 　学振受付期間（終了）を過ぎている場合、例外をthrowする。<br><br>
     * 
     * <b>3.ステータス更新</b><br>
     * 自クラスのupdateStatus(connection, userInfo, shinseiDataPk, status)メソッドを呼ぶ。<br>
     * 引数にconnection、第一引数userInfo、第二引数shinseiDataPk、statusを渡す。<br>
     * 変数status−"03"（所属機関受付中）<br><br>
     * 
     * <b>4.コミット、ロールバック</b><br>
     * すべての更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * <b>5.メール送信</b><br>
     * (1)メール宛先情報取得を取得<br>
     * 　1.で取得した申請情報から、代表者の所属機関コードを取得する。<br>
     * 　ShozokuMaintenanceクラスのshozokuMainte.searchShozokuInfo(UserInfo,String)メソッドを呼び、所属機関担当者情報(List)を取得する。<br>
     *　 引数に第一引数userInfo、所属機関コードを渡す。<br><br>
     * 
     * 　所属担当者情報が取得できなかった場合、ログにエラー情報を出力しreturn。<br><br>
     * 
     * 　所属機関担当者情報から１人目のメールアドレスを取得し、変数toに代入する。<br>
     * 　(担当者Email1に対してのみメールを送信する)<br><br>
     * 
     * (2)メール本文ファイルの読み込み<br>
     * 　リテラルCONTENT_SHINSEISHO_KAKUNIN_KANRYOの値からファイルパスを作成する。<br>
     * 　CONTENT_SHINSEISHO_KAKUNIN_KANRYOの値：<br>
     * 　　　${shinsei_path}/settings/mail/shinseisho_kakunin_kanryo.txt<br><br>
     * 
     * 　FileUtilクラスのreadFile()メソッドを呼び、ファイルリソースを取得する。<br>
     * 　引数には作成したファイルパスを渡す。<br><br>
     * 
     * 　取得したファイルリソースのバイナリを文字列に変換し、変数contentに代入する。<br><br>
     * 
     * 　例外が発生したとき、ログにエラー情報を出力しreturn。<br><br>
     * 
     * (3)メール本文ファイルの動的項目変更<br>
     * 　1.で取得した申請情報から、事業名、課題名、申請者名−姓、申請者名−名、申請番号を取得し配列paramに格納する。<br><br>
     * 
     * 　MessageFormatクラスのformat()メソッドにメッセージ本文content、配列paramを渡しフォーマットする。<br><br>
     * 
     * (4)メールの送信<br>
     * 　SendMailerクラスのsendMail()メソッドを呼び、メールを送信する。<br>
     * 　引数にリテラルFROM_ADDRESS(差出人)、変数to(TO)、null(CC)、null(BCC)、
     * リテラルSUBJECT_SHINSEISHO_KAKUNIN_KANRYO(件名)、変数content(本文)を渡す。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#confirmComplete(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public void confirmComplete(UserInfo userInfo, ShinseiDataPk shinseiDataPk)
            throws NoDataFoundException,ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            
            //宮　2006/06/21　から
            String jigyoCd=existInfo.getJigyoCd();   
            try{
                if (!StringUtil.isBlank(jigyoCd)
                        && IJigyoCd.JIGYO_CD_TOKUTEI_SINKI.equals(jigyoCd)){
                    RyoikiKeikakushoInfoDao ryoikikeikakushoInfoDao = new RyoikiKeikakushoInfoDao(userInfo);
                    ryoikikeikakushoInfoDao.existRyoikiInfoCount(connection,
                                                                 existInfo);
                }
            }catch (DataAccessException e){
                throw new ApplicationException("DBエラーが発生しました。",
                                               new ErrorInfo("errors.4001"), e);
            }
            //宮　ここまで

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();

            //---申請書未確認以外の場合はエラー
            if( !(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN.equals(jyokyoId))) {
                throw new ApplicationException(
                    "当該申請データは確認完了可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9009"));
            }            
            
            //---学振受付期間チェック（再申請中の場合はチェックしない）---
            if(!StatusCode.SAISHINSEI_FLG_SAISHINSEITYU.equals(existInfo.getSaishinseiFlg())){
                if(!checkGakusinUketukeKikan(userInfo, existInfo)){
                    throw new ApplicationException(
                        "当該事業は学振受付期間を過ぎています。SystemNo="
                        + shinseiDataPk.getSystemNo(),
                        new ErrorInfo("errors.9007"));
                }
            }
            
//2007/03/02 苗　追加ここから
            if (checkSinseiKikanKakutei(userInfo, existInfo)) {
                throw new ApplicationException("当該事業は申請機関確定済みです。SystemNo="
                        + shinseiDataPk.getSystemNo(),
                        new ErrorInfo("errors.6004"));
            }
//2007/03/02　苗　追加ここまで            

//2007/02/05　苗    追加ここから
            //受付番号の重複チェック
            String systemNo = existInfo.getSystemNo();
            if (!checkUketukeNumber(connection, userInfo, existInfo)) {
                //ログ出力
                regetShinseiLog.info(existInfo);
                //新しい受付番号を採番するため、一旦空にする。
                existInfo.setUketukeNo(null);
            }

            //既存データに申請番号が採番されていない場合は採番する
            if (StringUtil.isBlank(existInfo.getUketukeNo())) {
                String uketukeNo = getUketukeNumber(connection, userInfo, existInfo);
                existInfo.setUketukeNo(uketukeNo);
                existInfo.setSystemNo(systemNo);
                existInfo.setDelFlg("0");
            }
//2006/02/05　苗　追加ここまで

            //---ステータス更新---
            
// 2007/02/05 張志男　追加ここから
            /** ログ（更新前） */
            statusLog.info( " 応募情報確認完了前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 整理番号 : " + existInfo.getUketukeNo()
                    + " , 更新前申請状況ID : " + existInfo.getJokyoId() + " , 更新前再申請フラグ : " + existInfo.getSaishinseiFlg() );
// 2007/02/05　張志男　追加ここまで
            
            try {
//2007/02/05　苗　修正ここから                
//              String status = StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU;
//              int edition = existInfo.getKadaiInfo().getEdition();
//              edition++;
//              //2006/07/24 add start
//              Date sakuseiDate=new Date();
//              //2006/07/24 add end
                existInfo.setJokyoId(StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU);
                int edition = existInfo.getKadaiInfo().getEdition();
                existInfo.getKadaiInfo().setEdition(++edition);
                existInfo.setSaiyoDate(new Date());
//2007/02/05　苗　修正ここまで             
//2006/07/21 苗　追加ここから
                //----------------------------
                //保存ファイルの作成(PDF)
                //----------------------------
                File iodFile = new File(MessageFormat.format(SHINSEI_PDF_FOLDER,
                        new Object[] {existInfo.getJigyoId(),existInfo.getSystemNo()}));
                if(log.isDebugEnabled()){
                    log.debug("申請データPDF変換ファイルは'" + iodFile + "'です。");
                }

                //----------------------------
                //保存ファイルの作成(XML)
                //----------------------------
                File xmlFile = new File(MessageFormat.format(SHINSEI_XML_FOLDER,
                        new Object[] {existInfo.getJigyoId(),existInfo.getSystemNo()}));
                if(log.isDebugEnabled()){
                    log.debug("申請データXML変換ファイルは'" + xmlFile + "'です。");
                }
//2007/02/05 苗　修正ここから 
                existInfo.setXmlPath(xmlFile.getAbsolutePath());
                existInfo.setPdfPath(iodFile.getAbsolutePath());
//                updateShinseiDataInfo(connection, userInfo, shinseiDataPk, status, edition, sakuseiDate, iodFile, xmlFile);
                updateShinseiDataInfo(connection, userInfo, existInfo);
//2007/02/05　苗　修正ここまで                
                IPdfConvert pdfConvert = new PdfConvert();
                pdfConvert.shinseiDataConvertForConfirm(userInfo, connection, shinseiDataPk, iodFile, xmlFile); // 内部でXML変換も同時に行う
                
//2006/07/21　苗　追加ここまで                    
                success = true;
            }catch (DataAccessException e) {
                throw new ApplicationException(
                                            "申請ステータス更新中にDBエラーが発生しました。",
                                            new ErrorInfo("errors.4001"),
                                            e);
            }catch (ApplicationException e) {
//2007/02/14 苗　追加ここから
                if ("errors.9031".equals(e.getErrorCode())){
                    throw e;
                } else {        
//2007/02/14　苗　追加ここまで                
                    throw new ApplicationException(
                        "申請ステータス更新中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                        
//  2007/02/05 張志男　追加ここから
                        /** ログ（更新後） */
                        statusLog.info( " 応募情報確認完了後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 整理番号 : " + existInfo.getUketukeNo()
                                + " , 更新後申請状況ID : " + StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU + " , 更新後再申請フラグ : " + existInfo.getSaishinseiFlg() );
//  2007/02/05　張志男　追加ここまで
                    } else {
                        DatabaseUtil.rollback(connection);
                        
//  2007/02/05 張志男　追加ここから
                        /** ログ（更新失敗） */
                        statusLog.info( " 応募情報確認完了失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 整理番号 : " + existInfo.getUketukeNo() );
//  2007/02/05　張志男　追加ここまで
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請ステータスDB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
            
            //2005/04/11 修正　ここから----------
            //理由：基盤申請の場合はメールを送信しない仕様となったため
                    
            //---------------
            // メール送信
            //---------------
            
            //2005.09.22 iso 学創・特推の時のみメールが飛ぶように設定変更
            KadaiInfo kadaiInfo = existInfo.getKadaiInfo();
//            if(kadaiInfo!=null&&!IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(kadaiInfo.getJigyoKubun())){
            if(kadaiInfo!=null
                    && (IJigyoKubun.JIGYO_KUBUN_GAKUSOU_HIKOUBO.equals(kadaiInfo.getJigyoKubun())
                        || IJigyoKubun.JIGYO_KUBUN_GAKUSOU_KOUBO.equals(kadaiInfo.getJigyoKubun())
                        || IJigyoKubun.JIGYO_KUBUN_TOKUSUI.equals(kadaiInfo.getJigyoKubun())
// 2006/06/29 zjp 削除ここから                            
//2006/06/01　  追加ここから
//                        || IJigyoCd.JIGYO_CD_KIBAN_S.equals(existInfo.getJigyoCd())
//                        || IJigyoCd.JIGYO_CD_KIBAN_A_IPPAN.equals(existInfo.getJigyoCd())
//                        || IJigyoCd.JIGYO_CD_KIBAN_B_IPPAN.equals(existInfo.getJigyoCd())
//                        || IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI.equals(existInfo.getJigyoCd())
//                        || IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI.equals(existInfo.getJigyoCd())
//苗　追加ここまで  
// 2006/06/29 zjp 削除ここまで    
//宮　2006/06/21　ここから
                        || IJigyoCd.JIGYO_CD_TOKUTEI_SINKI.equals(existInfo.getJigyoCd())
//宮　ここまで                         
                    )){

                //-----メール差出人情報取得
                String to = null;
                try{
                    //当該申請者の所属機関担当者情報を取得する
                    String shozokuCd = existInfo.getDaihyouInfo().getShozokuCd();
                    IShozokuMaintenance shozokuMainte = new ShozokuMaintenance();
                    List shozokuTantoList = shozokuMainte.searchShozokuInfo(userInfo, 
                                                                            shozokuCd);
                    //所属担当者情報が取得できなかった場合
                    if(shozokuTantoList == null || shozokuTantoList.size() == 0){
                        log.warn("所属機関担当者情報を取得できませんでした。所属コード:"+shozokuCd);
                        return;
                    }
                    
                    //リストの１人目の情報を取得する（担当者Email1に対してのみ送信する）
                    to = (String)( (Map)shozokuTantoList.get(0) ).get("TANTO_EMAIL");
                    
                }catch(ApplicationException e){
                    log.warn("メール宛先情報取得に失敗しました。", e);
                    return;
                }
                
// 2006/06/29 zjp 追加ここから                
                //研究種目名
                String jigyoName = "平成" + existInfo.getNendo() + "年度 ";

                //回数チェック
                String kaishu = existInfo.getKaisu();
                if (kaishu != null && Integer.parseInt(kaishu) > 1){
                    jigyoName = jigyoName + "第" + kaishu + "回 ";
                }
                
                jigyoName = jigyoName + existInfo.getJigyoName();               
// 2006/06/29 zjp 追加ここまで  
                
                //-----メール本文ファイルの読み込み
                String content = null;
                try{
                    File contentFile = new File(CONTENT_SHINSEISHO_KAKUNIN_KANRYO);
                    FileResource fileRes = FileUtil.readFile(contentFile);
                    content = new String(fileRes.getBinary());
                }catch(FileNotFoundException e){
                    log.warn("メール本文ファイルが見つかりませんでした。", e);
                    return;
                }catch(IOException e){
                    log.warn("メール本文ファイル読み込み時にエラーが発生しました。",e);
                    return;
                }
                
                //-----メール本文ファイルの動的項目変更
                String[] param = new String[]{
                    jigyoName,                                         //事業名
                    existInfo.getKadaiInfo().getKadaiNameKanji(),     //課題名
                    existInfo.getDaihyouInfo().getNameKanjiSei(),     //申請者名−姓
                    existInfo.getDaihyouInfo().getNameKanjiMei(),     //申請者名−名
                    existInfo.getUketukeNo()                        //申請番号
                };
                content = MessageFormat.format(content, param);
                
                //-----メール送信
                try{
                    SendMailer mailer = new SendMailer(SMTP_SERVER_ADDRESS);
                    mailer.sendMail(FROM_ADDRESS,                        //差出人
                                    to,                                    //to
                                    null,                                //cc
                                    null,                                //bcc
                                    SUBJECT_SHINSEISHO_KAKUNIN_KANRYO,    //件名
                                    content);                            //本文
                }catch(Exception e){
                    log.warn("メール送信に失敗しました。",e);
                    return;
                }
            }
            //修正　ここまで----------

        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }    

    /**
     * 申請の承認.<br><br>
     * 
     * 申請ステータスを"学振処理中"に更新し、メールを送信する。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3                -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"03"(所属機関受付中)以外のとき、例外をthrowする。<br><br>
     * 
     * ・学振受付期間チェック<br>
     * 　再申請フラグが"01"(再申請中)以外のとき、以下のチェックを行う。<br><br>
     * 
     * 　自クラスのcheckGakusinUketukeKikan(UserInfo, ShinseiDataInfo)メソッドを呼び、受付期間チェックを行う。<br>
     * 　引数に第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br>
     * 　学振受付期間（終了）を過ぎている場合、例外をthrowする。<br><br>
     * 
     * <b>3.PDFファイル</b><br>
     * (1)PDFファイル作成<br>
     * 　PdfconvertクラスのgetShinseiFileResourceWithoutLock(UserInfo, ShinseiDataPk)メソッドを呼ぶ。<br>
     * 　このメソッドにて、申請データよりPDFファイルを作成し、ファイルリソースを返却する。<br>
     * 　引数に第一引数userInfo、第二引数shinseiDataPkを渡す。<br><br>
     * 
     * 　申請データが見つからないとき、変換に失敗したときは、それぞれに例外をthrowする。<br><br>
     * 
     * (2)ファイル名生成<br>
     * 　PDFファイル名を設定する。<br>
     * 　　継続：系等の区分コード-所属機関コード-[0]-課題番号-申請者ID<br>
     * 　　新規：系等の区分コード-所属機関コード-[1]-整理番号-申請者ID<br><br>
     * 
     * 　(例)系等の区分コード：1　所属機関コード：10101　課題番号：00000012　申請者ID:041000100001A<br>
     * 　　　の継続のとき<br>
     * 　　　　PDFファイル名：1-10101-0-00000012-041000100001A<br><br>
     * 
     * 　　　系等の区分コード：1　所属機関コード：10101　整理番号：1001　申請者ID:041000100001B<br>
     * 　　　の新規のとき<br>
     * 　　　　PDFファイル名：1-10101-0-1001-041000100001B<br><br>
     * 
     * (3)ファイルパス生成<br>
     * 　配列pathInfoに事業IDと(2)で生成したファイル名を格納する。<br><br>
     * 
     * 　リテラルSHINSEI_PDF_NO_PASSWORDのパターンに従い、配列pathInfoをMessageFormatクラスのformat()メソッドを用いてフォーマットし、ファイルパスを生成する。<br/><br/>
     * 
     * 　(例)ファイルパターン：${shinsei_path}/data/pdf/{0}/{1}.pdf<br>
     * 　　　事業ID：04000011　PDFファイル名：1-10101-0-00000012-041000100001A　のとき<br>
     * 　　　ファイルパス：${shinsei_path}/data/pdf/04000011/1-10101-0-00000012-041000100001A.pdf<br>
     * 　　　　※${shinsei_path}の値はApplicationSettings.propertiesに設定<br><br>
     * 
     * (4)ファイル書き込み<br>
     * 　JigyoKanriMaintenanceクラスのwriteFile(File, FileResource, boolean)メソッドにてファイルを書き込む。<br><br>
     * 　引数に(3)で生成したファイルパス、(1)で作成したPDFファイル、trueを渡す。<br><br>
     * 
     * <b>4.更新データのセット</b><br>
     * 1.で取得の申請情報existInfoの再申請フラグが"1"（再申請中）のとき、再申請フラグに"2"（再申請済み）をセットする。<br><br>
     * 
     * 状況IDに"04"(学振処理中)をセットする。<br><br>
     * 
     * 所属機関承認日に本日日付(WASのシステム日付)をセットする。<br><br>
     * 
     * <b>5.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?                -- 申請番号
     *     ,JIGYO_ID = ?                    -- 事業ID
     *     ,NENDO = ?                        -- 年度
     *     ,KAISU = ?                        -- 回数
     *     ,JIGYO_NAME = ?                -- 事業名
     *     ,SHINSEISHA_ID = ?                -- 申請者ID
     *     ,SAKUSEI_DATE = ?                -- 申請書作成日
     *     ,SHONIN_DATE = ?                -- 所属機関承認日
     *     ,JYURI_DATE = ?                -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?                -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?                -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                    -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?                -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?                -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                        -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                        -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?            -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?                -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?                -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                    -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?                -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?            -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?                -- 細目2
     *     ,KANTEN_NO = ?                    -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?                -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?            -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                    -- XMLの格納パス
     *     ,PDF_PATH = ?                    -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>6.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * <b>7.メール送信</b><br>
     * (1)メール宛先情報取得を取得<br>
     * 　1.で取得した申請情報から、代表者の所属機関コードを取得する。<br>
     * 　ShozokuMaintenanceクラスのshozokuMainte.searchShozokuInfo(UserInfo,String)メソッドを呼び、所属機関担当者情報(List)を取得する。<br>
     *　 引数に第一引数userInfo、所属機関コードを渡す。<br><br>
     * 
     * 　所属担当者情報が取得できなかった場合、ログにエラー情報を出力しreturn。<br><br>
     * 
     * 　所属機関担当者情報から１人目のメールアドレスを取得し、変数toに代入する。<br>
     * 　(担当者Email1に対してのみメールを送信する)<br><br>
     * 
     * (2)メール本文ファイルの読み込み<br>
     * 　リテラルCONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONINの値からファイルパスを作成する。<br>
     * 　CONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONINの値：<br>
     * 　　　${shinsei_path}/settings/mail/shinseisho_shozokukikan_shonin.txt<br><br>
     * 
     * 　FileUtilクラスのreadFile()メソッドを呼び、ファイルリソースを取得する。<br>
     * 　引数には作成したファイルパスを渡す。<br><br>
     * 
     * 　取得したファイルリソースのバイナリを文字列に変換し、変数contentに代入する。<br><br>
     * 
     * 　例外が発生したとき、ログにエラー情報を出力しreturn。<br><br>
     * 
     * (3)メール本文ファイルの動的項目変更<br>
     * 　1.で取得した申請情報から、事業名、課題名、申請者名−姓、申請者名−名、申請番号、所属機関承認日を取得し配列paramに格納する。<br>
     * 　　※所属機関承認日については、SimpleDateFormatで"yyyy年MM月dd日"に変換して格納。<br><br>
     * 
     * 　MessageFormatクラスのformat()メソッドにメッセージ本文content、配列paramを渡しフォーマットする。<br><br>
     * 
     * (4)メールの送信<br>
     * 　SendMailerクラスのsendMail()メソッドを呼び、メールを送信する。<br>
     * 　引数にリテラルFROM_ADDRESS(差出人)、変数to(TO)、null(CC)、null(BCC)、
     * リテラルSUBJECT_SHINSEISHO_KAKUNIN_KANRYO(件名)、変数content(本文)を渡す。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#recognizeApplication(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public void recognizeApplication(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag))
            {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();
            //---所属機関受付中以外の場合はエラー
            if( !(StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU.equals(jyokyoId)) )
            {
                throw new ApplicationException(
                    "当該申請データは承認可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9010"));
            }            
            
            //2004.11.29 iso 期限の切れた修正申請が承認できないバグを修正
            //---学振受付期間チェック（再申請中の場合はチェックしない）---
            if(!StatusCode.SAISHINSEI_FLG_SAISHINSEITYU.equals(existInfo.getSaishinseiFlg())) {
                if(!checkGakusinUketukeKikan(userInfo, existInfo)){
                    throw new ApplicationException(
                        "当該事業は学振受付期間を過ぎています。SystemNo="
                        + shinseiDataPk.getSystemNo(),
                        new ErrorInfo("errors.9007"));
                }
            }
            
            try {
                PdfConvert pdfconvert = new PdfConvert();
                FileResource fileResource
                    = pdfconvert.getShinseiFileResourceWithoutLock(userInfo, shinseiDataPk);
                
                //新規(DBでは1)・継続(DBでは2)では、ソート順が逆になるので継続：0に置換
                //継続：ファイル名に課題番号を使用
                //新規：ファイル名に整理番号を使用
                String  shinseiKubun = existInfo.getShinseiKubun();
                String    nameNo4th = "";
                if(shinseiKubun != null && shinseiKubun.equals("2")) {
                    shinseiKubun = "0";
                    nameNo4th = existInfo.getKadaiNoKeizoku();
                } else if(shinseiKubun == null
                        || (shinseiKubun != null && shinseiKubun.equals("1"))) {
                    shinseiKubun = "1";
                    nameNo4th = existInfo.getUketukeNo().substring(6);
                }

                //PDFファイル名を設定
                //学創は、新規と同じ命名規則
                //系等の区分(番号)-所属機関コード-継続(0)-課題番号-申請者ID
                //系等の区分(番号)-所属機関コード-新規(1)-整理番号-申請者ID
                String PdfName = existInfo.getKadaiInfo().getKeiNameNo()
                                + "-" + existInfo.getDaihyouInfo().getShozokuCd()
                                + "-" + shinseiKubun
                                + "-" + nameNo4th
                                + "-" + existInfo.getShinseishaId();
                
                String[] pathInfo = new String[]{existInfo.getJigyoId(), PdfName};
                String   shinseiPath = MessageFormat.format(SHINSEI_PDF_NO_PASSWORD, pathInfo);
                File     shinseiFile = new File(shinseiPath);
                
                JigyoKanriMaintenance jigyoKanriMaintenance = new JigyoKanriMaintenance();
                jigyoKanriMaintenance.writeFile(shinseiFile, fileResource, true);
                
            } catch(NoDataFoundException e) {
                throw new ApplicationException(
                    "申請データが見つかりません。",
                    new ErrorInfo("errors.4000"),
                    e);
            } catch(ConvertException e) {
                throw new ApplicationException(
                    "PDF変換中にエラーが発生しました。",
                    new ErrorInfo("errors.8000"),
                    e);
            }
            
            //---DB更新---
            try {
                //更新データをセットする
                if(existInfo.getSaishinseiFlg().equals(StatusCode.SAISHINSEI_FLG_SAISHINSEITYU)) {    //再申請中なら再申請済みへ
                    existInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_SAISHINSEIZUMI);                //再申請フラグ
                }
                existInfo.setJokyoId(StatusCode.STATUS_GAKUSIN_SHORITYU);                                //申請状況
                existInfo.setShoninDate(new Date());                                                        //承認日
                dao.updateShinseiDataInfo(connection, existInfo, true);
                success = true;
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                    } else {
                        DatabaseUtil.rollback(connection);
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }

            //---------------
            // メール送信
            //---------------

            //-----メール差出人情報取得
            String to = null;
            try{
                //当該申請者の所属機関担当者情報を取得する
                String shozokuCd = existInfo.getDaihyouInfo().getShozokuCd();
                IShozokuMaintenance shozokuMainte = new ShozokuMaintenance();
                List shozokuTantoList = shozokuMainte.searchShozokuInfo(userInfo, 
                                                                        shozokuCd);
                //所属担当者情報が取得できなかった場合
                if(shozokuTantoList == null || shozokuTantoList.size() == 0){
                    log.warn("所属機関担当者情報を取得できませんでした。所属コード:"+shozokuCd);
                    return;
                }
                
                //リストの１人目の情報を取得する（担当者Email1に対してのみ送信する）
                to = (String)( (Map)shozokuTantoList.get(0) ).get("TANTO_EMAIL");
                
            }catch(ApplicationException e){
                log.warn("メール宛先情報取得に失敗しました。",e);
                return;
            }

            //-----メール本文ファイルの読み込み
            String content = null;
            try{
                File contentFile = new File(CONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONIN);
                FileResource fileRes = FileUtil.readFile(contentFile);
                content = new String(fileRes.getBinary());
            }catch(FileNotFoundException e){
                log.warn("メール本文ファイルが見つかりませんでした。",e);
                return;
            }catch(IOException e){
                log.warn("メール本文ファイル読み込み時にエラーが発生しました。",e);
                return;
            }

            //-----メール本文ファイルの動的項目変更
            String[] param = new String[]{
                existInfo.getJigyoName(),                                                     //事業名
                existInfo.getKadaiInfo().getKadaiNameKanji(),                                 //課題名
                existInfo.getDaihyouInfo().getNameKanjiSei(),                                 //申請者名−姓
                existInfo.getDaihyouInfo().getNameKanjiMei(),                                 //申請者名−名
                existInfo.getUketukeNo(),                                                    //申請番号
                new SimpleDateFormat("yyyy年MM月dd日").format(existInfo.getShoninDate())    //所属機関承認日
            };
            content = MessageFormat.format(content, param);
            
            //-----メール送信
            try{
                SendMailer mailer = new SendMailer(SMTP_SERVER_ADDRESS);
                mailer.sendMail(FROM_ADDRESS,                            //差出人
                                to,                                        //to
                                null,                                    //cc
                                null,                                    //bcc
                                SUBJECT_SHINSEISHO_SHOZOKUKIKAN_SHONIN,    //件名
                                content);                                //本文
            }catch(Exception e){
                log.warn("メール送信に失敗しました。",e);
                return;
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }    

    /**
     * 申請の却下.<br><br>
     * 
     * 申請ステータスを"所属機関却下"に更新する。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"03"(所属機関受付中)以外のとき、例外をthrowする。<br><br>

     * <b>3.更新データのセット</b><br>
     * 状況IDに"05"(所属機関却下)をセットする。<br><br>
     * 
     * 所属機関承認日にnullをセットする。(却下時は承認日を消す)<br><br>
     * 
     * <b>4.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?                -- 申請番号
     *     ,JIGYO_ID = ?                    -- 事業ID
     *     ,NENDO = ?                        -- 年度
     *     ,KAISU = ?                        -- 回数
     *     ,JIGYO_NAME = ?                -- 事業名
     *     ,SHINSEISHA_ID = ?                -- 申請者ID
     *     ,SAKUSEI_DATE = ?                -- 申請書作成日
     *     ,SHONIN_DATE = ?                -- 所属機関承認日
     *     ,JYURI_DATE = ?                -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?            -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?            -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?            -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                    -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                    -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?        -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?            -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?            -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?            -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?            -- 細目2
     *     ,KANTEN_NO = ?                -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?            -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>5.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#rejectApplication(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public void rejectApplication(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag))
            {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();
            //---所属機関受付中以外の場合はエラー
            if( !(StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU.equals(jyokyoId)) )
            {
                throw new ApplicationException(
                    "当該申請データは却下可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9011"));
            }            

            //却下のときは学振受付期間をチェックしない
            //---学振受付期間チェック---
            //if(!checkGakusinUketukeKikan(userInfo, existInfo)){
            //    throw new ApplicationException(
            //        "当該事業は学振受付期間を過ぎています。SystemNo="
            //        + shinseiDataPk.getSystemNo(),
            //        new ErrorInfo("errors.9007"));
            //}

            //---DB更新---
            
//  2007/02/05 張志男　追加ここから
            /** ログ（更新前） */
            statusLog.info( " 応募情報却下前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 更新前申請状況ID : " + existInfo.getJokyoId() );
// 2007/02/05　張志男　追加ここまで
            
            try {
                //更新データをセットする
                existInfo.setJokyoId(StatusCode.STATUS_SHOZOKUKIKAN_KYAKKA);    //申請状況
                existInfo.setShoninDate(null);                                        //却下時承認日は消す
                dao.updateShinseiDataInfo(connection, existInfo, true);
                success = true;
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新後） */
                        statusLog.info( " 応募情報却下後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() + " , 更新後申請状況ID : " + StatusCode.STATUS_SHOZOKUKIKAN_KYAKKA );
// 2007/02/05　張志男　追加ここまで
                        
                    } else {
                        DatabaseUtil.rollback(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新失敗） */
                        statusLog.info( " 応募情報却下失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() );
// 2007/02/05　張志男　追加ここまで
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 申請の受理.<br><br>
     * 
     * 申請ステータスを"学振受理"に更新する。<br><br>
     * synchronizedメソッド。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"04"(学振処理中)、"06"(学振受理)、""07"(学振不受理)以外のとき、例外をthrowする。<br><br>
     * 
     * ・重複申請チェック<br>
     * 　自クラスのcheckDuplication(Connection, UserInfo, ShinseiDataInfo)メソッドを呼ぶ。<br>
     * 　引数にconnection、第一引数userInfo、1.取得した申請情報existInfoを渡す。<br><br>
     * 　重複申請の場合、例外をthrowする。<br><br>
     * 
     * <b>3.審査結果情報の削除</b><br>
     * 審査結果情報を物理削除する。<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * DELETE FROM SHINSAKEKKA        -- 審査結果テーブル
     * WHERE
     *     SYSTEM_NO = ?            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>4.審査結果情報の登録</b><br>
     * (1)登録情報のセット<br>
     * 　1.で取得した申請情報existInfoから情報を取得し、ShinsaKekkaInfoに値をセットする。
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム番号</td><td>existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請番号</td><td>existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業区分</td><td>existInfoの変数jigyKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>審査区分</td><td>existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業ID</td><td>existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業名</td><td>existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>細目番号</td><td>existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>審査状況</td><td>0　(未完了)</td></tr>
     * </table><br>
     * 
     * (2)審査員番号、シーケンス番号<br>
     * 以下をセットする。
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">変数（日本語）</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>審査員番号</td><td>"@00000"+ 連番(1〜6)のString</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>シーケンス番号</td><td>連番(1〜6)のString</td></tr>
     * </table><br><br>
     * 
     * (3)審査員情報の登録<br>
     * 　・重複チェック
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.SHINSAIN_NO                -- 審査員番号
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SEQ_NO                    -- シーケンス番号
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSAIN_NAME_KANJI_SEI    -- 審査員名（漢字−姓）
     *     ,A.SHINSAIN_NAME_KANJI_MEI    -- 審査員名（漢字−名）
     *     ,A.NAME_KANA_SEI                -- 審査員名（フリガナ−姓）
     *     ,A.NAME_KANA_MEI                -- 審査員名（フリガナ−名）
     *     ,A.SHOZOKU_NAME                -- 審査員所属機関名
     *     ,A.BUKYOKU_NAME                -- 審査員部局名
     *     ,A.SHOKUSHU_NAME                -- 審査員職名
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.EDA_NO                    -- 枝番
     *     ,A.CHECKDIGIT                -- チェックデジット
     *     ,A.KEKKA_ABC                    -- 総合評価（ABC）
     *     ,A.KEKKA_TEN                    -- 総合評価（点数）
     *     ,A.COMMENT1                    -- コメント1
     *     ,A.COMMENT2                    -- コメント2
     *     ,A.COMMENT3                    -- コメント3
     *     ,A.COMMENT4                    -- コメント4
     *     ,A.COMMENT5                    -- コメント5
     *     ,A.COMMENT6                    -- コメント6
     *     ,A.KENKYUNAIYO                -- 研究内容
     *     ,A.KENKYUKEIKAKU                -- 研究計画
     *     ,A.TEKISETSU_KAIGAI            -- 適切性-海外
     *     ,A.TEKISETSU_KENKYU1            -- 適切性-研究（1）
     *     ,A.TEKISETSU                    -- 適切性
     *     ,A.DATO                        -- 妥当性
     *     ,A.SHINSEISHA                -- 研究代表者
     *     ,A.KENKYUBUNTANSHA            -- 研究分担者
     *     ,A.HITOGENOMU                -- ヒトゲノム
     *     ,A.TOKUTEI                    -- 特定胚
     *     ,A.HITOES                    -- ヒトES細胞
     *     ,A.KUMIKAE                    -- 遺伝子組換え実験
     *     ,A.CHIRYO                    -- 遺伝子治療臨床研究
     *     ,A.EKIGAKU                    -- 疫学研究
     *     ,A.COMMENTS                    -- コメント
     *     ,A.TENPU_PATH                -- 添付ファイル格納パス
     *     ,DECODE (
     *         NVL(A.TENPU_PATH,'null') 
     *         ,'null','FALSE'        -- 添付ファイル格納パスがNULLのとき
     *         ,      'TRUE'        -- 添付ファイル格納パスがNULL以外のとき
     *      ) TENPU_FLG                -- 添付ファイル格納フラグ
     *     ,A.SHINSA_JOKYO                -- 審査状況
     *     ,A.BIKO                        -- 備考
     * FROM
     *     SHINSAKEKKA A                -- 審査結果テーブル
     * WHERE
     *     SYSTEM_NO = ?
     *     AND SHINSAIN_NO = ?
     *     AND JIGYO_KUBUN = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数shinsaKekkaInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSAIN_NO</td><td>引数shinsaKekkaInfoの変数shinsainNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数shinsaKekkaInfoの変数jigyoKubun</td></tr>
     * </table><br><br>
     * 
     * 　　該当するデータが存在するとき、例外をthrowする。<br><br>
     * 
     * 　・審査情報の登録<br>
     * 　重複チェックにて該当データが存在しないとき、登録処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * INSERT INTO SHINSAKEKKA (
     *     A.SYSTEM_NO                -- システム受付番号
     *     ,A.UKETUKE_NO            -- 申請番号
     *     ,A.SHINSAIN_NO            -- 審査員番号
     *     ,A.JIGYO_KUBUN            -- 事業区分
     *     ,A.SEQ_NO                -- シーケンス番号
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSAIN_NAME_KANJI_SEI    -- 審査員名（漢字−姓）
     *     ,A.SHINSAIN_NAME_KANJI_MEI    -- 審査員名（漢字−名）
     *     ,A.NAME_KANA_SEI            -- 審査員名（フリガナ−姓）
     *     ,A.NAME_KANA_MEI            -- 審査員名（フリガナ−名）
     *     ,A.SHOZOKU_NAME            -- 審査員所属機関名
     *     ,A.BUKYOKU_NAME            -- 審査員部局名
     *     ,A.SHOKUSHU_NAME            -- 審査員職名
     *     ,A.JIGYO_ID                -- 事業ID
     *     ,A.JIGYO_NAME            -- 事業名
     *     ,A.BUNKASAIMOKU_CD        -- 細目番号
     *     ,A.EDA_NO                -- 枝番                
     *     ,A.CHECKDIGIT            -- チェックデジット
     *     ,A.KEKKA_ABC                -- 総合評価（ABC）
     *     ,A.KEKKA_TEN                -- 総合評価（点数）
     *     ,A.COMMENT1                -- コメント1
     *     ,A.COMMENT2                -- コメント2
     *     ,A.COMMENT3                -- コメント3
     *     ,A.COMMENT4                -- コメント4
     *     ,A.COMMENT5                -- コメント5
     *     ,A.COMMENT6                -- コメント6
     *     ,A.KENKYUNAIYO            -- 研究内容
     *     ,A.KENKYUKEIKAKU            -- 研究計画
     *     ,A.TEKISETSU_KAIGAI        -- 適切性-海外
     *     ,A.TEKISETSU_KENKYU1        -- 適切性-研究（1）
     *     ,A.TEKISETSU                -- 適切性            
     *     ,A.DATO                    -- 妥当性
     *     ,A.SHINSEISHA            -- 研究代表者
     *     ,A.KENKYUBUNTANSHA        -- 研究分担者
     *     ,A.HITOGENOMU            -- ヒトゲノム
     *     ,A.TOKUTEI                -- 特定胚
     *     ,A.HITOES                -- ヒトES細胞
     *     ,A.KUMIKAE                -- 遺伝子組換え実験
     *     ,A.CHIRYO                -- 遺伝子治療臨床研究
     *     ,A.EKIGAKU                -- 疫学研究
     *     ,A.COMMENTS                -- コメント
     *     ,TENPU_PATH                    -- 添付ファイル格納パス
     *     ,SHINSA_JOKYO                -- 審査状況
     *     ,BIKO                        -- 備考
     *  )
     * VALUES (
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,    -- 25個
     *     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
     *  )
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数shinsaKekkaInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数shinsaKekkaInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSAIN_NO</td><td>引数shinsaKekkaInfoの変数shinsainNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数shinsaKekkaInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SEQ_NO</td><td>引数shinsaKekkaInfoの変数seqNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数shinsaKekkaInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数shinsaKekkaInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数shinsaKekkaInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数shinsaKekkaInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_JOKYO</td><td>引数shinsaKekkaInfoの変数shinsaJokyo</td></tr>
     * </table>
     * 上記以外のカラムはnull。<br><br>
     * 
     * (2)〜(3)を6回繰り返す。<br><br>
     * 
     * <b>5.更新データのセット</b><br>
     * 1.で取得の申請情報existInfoの再申請フラグが"1"（再申請中）のとき、再申請フラグに"2"（再申請済み）をセットする。<br><br>
     * 
     * 申請状況に"06"(学振受理)をセットする。<br><br>
     * 
     * 受理結果に"0"(受理)をセットする。<br><br>
     * 
     * 受理結果備考に第三引数commentをセットする。<br><br>
     * 
     * 学振受理日に本日日付(WASのシステム日付)をセットする<br><br>
     * 
     * <b>6.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?                -- 申請番号
     *     ,JIGYO_ID = ?                -- 事業ID
     *     ,NENDO = ?                    -- 年度
     *     ,KAISU = ?                    -- 回数
     *     ,JIGYO_NAME = ?                -- 事業名
     *     ,SHINSEISHA_ID = ?            -- 申請者ID
     *     ,SAKUSEI_DATE = ?            -- 申請書作成日
     *     ,SHONIN_DATE = ?                -- 所属機関承認日
     *     ,JYURI_DATE = ?                -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?            -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?            -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?            -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                    -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                    -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?        -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?            -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?            -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?            -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?            -- 細目2
     *     ,KANTEN_NO = ?                -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?            -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saiShinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>7.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @param comment            受理結果備考(String)
     * @param seiriNo            整理番号
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#registShinseiJuri(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk, java.lang.String)
     */
    public synchronized void registShinseiJuri(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk,
            String jigyoCd,
            String comment,
            String seiriNo)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();

            //---学振処理中、学振受理、学振不受理以外の場合はエラー
            if( !(StatusCode.STATUS_GAKUSIN_SHORITYU.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_GAKUSIN_JYURI.equals(jyokyoId)) &&
                  !(StatusCode.STATUS_GAKUSIN_FUJYURI.equals(jyokyoId))) {
                throw new ApplicationException(
                    "当該申請データは受理可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9015"));
            }            
            //---受理登録時の重複申請チェック---
            if(CHECK_DUPLICACATION_FLAG){
                if(!checkDuplicationForJuri(connection, userInfo, existInfo)){
                    throw new ApplicationException(
                        "申請受理登録時に重複申請が見つかりました。SystemNo="
                        + shinseiDataPk.getSystemNo(),
                        new ErrorInfo("errors.9017"));            
                }
            }

            // 20050824 研究者の存在チェック
            KenkyushaMaintenance kenkyusha        = new KenkyushaMaintenance();
            KenkyushaInfo shinseishaInfo        = new KenkyushaInfo();
            KenkyushaPk kenkyuPk                = new KenkyushaPk();
            String shozokuCd                    = existInfo.getDaihyouInfo().getShozokuCd();
            String kenkyuNo                        = existInfo.getDaihyouInfo().getKenkyuNo();
            kenkyuPk.setShozokuCd(shozokuCd);
            kenkyuPk.setKenkyuNo(kenkyuNo);
            try{
                shinseishaInfo = kenkyusha.select(userInfo, kenkyuPk);
            }catch(NoDataFoundException ex){
                throw new NoDataFoundException("受理実行中にエラーが発生しました。",new ErrorInfo("errors.4001"),ex);
            }catch(ApplicationException ex){
                throw new NoDataFoundException("受理実行中にエラーが発生しました。",new ErrorInfo("errors.4001"),ex);
            }finally{
            }

            //---DB更新---
            
// 2007/02/05 張志男　追加ここから
            /** ログ（更新前） */
            statusLog.info( " 応募情報受理登録前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo() +  " , 更新前申請状況ID : " + existInfo.getJokyoId() );
// 2007/02/05　張志男　追加ここまで
            
            try {
                try{
                    //---審査結果テーブルを作成---
                    ShinsaKekkaInfoDao shinsaKekkaDao = new ShinsaKekkaInfoDao(userInfo);
                    //現行データを削除
                    shinsaKekkaDao.deleteShinsaKekkaInfo(connection, shinseiDataPk);                
                    
                    //新規データを作成
                    ShinsaKekkaInfo shinsaKekkaInfo = new ShinsaKekkaInfo();
                    shinsaKekkaInfo.setSystemNo(existInfo.getSystemNo());                                //システム番号
                    shinsaKekkaInfo.setUketukeNo(existInfo.getUketukeNo());                                //申請番号
                    shinsaKekkaInfo.setJigyoKubun(existInfo.getKadaiInfo().getJigyoKubun());            //事業区分                                    
                    shinsaKekkaInfo.setShinsaKubun(existInfo.getKadaiInfo().getShinsaKubun());            //審査区分
                    shinsaKekkaInfo.setJigyoId(existInfo.getJigyoId());                                    //事業ID
                    shinsaKekkaInfo.setJigyoName(existInfo.getJigyoName());                                //事業名
                    shinsaKekkaInfo.setBunkaSaimokuCd(existInfo.getKadaiInfo().getBunkaSaimokuCd());    //細目番号
                    shinsaKekkaInfo.setShinsaJokyo("0");                                                //審査状況    
                    
                    //TODO 2段階審査 ダミーデータを基盤の場合は12個、それ以外の場合は3個作成する
                    int dummyCnt = 0;
//2006/04/27 追加ここから                    
//                    if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(shinsaKekkaInfo.getJigyoKubun())){
                    if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(shinsaKekkaInfo.getJigyoKubun())
                            || IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(shinsaKekkaInfo.getJigyoKubun())
                            || IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(shinsaKekkaInfo.getJigyoKubun())){
//追加ここまで                        
                        dummyCnt = IShinsainWarifuri.SHINSAIN_NINZU_KIBAN;
                    }else{
                        dummyCnt = IShinsainWarifuri.SHINSAIN_NINZU_GAKUSOU;
                    }
                    //審査員番号、シーケンス番号が異なるレコードを作成
                    for(int i = 0 ; i < dummyCnt ; i++){
                        //桁数を合わせる
                        if(i < 9){
                            shinsaKekkaInfo.setShinsainNo("@00000"+ new Integer(i+1).toString());    //審査員番号(7桁)
                        }else{
                            shinsaKekkaInfo.setShinsainNo("@0000"+ new Integer(i+1).toString());    //審査員番号(7桁)
                        }
                        shinsaKekkaInfo.setSeqNo(new Integer(i+1).toString());                    //シーケンス番号
                        shinsaKekkaDao.insertShinsaKekkaInfo(connection, shinsaKekkaInfo);
                    }
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "審査結果情報登録中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);                    
                }
                
                try{
                    //更新データをセットする
                    //申請フラグが「1（再申請中）」の場合は「2（再申請済み）」に変更
                
                    if((StatusCode.SAISHINSEI_FLG_SAISHINSEITYU).equals(existInfo.getSaishinseiFlg())){
                        existInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_SAISHINSEIZUMI);
                    }
                    existInfo.setJokyoId(StatusCode.STATUS_GAKUSIN_JYURI);    //申請状況「06：学振受理」
                    existInfo.setJuriKekka(FLAG_JURI_KEKKA_JURI);                //受理結果
                    if("00521".equals(jigyoCd) || "00522".equals(jigyoCd) || "00011".equals(jigyoCd)){
                        existInfo.setJuriBiko(comment);                             //受理結果備考
                        existInfo.setSeiriNo(seiriNo);                              //整理番号
                    }
                    existInfo.setJyuriDate(new Date());                            //学振受理日
                    dao.updateShinseiDataInfo(connection, existInfo, true);
                } catch (DataAccessException e) {
                    throw new ApplicationException(
                        "申請情報更新中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
                success = true;

            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新後） */
                        statusLog.info( " 応募情報受理登録後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() +  " , 更新後申請状況ID : " + StatusCode.STATUS_GAKUSIN_JYURI );
// 2007/02/05　張志男　追加ここまで
                        
                    } else {
                        DatabaseUtil.rollback(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新失敗） */
                        statusLog.info( " 応募情報受理登録失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo());
// 2007/02/05　張志男　追加ここまで
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 申請の不受理.<br><br>
     * 
     * ステータスを"学振不受理"に更新する。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                  -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                       -- 年度
     *     ,A.KAISU                       -- 回数
     *     ,A.JIGYO_NAME                  -- 事業名
     *     ,A.SHINSEISHA_ID               -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                 -- 所属機関承認日
     *     ,A.JYURI_DATE                  -- 学振受理日
     *     ,A.NAME_KANJI_SEI              -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI              -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI               -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI               -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                 -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                 -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                      -- 年齢
     *     ,A.KENKYU_NO                   -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                  -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU          -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                  -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU          -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                 -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI         -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU         -- 職名（略称）
     *     ,A.ZIP                         -- 郵便番号
     *     ,A.ADDRESS                     -- 住所
     *     ,A.TEL                         -- TEL
     *     ,A.FAX                         -- FAX
     *     ,A.EMAIL                       -- E-Mail
     *     ,A.SENMON                      -- 現在の専門
     *     ,A.GAKUI                       -- 学位
     *     ,A.BUNTAN                      -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO             -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                 -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO         -- 審査区分名称
     *     ,A.BUNKATSU_NO                 -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO          -- 分割番号名称
     *     ,A.KENKYU_TAISHO               -- 研究対象の類型
     *     ,A.KEI_NAME_NO                 -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU              -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD             -- 細目番号
     *     ,A.BUNYA_NAME                  -- 分野
     *     ,A.BUNKA_NAME                  -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                 -- 分野2
     *     ,A.BUNKA_NAME2                 -- 分科2
     *     ,A.SAIMOKU_NAME2               -- 細目2
     *     ,A.KANTEN_NO                   -- 推薦の観点番号
     *     ,A.KANTEN                      -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                      -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                 -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1               -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1               -- 1年目外国旅費
     *     ,A.RYOHI1                      -- 1年目旅費
     *     ,A.SHAKIN1                     -- 1年目謝金等
     *     ,A.SONOTA1                     -- 1年目その他
     *     ,A.KEIHI2                      -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                 -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2               -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2               -- 2年目外国旅費
     *     ,A.RYOHI2                      -- 2年目旅費
     *     ,A.SHAKIN2                     -- 2年目謝金等
     *     ,A.SONOTA2                     -- 2年目その他
     *     ,A.KEIHI3                      -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                 -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3               -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3               -- 3年目外国旅費
     *     ,A.RYOHI3                      -- 3年目旅費
     *     ,A.SHAKIN3                     -- 3年目謝金等
     *     ,A.SONOTA3                     -- 3年目その他
     *     ,A.KEIHI4                      -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                 -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4               -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4               -- 4年目外国旅費
     *     ,A.RYOHI4                      -- 4年目旅費
     *     ,A.SHAKIN4                     -- 4年目謝金等
     *     ,A.SONOTA4                     -- 4年目その他
     *     ,A.KEIHI5                      -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                 -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5               -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5               -- 5年目外国旅費
     *     ,A.RYOHI5                      -- 5年目旅費
     *     ,A.SHAKIN5                     -- 5年目謝金等
     *     ,A.SONOTA5                     -- 5年目その他
     *     ,A.KEIHI_TOTAL                 -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL               -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL          -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL          -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                 -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO           -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI              -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG               -- 分担金の有無
     *     ,A.KOYOHI                      -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU               -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN               -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO              -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                 -- 申請の有無
     *     ,A.KADAI_NO_SAISYU             -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG               -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD              -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU      -- 海外分野略称
     *     ,A.KANREN_SHIMEI1              -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1               -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1             -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1               -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1              -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1                 -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1           -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1                -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2              -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2               -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2             -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2               -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2              -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2                 -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2           -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2                -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3              -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3               -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3             -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3               -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3              -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3                 -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3           -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3                -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                  -- 受理結果
     *     ,A.JURI_BIKO                   -- 受理結果備考
     *     ,A.SUISENSHO_PATH              -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                  -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                  -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED           -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                      -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                 -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG              -- 再申請フラグ
     *     ,A.DEL_FLG                     -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A             -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"04"(学振処理中)、"06"(学振受理)、""07"(学振不受理)以外のとき、例外をthrowする。<br><br>
     * 
     * <b>3.審査結果情報の削除</b><br>
     * 審査結果情報を物理削除する。<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * DELETE FROM SHINSAKEKKA        -- 審査結果テーブル
     * WHERE
     *     SYSTEM_NO = ?            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>4.更新データのセット</b><br>
     * 1.で取得の申請情報existInfoの再申請フラグが"1"（再申請中）のとき、再申請フラグに"2"（再申請済み）をセットする。<br><br>
     * 
     * 申請状況に"07"(学振不受理)をセットする。<br><br>
     * 
     * 受理結果に"1"(不受理)をセットする。<br><br>
     * 
     * 受理結果備考に第三引数commentをセットする。<br><br>
     * 
     * 学振受理日に本日日付(WASのシステム日付)をセットする<br><br>
     * 
     * <b>5.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI             --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?              -- 申請番号
     *     ,JIGYO_ID = ?                -- 事業ID
     *     ,NENDO = ?                   -- 年度
     *     ,KAISU = ?                   -- 回数
     *     ,JIGYO_NAME = ?              -- 事業名
     *     ,SHINSEISHA_ID = ?           -- 申請者ID
     *     ,SAKUSEI_DATE = ?            -- 申請書作成日
     *     ,SHONIN_DATE = ?             -- 所属機関承認日
     *     ,JYURI_DATE = ?              -- 学振受理日
     *     ,NAME_KANJI_SEI = ?          -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?          -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?           -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?           -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?             -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?             -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                  -- 年齢
     *     ,KENKYU_NO = ?               -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?              -- 所属機関コード
     *     ,SHOZOKU_NAME = ?            -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?      -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?              -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?      -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?             -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?     -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?     -- 職名（略称）
     *     ,ZIP = ?                     -- 郵便番号
     *     ,ADDRESS = ?                 -- 住所
     *     ,TEL = ?                     -- TEL
     *     ,FAX = ?                     -- FAX
     *     ,EMAIL = ?                   -- E-Mail
     *     ,SENMON = ?                  -- 現在の専門
     *     ,GAKUI = ?                   -- 学位
     *     ,BUNTAN = ?                  -- 役割分担
     *     ,KADAI_NAME_KANJI = ?        -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?         -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?             -- 事業区分
     *     ,SHINSA_KUBUN = ?            -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?     -- 審査区分名称
     *     ,BUNKATSU_NO = ?             -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?      -- 分割番号名称
     *     ,KENKYU_TAISHO = ?           -- 研究対象の類型
     *     ,KEI_NAME_NO = ?             -- 系等の区分番号
     *     ,KEI_NAME = ?                -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?          -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?         -- 細目番号
     *     ,BUNYA_NAME = ?              -- 分野
     *     ,BUNKA_NAME = ?              -- 分科
     *     ,SAIMOKU_NAME = ?            -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?             -- 分野2
     *     ,BUNKA_NAME2 = ?             -- 分科2
     *     ,SAIMOKU_NAME2 = ?           -- 細目2
     *     ,KANTEN_NO = ?               -- 推薦の観点番号
     *     ,KANTEN = ?                  -- 推薦の観点
     *     ,KANTEN_RYAKU = ?            -- 推薦の観点略称
     *     ,KEIHI1 = ?                  -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?             -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?           -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?           -- 1年目外国旅費
     *     ,RYOHI1 = ?                  -- 1年目旅費
     *     ,SHAKIN1 = ?                 -- 1年目謝金等
     *     ,SONOTA1 = ?                 -- 1年目その他
     *     ,KEIHI2 = ?                  -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?             -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?           -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?           -- 2年目外国旅費
     *     ,RYOHI2 = ?                  -- 2年目旅費
     *     ,SHAKIN2 = ?                 -- 2年目謝金等
     *     ,SONOTA2 = ?                 -- 2年目その他
     *     ,KEIHI3 = ?                  -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?             -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?           -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?           -- 3年目外国旅費
     *     ,RYOHI3 = ?                  -- 3年目旅費
     *     ,SHAKIN3 = ?                 -- 3年目謝金等
     *     ,SONOTA3 = ?                 -- 3年目その他
     *     ,KEIHI4 = ?                  -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?             -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?           -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?           -- 4年目外国旅費
     *     ,RYOHI4 = ?                  -- 4年目旅費
     *     ,SHAKIN4 = ?                 -- 4年目謝金等
     *     ,SONOTA4 = ?                 -- 4年目その他
     *     ,KEIHI5 = ?                  -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?             -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?           -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?           -- 5年目外国旅費
     *     ,RYOHI5 = ?                  -- 5年目旅費
     *     ,SHAKIN5 = ?                 -- 5年目謝金等
     *     ,SONOTA5 = ?                 -- 5年目その他
     *     ,KEIHI_TOTAL = ?             -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?           -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?      -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?      -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?             -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?       -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?          -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?           -- 分担金の有無
     *     ,KOYOHI = ?                  -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?           -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?           -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?          -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?             -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?         -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?           -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?          -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?  -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?          -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?           -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?         -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?           -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?          -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?             -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?       -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?            -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?          -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?           -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?         -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?           -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?          -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?             -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?       -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?            -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?          -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?           -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?         -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?           -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?          -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?             -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?       -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?            -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?              -- 受理結果
     *     ,JURI_BIKO = ?               -- 受理結果備考
     *     ,SUISENSHO_PATH = ?          -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?              -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?              -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?       -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                  -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?             -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?          -- 再申請フラグ
     *     ,DEL_FLG = ?                 -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";              -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>6.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @param comment            受理結果備考(String)
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#registShinseiFujuri(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk, java.lang.String)
     */
    public void registShinseiFujuri(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk,
            String jigyoCd,
            String comment,
            String seiriNo)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();

            //---学振処理中、学振受理、学振不受理以外の場合はエラー
            if( !(StatusCode.STATUS_GAKUSIN_SHORITYU.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_GAKUSIN_JYURI.equals(jyokyoId)) &&
                  !(StatusCode.STATUS_GAKUSIN_FUJYURI.equals(jyokyoId))) {
                throw new ApplicationException(
                    "当該申請データは不受理可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9016"));
            }            

            //---DB更新---
            
// 2007/02/05 張志男　追加ここから
            /** ログ（更新前） */
            statusLog.info( " 応募情報不受理登録前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo()  + " , 更新前申請状況ID : " + existInfo.getJokyoId() );
// 2007/02/05　張志男　追加ここまで
            
            try{
                try{
                    //審査結果テーブルを作成
                    ShinsaKekkaInfoDao shinsaKekkaDao = new ShinsaKekkaInfoDao(userInfo);
                    //現行データを削除
                    shinsaKekkaDao.deleteShinsaKekkaInfo(connection, shinseiDataPk);                
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "審査結果情報削除中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);                    
                }
    
                try {
                    //更新データをセットする
                    //申請フラグが「1（再申請中）」の場合は「2（再申請済み）」に変更
                    if((StatusCode.SAISHINSEI_FLG_SAISHINSEITYU).equals(existInfo.getSaishinseiFlg())){
                        existInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_SAISHINSEIZUMI);
                    }
                    existInfo.setJokyoId(StatusCode.STATUS_GAKUSIN_FUJYURI);    //申請状況「07：学振不受理」
                    existInfo.setJuriKekka(FLAG_JURI_KEKKA_FUJURI);                  //受理結果
                    if("00521".equals(jigyoCd) || "00522".equals(jigyoCd) || "00011".equals(jigyoCd)){
                        existInfo.setJuriBiko(comment);                             //受理結果備考
                        existInfo.setSeiriNo(seiriNo);                              //整理番号
                    }
                    existInfo.setJyuriDate(new Date());                                //学振受理日
                    dao.updateShinseiDataInfo(connection, existInfo, true);            //応募情報の更新
                    success = true;
                } catch (DataAccessException e) {
                    throw new ApplicationException(
                        "申請情報更新中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新後） */
                        statusLog.info( " 応募情報不受理登録後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo()  + " , 更新後申請状況ID : " + StatusCode.STATUS_GAKUSIN_FUJYURI );
// 2007/02/05　張志男　追加ここまで
                    } else {
                        DatabaseUtil.rollback(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新失敗） */
                        statusLog.info( " 応募情報不受理登録失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() );
// 2007/02/05　張志男　追加ここまで
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 申請の修正依頼.<br><br>
     * 
     * 申請情報の修正依頼処理を行う。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"04"(学振処理中)、"06"(学振受理)、""07"(学振不受理)以外のとき、例外をthrowする。<br><br>
     * 
     * <b>3.審査結果情報の削除</b><br>
     * 審査結果情報を物理削除する。<br><br>
     * 
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * DELETE FROM SHINSAKEKKA        -- 審査結果テーブル
     * WHERE
     *     SYSTEM_NO = ?            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>4.更新データのセット</b><br>
     * 再申請フラグに"1"（再申請中）をセットする。<br><br>
     * 
     * 申請状況に"04"(学振処理中)をセットする。<br><br>
     * 
     * 受理結果に"2"(修正依頼)をセットする。<br><br>
     * 
     * 受理結果備考に第三引数commentをセットする。<br><br>
     * 
     * 学振受理日に本日日付(WASのシステム日付)をセットする<br><br>
     * 
     * <b>5.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?                -- 申請番号
     *     ,JIGYO_ID = ?                -- 事業ID
     *     ,NENDO = ?                    -- 年度
     *     ,KAISU = ?                    -- 回数
     *     ,JIGYO_NAME = ?                -- 事業名
     *     ,SHINSEISHA_ID = ?            -- 申請者ID
     *     ,SAKUSEI_DATE = ?            -- 申請書作成日
     *     ,SHONIN_DATE = ?                -- 所属機関承認日
     *     ,JYURI_DATE = ?                -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?            -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?            -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?            -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                    -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                    -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?        -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?            -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?            -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?            -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?            -- 細目2
     *     ,KANTEN_NO = ?                -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?            -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>6.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @param comment            受理結果備考(String)
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#registShinseiShuseiIrai(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk, java.lang.String)
     */
    public void registShinseiShuseiIrai(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk,
            String jigyoCd,
            String comment,
            String seiriNo)
            throws NoDataFoundException, ApplicationException {
        
        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();

            //---学振処理中、学振受理、学振不受理以外の場合はエラー
            if( !(StatusCode.STATUS_GAKUSIN_SHORITYU.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_GAKUSIN_JYURI.equals(jyokyoId)) &&
                  !(StatusCode.STATUS_GAKUSIN_FUJYURI.equals(jyokyoId))) {
                throw new ApplicationException(
                    "当該申請データは修正依頼可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9018"));
            }            

            //---DB更新---
            
// 2007/02/05 張志男　追加ここから
            /** ログ（更新前） */
            statusLog.info( " 応募情報修正依頼登録前 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                    + " , システム受付番号 : " + shinseiDataPk.getSystemNo()  + " , 更新前申請状況ID : " + existInfo.getJokyoId() );
// 2007/02/05　張志男　追加ここまで
            
            try{
                try{
                    //審査結果テーブルを作成
                    ShinsaKekkaInfoDao shinsaKekkaDao = new ShinsaKekkaInfoDao(userInfo);
                    //現行データを削除
                    shinsaKekkaDao.deleteShinsaKekkaInfo(connection, shinseiDataPk);                
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "審査結果情報削除中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);                    
                }
    
                try {
                    //更新データをセットする
                    existInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_SAISHINSEITYU);//申請フラグを「1（再申請中）」に変更
                    existInfo.setJokyoId(StatusCode.STATUS_GAKUSIN_SHORITYU);           //申請状況「04：学振処理中」
                    existInfo.setJuriKekka(FLAG_JURI_KEKKA_SHUSEIIRAI);                 //受理結果
                    if("00521".equals(jigyoCd) || "00522".equals(jigyoCd) || "00011".equals(jigyoCd)){
                        existInfo.setJuriBiko(comment);                                 //受理結果備考
                        existInfo.setSeiriNo(seiriNo);                                  //整理番号
                    }
                    existInfo.setJyuriDate(new Date());                                 //学振受理日
                    dao.updateShinseiDataInfo(connection, existInfo, true);
                    success = true;
                } catch (DataAccessException e) {
                    throw new ApplicationException(
                        "申請情報更新中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新後） */
                        statusLog.info( " 応募情報修正依頼登録後 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo()  + " , 更新後申請状況ID : " + StatusCode.STATUS_GAKUSIN_SHORITYU );
// 2007/02/05　張志男　追加ここまで
                    } else {
                        DatabaseUtil.rollback(connection);
                        
// 2007/02/05 張志男　追加ここから
                        /** ログ（更新失敗） */
                        statusLog.info( " 応募情報修正依頼登録失敗 , ユーザ種別 : " + userInfo.getRole() + " , ログインID : " + userInfo.getId() 
                                + " , システム受付番号 : " + shinseiDataPk.getSystemNo() );
// 2007/02/05　張志男　追加ここまで
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }    

    /**
     * 推薦書ファイルの登録.<br><br>
     * 
     * <b>1.簡易申請情報の取得</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)簡易申請情報の取得<br>
     * 　(1)のチェックで参照可能申請データであれば、データ取得処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *    A.SYSTEM_NO,                  -- システム受付番号
     *    A.UKETUKE_NO,                 -- 申請番号
     *    A.JIGYO_ID,                   -- 事業ID
     *    A.NENDO,                      -- 年度
     *    A.KAISU,                      -- 回数
     *    A.JIGYO_NAME,                 -- 事業名
     *    A.SHINSEISHA_ID,              -- 申請者ID
     *    A.SAKUSEI_DATE,               -- 申請書作成日
     *    A.SHONIN_DATE,                -- 所属期間承認日
     *    A.NAME_KANJI_SEI,             -- 申請者氏名（漢字等-姓）
     *    A.NAME_KANJI_MEI,             -- 申請者氏名（漢字等-名）
     *    A.KENKYU_NO,                  -- 申請者研究者番号
     *    A.SHOZOKU_CD,                 -- 所属機関コード
     *    A.SHOZOKU_NAME,               -- 所属機関名
     *    A.SHOZOKU_NAME_RYAKU,         -- 所属機関名（略称）
     *    A.BUKYOKU_NAME,               -- 部局名
     *    A.BUKYOKU_NAME_RYAKU,         -- 部局名（略称）
     *    A.SHOKUSHU_NAME_KANJI,        -- 職名
     *    A.SHOKUSHU_NAME_RYAKU,        -- 職名（略称）    
     *    A.KADAI_NAME_KANJI,           -- 研究課題名(和文）
     *    A.JIGYO_KUBUN,                -- 事業区分
     *    A.SUISENSHO_PATH,             -- 推薦書パス
     *    A.JURI_KEKKA,                 -- 受理結果
     *    A.JURI_BIKO,                  -- 受理備考
     *    A.KEKKA1_ABC,                 -- 1次審査結果(ABC)
     *    A.KEKKA1_TEN,                 -- 1次審査結果(点数)
     *    A.KEKKA1_TEN_SORTED,          -- 1次審査結果(点数順)
     *    A.KEKKA2,                     -- 2次審査結果
     *    A.JOKYO_ID,                   -- 申請状況ID
     *    A.SAISHINSEI_FLG,             -- 再申請フラグ
     *    B.UKETUKEKIKAN_END            -- 学振受付期限（終了）
     * FROM
     *    SHINSEIDATAKANRI A,           -- 申請データ管理テーブル
     *    JIGYOKANRI B                  -- 事業情報管理テーブル
     * WHERE
     * 
     *  --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *    AND A.DEL_FLG = 0                  -- 削除フラグが[0]
     *    AND A.JIGYO_ID = B.JIGYO_ID        -- 事業IDが同じもの
     * 
     * ORDER BY A.SYSTEM_NO
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b>2.ファイルパス生成</b><br>
     * (1)ファイルパス生成
     * 　配列pathInfoに1.で取得した簡易申請情報の事業ID、第二引数shinseiDataPkのシステム受付番号を格納する。<br><br>
     * 
     * 　リテラルSHINSEI_SUISEN_FOLDERのパターンに従い、配列pathInfoをMessageFormatクラスのformat()メソッドを用いてフォーマットする。<br>
     * 　ファイルパスを生成する。<br><br>
     * 
     * 　(例)ファイルパターン：${shinsei_path}/data/{0}/{1}/suisen/s{1}.pdf<br>
     * 　　　事業ID：04000011　システム番号：20041122135506001　のとき<br>
     * 　　　ファイルパス：${shinsei_path}/data/04000011/20041122135506001/suisen/s20041122135506001.pdf<br>
     * 　　　　※${shinsei_path}の値はApplicationSettings.propertiesに設定<br><br>
     * 
     * 　生成したファイルパスが存在する場合、FileUtilクラスのdelete()メソッドにて該当する既存ファイルを削除する。<br><br>
     * 
     * (2)ファイル書き込み<br>
     * 　FileUtilクラスのwriteFile()メソッドを呼び、ファイルを書き込む。<br>
     * 　引数に(1)で生成したファイルパス、第三引数fileResのバイナリを渡す。<br><br>
     * 
     * <b>3.推薦書ファイルパス更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請データ情報の更新<br>
     * 　申請データ情報の推薦書ファイルパスを更新する。<br><br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            -- 申請データ管理テーブル
     * SET
     *     SUISENSHO_PATH  = ?        -- 推薦書の格納パス
     * WHERE
     *     SYSTEM_NO = ?            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>2.で生成したファイルパス</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>4.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseriDataPk
     * @param fileRes            推薦書ファイル(FileResource)
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#registSuisenFile(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk, jp.go.jsps.kaken.util.FileResource)
     */
    public void registSuisenFile(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk,
            FileResource fileRes)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            //簡易申請情報を取得
            SimpleShinseiDataInfo simpleInfo = 
                                    dao.selectSimpleShinseiDataInfo(connection, shinseiDataPk, true);
            String jigyoId = simpleInfo.getJigyoId();
            simpleInfo = null;    //もう使わないので
            
            //---ファイル情報---
            String[] pathInfo = new String[]{jigyoId, shinseiDataPk.getSystemNo()}; 
            String   outPath  = MessageFormat.format(SHINSEI_SUISEN_FOLDER, pathInfo);
            File     outFile   = new File(outPath);
            if(outFile.exists()){
                FileUtil.delete(outFile);    //存在した場合は削除
            }
            //---ファイル格納---
            FileUtil.writeFile(outFile, fileRes.getBinary());
            
            //DB登録（パス情報）
            dao.updateSuisenshoFilePath(connection, shinseiDataPk, outPath);
            success = true;
        
        } catch (IOException e){
            throw new ApplicationException(
                "推薦書ファイル格納中にエラーが発生しました。",
                new ErrorInfo("errors.7001"),
                e);
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "申請データ推薦書ファイルパス更新中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        } finally {
            try {
                if (success) {
                    DatabaseUtil.commit(connection);
                } else {
                    DatabaseUtil.rollback(connection);
                }
            } catch (TransactionException e) {
                throw new ApplicationException(
                    "申請データ推薦書ファイルパス更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                DatabaseUtil.closeConnection(connection);
            }
        }
    }

    /**
     * 推薦書ファイルを取得.<br><br>
     * 
     * <b>1.簡易申請情報の取得</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)簡易申請情報の取得<br>
     * 　(1)のチェックで参照可能申請データであれば、データ取得処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *    A.SYSTEM_NO,                    -- システム受付番号
     *    A.UKETUKE_NO,                    -- 申請番号
     *    A.JIGYO_ID,                    -- 事業ID
     *    A.NENDO,                        -- 年度
     *    A.KAISU,                        -- 回数
     *    A.JIGYO_NAME,                    -- 事業名
     *    A.SHINSEISHA_ID,                -- 申請者ID
     *    A.SAKUSEI_DATE,                -- 申請書作成日
     *    A.SHONIN_DATE,                -- 所属期間承認日
     *    A.NAME_KANJI_SEI,                -- 申請者氏名（漢字等-姓）
     *    A.NAME_KANJI_MEI,                -- 申請者氏名（漢字等-名）
     *    A.KENKYU_NO,                    -- 申請者研究者番号
     *    A.SHOZOKU_CD,                    -- 所属機関コード
     *    A.SHOZOKU_NAME,                -- 所属機関名
     *    A.SHOZOKU_NAME_RYAKU,            -- 所属機関名（略称）
     *    A.BUKYOKU_NAME,                -- 部局名
     *    A.BUKYOKU_NAME_RYAKU,            -- 部局名（略称）
     *    A.SHOKUSHU_NAME_KANJI,        -- 職名
     *    A.SHOKUSHU_NAME_RYAKU,        -- 職名（略称）    
     *    A.KADAI_NAME_KANJI,            -- 研究課題名(和文）
     *    A.JIGYO_KUBUN,                -- 事業区分
     *    A.SUISENSHO_PATH,                -- 推薦書パス
     *    A.JURI_KEKKA,                    -- 受理結果
     *    A.JURI_BIKO,                    -- 受理備考
     *    A.KEKKA1_ABC,                    -- 1次審査結果(ABC)
     *    A.KEKKA1_TEN,                    -- 1次審査結果(点数)
     *    A.KEKKA1_TEN_SORTED,            -- 1次審査結果(点数順)
     *    A.KEKKA2,                        -- 2次審査結果
     *    A.JOKYO_ID,                    -- 申請状況ID
     *    A.SAISHINSEI_FLG,                -- 再申請フラグ
     *    B.UKETUKEKIKAN_END            -- 学振受付期限（終了）
     * FROM
     *    SHINSEIDATAKANRI A,            -- 申請データ管理テーブル
     *    JIGYOKANRI B                    -- 事業情報管理テーブル
     * WHERE
     * 
     *  --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *    AND A.DEL_FLG = 0                    -- 削除フラグが[0]
     *    AND A.JIGYO_ID = B.JIGYO_ID        -- 事業IDが同じもの
     * 
     * ORDER BY A.SYSTEM_NO
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b>2.ファイル読み込み</b><br>
     * 1.で取得した簡易申請情報から、推薦書の格納パスを取得する。<br>
     * 推薦書の格納パスがないとき、例外をthrowする。<br><br>
     * 
     * FileUtilクラスのreadFile()メソッドにて推薦書ファイルを読み込む。<br><br>
     * 
     * 取得したファイルリソースを返却する。<br><br>
     * 
     * ファイルが見つからないとき、例外をthrowする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param ShinseiDataPk        ShinseiDataPk
     * @return 推薦書ファイル(FileResource)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#getSuisenFileRes(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public FileResource getSuisenFileRes(
            UserInfo userInfo,
            ShinseiDataPk shinseiDataPk)
            throws NoDataFoundException, ApplicationException {

        Connection connection = null;
        String     filePath   = null;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            
            ShinseiDataInfo dataInfo = 
                                dao.selectShinseiDataInfo(connection, shinseiDataPk, true);
            
            filePath = dataInfo.getSuisenshoPath();
            if(filePath == null || filePath.length() == 0){
                throw new FileIOException(
                    "ファイルパスが不正です。filePath="+filePath);            
            }

            //推薦書ファイルを読み込む
            FileResource fileRes = FileUtil.readFile(new File(filePath));
            return fileRes;
            
        }catch(FileNotFoundException e){
            throw new FileIOException(
                "ファイルが見つかりませんでした。filePath="+filePath,
                e);
        }catch(IOException e){
            throw new FileIOException(
                "ファイルの入出力中にエラーが発生しました。filePath="+filePath,
                e);
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }finally{
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 推薦書ファイルを削除.<br><br>
     * 
     * 申請データテーブルの推薦書の格納パスにnullを格納する。<br><br>
     * 
     * <b>1.推薦書ファイルの削除</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * 
     * (2)申請情報の更新<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            -- 申請データ管理テーブル
     * SET
     *     SUISENSHO_PATH  = ?        -- 推薦書の格納パス
     * WHERE
     *     SYSTEM_NO = ?            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>null</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#deleteSuisenFile(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public void deleteSuisenFile(
            UserInfo userInfo, 
            ShinseiDataPk shinseiDataPk)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            
            //DB登録（パス情報）
            dao.updateSuisenshoFilePath(connection, shinseiDataPk, null);
            success = true;
        
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "申請データ推薦書ファイルパス（削除用）更新中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        } finally {
            try {
                if (success) {
                    DatabaseUtil.commit(connection);
                } else {
                    DatabaseUtil.rollback(connection);
                }
            } catch (TransactionException e) {
                throw new ApplicationException(
                    "申請データ推薦書ファイルパス（削除用）更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                DatabaseUtil.closeConnection(connection);
            }
        }
    }    

    /**
     * 審査依頼発行通知時のステータス更新.<br><br>
     * 
     * 審査依頼発行通知時のステータス更新メソッド。<br>
     * ステータスが"学振受理"のものを、"1次審査中"に更新する。<br><br>
     * 
     * <b>1.推薦書ファイルの削除</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列pkInfoの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * 
     * (2)申請情報の更新<br>
     * 　・排他制御<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     *
     * FROM
     *     SHINSEIDATAKANRI
     * WHERE
     *     SYSTEM_NO IN ('システム受付番号1','システム受付番号2',…)
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table>
     * システム受付番号はshinseiDataPkの値<br><br>
     * 
     * 　・申請情報の更新<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI                -- 申請データ管理テーブル
     * SET
     *     JOKYO_ID = '10'            -- ステータスが1次審査中
     * WHERE
     *     SYSTEM_NO IN ('システム受付番号1','システム受付番号2',…)
     * 
     *     AND JOKYO_ID = '06'         -- ステータスが学振受理
     * </pre>
     * </td></tr>
     * </table>
     * システム受付番号はshinseiDataPkの値<br><br>
     * 
     * <b>2.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk[]
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#updateStatusForShinsaIraiIssue(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk[])
     */
    public void updateStatusForShinsaIraiIssue(
            UserInfo userInfo,
            ShinseiDataPk[] shinseiDataPk)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            dao.updateStatusForShinsaIraiIssue(connection, shinseiDataPk);
            success = true;
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "申請ステータス更新中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        } finally {
            try {
                if (success) {
                    DatabaseUtil.commit(connection);
                } else {
                    DatabaseUtil.rollback(connection);
                }
            } catch (TransactionException e) {
                throw new ApplicationException(
                    "申請ステータス更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                DatabaseUtil.closeConnection(connection);
            }
        }            
    }

    /**
     * 申請情報CSVデータを取得.<br><br>
     * 
     * 申請情報をCSV出力するために、検索条件に該当するレコードをListへ格納し、呼び出し元へ返却する。<br>
     * その際、各レコード情報は列ごとにListへ格納されたうえで返却するListへ格納される。(Listによる2次元配列構造)<br>
     * なお、返却するListの一つ目の要素は、ヘッダー情報を格納する。<br><br>
     * 
     * (1)申請情報の取得<br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *      A.SYSTEM_NO                -- システム受付番号
     *     ,A.UKETUKE_NO            -- 申請番号
     *     ,A.JIGYO_ID                -- 事業ID
     *     ,A.NENDO                    -- 年度
     *     ,A.KAISU                    -- 回数
     *     ,A.JIGYO_NAME            -- 事業名
     *     ,A.SHINSEISHA_ID            -- 申請者ID
     *     ,TO_CHAR(A.SAKUSEI_DATE, 'YYYY/MM/DD')    -- 申請書作成日
     *     ,TO_CHAR(A.SHONIN_DATE, 'YYYY/MM/DD')    -- 所属機関承認日
     *     ,TO_CHAR(A.JYURI_DATE, 'YYYY/MM/DD')        -- 学振受理日
     *     ,A.NAME_KANJI_SEI        -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI        -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI            -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI            -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI            -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI            -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                -- 年齢
     *     ,A.KENKYU_NO                -- 申請者研究者番号
     *     ,A.SHOZOKU_CD            -- 所属機関コード
     *     ,A.SHOZOKU_NAME            -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU    -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD            -- 部局コード
     *     ,A.BUKYOKU_NAME            -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU    -- 部局名（略称）
     *     ,A.SHOKUSHU_CD            -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI    -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU    -- 職名（略称）
     *     ,A.ZIP                    -- 郵便番号
     *     ,A.ADDRESS                -- 住所
     *     ,A.TEL                    -- TEL
     *     ,A.FAX                    -- FAX
     *     ,A.EMAIL                    -- E-Mail
     *     ,A.KADAI_NAME_KANJI        -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO        -- 研究課題名(英文）
     *     ,A.KEI_NAME_NO            -- 系等の区分番号
     *     ,A.KEI_NAME                -- 系等の区分
     *     ,A.KEI_NAME_RYAKU        -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD        -- 細目番号
     *     ,A.BUNYA_NAME            -- 分野
     *     ,A.BUNKA_NAME            -- 分科
     *     ,A.SAIMOKU_NAME            -- 細目
     *     ,A.BUNKASAIMOKU_CD2        -- 細目番号2
     *     ,A.BUNYA_NAME2            -- 分野2
     *     ,A.BUNKA_NAME2            -- 分科2
     *     ,A.SAIMOKU_NAME2            -- 細目2
     *     ,A.KANTEN_NO                -- 推薦の観点番号
     *     ,A.KANTEN                -- 推薦の観点
     *     ,A.KANTEN_RYAKU            -- 推薦の観点略称
     *     ,A.KEIHI1                -- 1年目研究経費
     *     ,A.BIHINHI1                -- 1年目設備備品費
     *     ,A.SHOMOHINHI1            -- 1年目消耗品費
     *     ,A.RYOHI1                -- 1年目旅費
     *     ,A.SHAKIN1                -- 1年目謝金等
     *     ,A.SONOTA1                -- 1年目その他
     *     ,A.KEIHI2                -- 2年目研究経費
     *     ,A.BIHINHI2                -- 2年目設備備品費
     *     ,A.SHOMOHINHI2            -- 2年目消耗品費
     *     ,A.RYOHI2                -- 2年目旅費
     *     ,A.SHAKIN2                -- 2年目謝金等
     *     ,A.SONOTA2                -- 2年目その他
     *     ,A.KEIHI3                -- 3年目研究経費
     *     ,A.BIHINHI3                -- 3年目設備備品費
     *     ,A.SHOMOHINHI3            -- 3年目消耗品費
     *     ,A.RYOHI3                -- 3年目旅費
     *     ,A.SHAKIN3                -- 3年目謝金等
     *     ,A.SONOTA3                -- 3年目その他
     *     ,A.KEIHI4                -- 4年目研究経費
     *     ,A.BIHINHI4                -- 4年目設備備品費
     *     ,A.SHOMOHINHI4            -- 4年目消耗品費
     *     ,A.RYOHI4                -- 4年目旅費
     *     ,A.SHAKIN4                -- 4年目謝金等
     *     ,A.SONOTA4                -- 4年目その他
     *     ,A.KEIHI5                -- 5年目研究経費
     *     ,A.BIHINHI5                -- 5年目設備備品費
     *     ,A.SHOMOHINHI5            -- 5年目消耗品費
     *     ,A.RYOHI5                -- 5年目旅費
     *     ,A.SHAKIN5                -- 5年目謝金等
     *     ,A.SONOTA5                -- 5年目その他
     *     ,A.KEIHI_TOTAL            -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL            -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL        -- 総計-消耗品費
     *     ,A.RYOHI_TOTAL            -- 総計-旅費
     *     ,A.SHAKIN_TOTAL            -- 総計-謝金等
     *     ,A.SONOTA_TOTAL            -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 研究計画最終年度前年度の応募
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-Email1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-Email2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-Email3
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,TO_CHAR(B.HOKAN_DATE, 'YYYY/MM/DD')        -- データ保管日
     *     ,TO_CHAR(B.YUKO_DATE, 'YYYY/MM/DD')        -- 保管有効期限
     * FROM
     *     SHINSEIDATAKANRI A,            -- 申請データ管理テーブル
     *     JIGYOKANRI B                    -- 事業情報管理テーブル
     * WHERE
     *     A.DEL_FLG = 0                        -- 削除フラグが[0]
     *     AND A.JIGYO_ID = B.JIGYO_ID            -- 事業IDが同じもの
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数pkInfoの変数systemNo</td></tr>
     * </table><br>
     * 
     * (2)カラム名を挿入<br>
     * カラム名リストを生成し、(1)で取得したリストの最初の要素に挿入する。<br>
     * 指定文字列はSQLの識別子長を超えてしまう可能性があるため別にセットする。<br><br>
     * カラム名リストは以下の通り。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * システム受付番号
     * 申請番号
     * 事業ID
     * 年度
     * 回数
     * 事業名
     * 申請者ID
     * 申請書作成日
     * 所属機関承認日
     * 学振受理日
     * 申請者氏名（漢字等-姓）
     * 申請者氏名（漢字等-名）
     * 申請者氏名（フリガナ-姓）
     * 申請者氏名（フリガナ-名）
     * 申請者氏名（ローマ字-姓）
     * 申請者氏名（ローマ字-名）
     * 年齢
     * 申請者研究者番号
     * 所属機関コード
     * 所属機関名
     * 所属機関名（略称）
     * 部局コード
     *  部局名
     * 部局名（略称）
     * 職名コード
     * 職名（和文）
     * 職名（略称）
     * 郵便番号
     * 住所
     * TEL
     * FAX
     * Eｍail
     * 研究課題名(和文）
     * 研究課題名(英文）
     * 系等の区分番号
     * 系等の区分
     * 系等の区分略称
     * 細目番号
     * 分野
     * 分科
     * 細目
     * 細目番号2
     * 分野2
     * 分科2
     * 細目2
     * 推薦の観点番号
     * 推薦の観点
     * 推薦の観点略称
     * 1年目研究経費
     * 1年目設備備品費
     * 1年目消耗品費
     * 1年目旅費
     * 1年目謝金等
     * 1年目その他
     * 2年目研究経費
     * 2年目設備備品費
     * 2年目消耗品費
     * 2年目旅費
     * 2年目謝金等
     * 2年目その他
     * 3年目研究経費
     * 3年目設備備品費
     * 3年目消耗品費
     * 3年目旅費
     * 3年目謝金等
     * 3年目その他
     * 4年目研究経費
     * 4年目設備備品費
     * 4年目消耗品費
     * 4年目旅費
     * 4年目謝金等
     * 4年目その他
     * 5年目研究経費
     * 5年目設備備品費
     * 5年目消耗品費
     * 5年目旅費
     * 5年目謝金等
     * 5年目その他
     * 総計-研究経費
     * 総計-設備備品費
     * 総計-消耗品費
     * 総計-旅費
     * 総計-謝金等
     * 総計-その他
     * 研究組織の形態番号
     * 研究組織の形態
     * 分担金の有無
     * 研究者数
     * 他機関の分担者数
     * 新規継続区分
     * 継続分の研究課題番号
     * 研究計画最終年度前年度の応募
     * 最終年度課題番号
     * 海外分野コード
     * 海外分野名称
     * 海外分野略称
     * 関連分野の研究者-氏名1
     * 関連分野の研究者-所属機関1
     * 関連分野の研究者-所属部局1
     * 関連分野の研究者-職名1
     * 関連分野の研究者-専門分野1
     * 関連分野の研究者-勤務先電話番号1
     * 関連分野の研究者-自宅電話番号1
     * 関連分野の研究者-Email1
     * 関連分野の研究者-氏名2
     * 関連分野の研究者-所属機関2
     * 関連分野の研究者-所属部局2
     * 関連分野の研究者-職名2
     * 関連分野の研究者-専門分野2
     * 関連分野の研究者-勤務先電話番号2
     * 関連分野の研究者-自宅電話番号2
     * 関連分野の研究者-Email2
     * 関連分野の研究者-氏名3
     * 関連分野の研究者-所属機関3
     * 関連分野の研究者-所属部局3
     * 関連分野の研究者-職名3
     * 関連分野の研究者-専門分野3
     * 関連分野の研究者-勤務先電話番号3
     * 関連分野の研究者-自宅電話番号3
     * 関連分野の研究者-Email3
     * 受理結果
     * 受理結果備考
     * １次審査結果(ABC)
     * １次審査結果(点数)
     * １次審査備考
     * ２次審査結果
     * 業務担当者記入欄
     * 申請状況ID
     * 再申請フラグ
     * データ保管日
     * 保管有効期限
     * </pre>
     * </td></tr>
     * </table><br><br>
     * 
     * (3)リストを返却する。<br><br>
     * 
     * @param userInfo        UserInfo
     * @param searchInfo    ShinseiSearchInfo
     * @return 申請情報CSVデータ(List)
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchCsvData(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiSearchInfo)
     */
    public List searchCsvData(UserInfo userInfo, ShinseiSearchInfo searchInfo)
        throws ApplicationException {

        //DBコネクションの取得
        Connection connection = null;    
        try{
            connection = DatabaseUtil.getConnection();
            
            //---申請書一覧ページ情報
            List csvList = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                csvList = dao.searchCsvData(connection, searchInfo);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            return csvList;
        
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    //add start ly 2006/07/28
    /**
     * 申請情報CSVデータを取得.<br><br>
     * * @param userInfo        UserInfo
     * @param searchInfo    ShinseiSearchInfo
     * @return 申請情報CSVデータ(List)
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchCsvData(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiSearchInfo)
     */
    public List searchShozokuCsvData(
            UserInfo userInfo,
            ShinseiSearchInfo searchInfo)
            throws ApplicationException {

        // DBコネクションの取得
        Connection connection = null;
        try {
            connection = DatabaseUtil.getConnection();

            //---申請書一覧ページ情報
            List csvList = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                csvList = dao.searchShozokuCsvData(connection, searchInfo);
            }
            catch (DataAccessException e) {
                throw new ApplicationException("申請書管理データ検索中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4004"), e);
            }
            return csvList;
        }
        finally {
            DatabaseUtil.closeConnection(connection);
        }
    }
    //add end ly 2006/07/28

    /**
     * 研究組織情報CSVデータを取得.<br><br>
     * 
     * 研究組織情報をCSV出力するために、検索条件に該当するレコードをListへ格納し、呼び出し元へ返却する。<br>
     * その際、各レコード情報は列ごとにListへ格納されたうえで返却するListへ格納される。(Listによる2次元配列構造)<br>
     * なお、返却するListの一つ目の要素は、ヘッダー情報を格納する。<br><br>
     * 
     * (1)研究組織情報の取得<br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     B.SYSTEM_NO               \"システム受付番号\""        
     *    ,B.SEQ_NO                  \"シーケンス番号\""        
     *    ,B.JIGYO_ID                \"事業ID\""                
     *    ,B.BUNTAN_FLG              \"代表者分担者別\""        
     *    ,B.KENKYU_NO               \"研究者番号\""            
     *    ,B.NAME_KANJI_SEI          \"氏名（漢字−姓）\""        
     *    ,B.NAME_KANJI_MEI          \"氏名（漢字−名）\""        
     *    ,B.NAME_KANA_SEI           \"氏名（フリガナ−姓）\""    
     *    ,B.NAME_KANA_MEI           \"氏名（フリガナ−名）\""    
     *    ,B.SHOZOKU_CD              \"所属機関名（コード）\""    
     *    ,B.SHOZOKU_NAME            \"所属機関名（和文）\""    
     *    ,B.BUKYOKU_CD              \"部局名（コード）\""        
     *    ,B.BUKYOKU_NAME            \"部局名（和文）\""        
     *    ,B.SHOKUSHU_CD             \"職名コード\""            
     *    ,B.SHOKUSHU_NAME_KANJI     \"職名（和文）\""            
     *    ,B.SENMON                  \"現在の専門\""            
     *    ,B.GAKUI                   \"学位\""                    
     *    ,B.BUNTAN                  \"役割分担\""                
     *    ,B.KEIHI                   \"研究経費\""                
     *    ,B.EFFORT                  \"エフォート\""            
     *    ,B.NENREI                  \"年齢\""                    
     * FROM
     *     SHINSEIDATAKANRI A                -- 申請データ管理テーブル
     *     ,KENKYUSOSHIKIKANRI B            -- 研究組織表管理テーブル
     * WHERE
     *     B.SYSTEM_NO = A.SYSTEM_NO        -- システム受付番号が同じもの
     * </pre>
     * </td></tr>
     * </table><br><br>
     * 
     * (2)リストを返却する。<br><br>
     * 
     * @param userInfo        UserInfo
     * @param searchInfo    ShinseiSearchInfo
     * @return 研究組織情報CSVデータ(List)
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchKenkyuSoshikiCsvData(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiSearchInfo)
     */
    public List searchKenkyuSoshikiCsvData(
            UserInfo userInfo,
            ShinseiSearchInfo searchInfo)
            throws ApplicationException {

        //DBコネクションの取得
        Connection connection = null;    
        try{
            connection = DatabaseUtil.getConnection();
            
            //---申請書一覧に紐付く研究組織データ
            List csvList = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                csvList = dao.searchKenkyuSoshikiCsvData(connection, searchInfo);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "研究組織管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            return csvList;
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

//    /* (非 Javadoc)
//     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchCommentList(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.HyokaSearchInfo)
//     */
//    public Page searchCommentList(
//        UserInfo userInfo,
//        HyokaSearchInfo searchInfo)
//        throws NoDataFoundException, ApplicationException
//    {
//        //DBコネクションの取得
//        Connection connection = null;    
//        try{
//            connection = DatabaseUtil.getConnection();
//            
//            //---申請書一覧ページ情報
//            Page pageInfo = null;
//            try {
//                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
//                pageInfo = dao.searchCommentList(connection, searchInfo);    //該当レコードを全件取得
//            } catch (DataAccessException e) {
//                throw new ApplicationException(
//                    "申請書管理データ検索中にDBエラーが発生しました。",
//                    new ErrorInfo("errors.4004"),
//                    e);
//            }
//        
//            //申請状況名をセット
//            //new StatusManager(userInfo).setStatusName(connection, pageInfo);
//            return pageInfo;
//        
//        } finally {
//            DatabaseUtil.closeConnection(connection);
//        }
//    }    

    /**
     * 評価リストページ情報を取得.<br><br>
     * 
     * <b>1.評価リストページ情報取得</b><br>
     * (1)事業区分が"1"(学術創成（推薦分）)のとき<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO                    -- システム番号
     *     , A.NENDO                    -- 年度
     *     , A.KAISU                    -- 回数
     *     , A.JIGYO_NAME                -- 事業名
     *     , A.KADAI_NAME_KANJI            -- 研究課題名
     *     , A.UKETUKE_NO                -- 申請番号
     *     , A.NAME_KANJI_SEI            -- 申請者氏名(漢字等-姓)
     *     , A.NAME_KANJI_MEI            -- 申請者氏名(漢字等-名)
     *     , A.SHOZOKU_NAME_RYAKU        -- 所属機関名
     *     , A.BUKYOKU_NAME_RYAKU        -- 部局名
     *     , A.SHOKUSHU_NAME_RYAKU        -- 職種名
     *     , A.KEKKA1_ABC                -- 一時審査結果(ABC)
     *     , A.KEKKA1_TEN                -- 一時審査結果(点数)
     *     , A.KANTEN_RYAKU                -- 推薦の観点
     *     , A.JIGYO_KUBUN                -- 事業区分
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * 
     * -- 審査員が1人も割り当てられていない申請データを表示させないための制御
     * -- 審査員が1人以上割り当てられているSYSTEM_NOを検索条件とする。
     * WHERE
     *     EXISTS (SELECT *
     *     FROM
     *         SHINSEIDATAKANRI A        -- 申請データ管理テーブル
     *         , SHINSAKEKKA B            -- 審査結果テーブル
     *     WHERE
     *         A.SYSTEM_NO = B.SYSTEM_NO
     *         AND A.JIGYO_KUBUN = B.JIGYO_KUBUN
     *         AND B.SHINSAIN_NO NOT LIKE '@%'    -- 審査員が1人も割り当てられていない
     *      )
     * 
     *     AND A.DEL_FLG = 0
     *     AND A.JOKYO_ID IN ('08', '09', '10', '11', '12')
     * 
     *     --- 動的検索条件1 ---
     * 
     * ORDER BY
     * 
     *     --- 動的整列キー ---
     * 
     *     , A.SYSTEM_NO ASC
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * searchInfoによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>年度</td><td>nend</td><td>AND A.NENDO = '年度'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>回数</td><td>kaisu</td><td>AND A.KAISU = '回数'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請番号</td><td>uketukeNo</td><td>AND A.UKETUKE_NO = '申請番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>shozokuCd</td><td>AND A.SHOZOKU_CD = '所属機関コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>細目番号</td><td>bunkasaimokuCd</td><td>AND (A.BUNKASAIMOKU_CD = '細目番号' OR A.BUNKASAIMOKU_CD2 = '細目番号')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>系統の区分</td><td>keiName</td><td>AND (A.KEI_NAME like '%系統の区分%' OR A.KEI_NAME_RYAKU like '%系統の区分%')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：姓）</td><td>nameKanjiSei</td><td>AND A.NAME_KANJI_SEI like '%申請者名（漢字)%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：名）</td><td>nameKanjiMei</td><td>AND A.NAME_KANJI_MEI like '%申請者名（漢字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：姓）</td><td>nameKanaSei</td><td>AND A.NAME_KANA_SEI like '%申請者名（カナ：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：名）</td><td>nameKanaMei</td><td>AND A.NAME_KANA_MEI like '%申請者名（カナ：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：姓）</td><td>nameRoSei</td><td>AND UPPER(A.NAME_RO_SEI) like '%申請者名（ローマ字：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：名）</td><td>nameRoMei</td><td>AND UPPER(A.NAME_RO_MEI) like '%申請者名（ローマ字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業区分</td><td>jigyoKubun</td><td>AND A.JIGYO_KUBUN = '事業区分'</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的整列キー</span></b><br>
     * searchInfoによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">条件(hyojiHoshikiの値)</td><td>動的整列キー</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>"1"のとき</td><td>TO_NUMBER(NVL(A.KEKKA1_TEN, '-1')) DESC<br>, NVL(REPLACE(REPLACE(REPLACE(REPLACE(KEKKA1_ABC, 'A-', '3'), 'B-', '1'), 'A', '4'), 'B', '2'), '0') DESC</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>"1"以外のとき</td><td>NVL(REPLACE(REPLACE(REPLACE(REPLACE(KEKKA1_ABC, 'A-', '3'), 'B-', '1'), 'A', '4'), 'B', '2'), '0')DESC<br>, TO_NUMBER(NVL(A.KEKKA1_TEN, '-1')) DESC</td></tr>
     * </table><br><br>
     * 
     * (2)事業区分が"4"(基盤研究)のとき<br>
     * 　(a)第二引数searchInfoの変数hyojiHoshikiKiban(表示方式（基盤用）)が"1"のとき<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO                    -- システム番号
     *     , A.NENDO                    -- 年度
     *     , A.KAISU                    -- 回数
     *     , A.JIGYO_NAME                -- 事業名
     *     , A.BUNKASAIMOKU_CD            -- 細目番号
     *     , A.SAIMOKU_NAME                -- 細目名
     *     , A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野名(略称)
     *     , A.SHOZOKU_NAME_RYAKU        -- 所属機関名
     *     , A.BUKYOKU_NAME_RYAKU        -- 部局名
     *     , A.SHOKUSHU_NAME_RYAKU        -- 職種名
     *     , A.NAME_KANJI_SEI            -- 申請者氏名(漢字等-姓)
     *     , A.NAME_KANJI_MEI            -- 申請者氏名(漢字等-名)
     *     , A.UKETUKE_NO                -- 申請番号
     *     , A.KEKKA1_TEN_SORTED        -- 一時審査結果(総合評点)
     *     , A.KEKKA1_TEN                -- 一時審査結果(計)
     *     , A.JIGYO_KUBUN                -- 事業区分
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     EXISTS (SELECT *
     *     FROM
     *         SHINSEIDATAKANRI A        -- 申請データ管理テーブル
     *         , SHINSAKEKKA B            -- 審査結果テーブル
     *     WHERE
     *         A.SYSTEM_NO = B.SYSTEM_NO
     *         AND A.JIGYO_KUBUN = B.JIGYO_KUBUN
     *         AND B.SHINSAIN_NO NOT LIKE '@%'    -- 審査員が1人も割り当てられていない
     *      )
     * 
     *     AND A.DEL_FLG = 0
     *     AND A.JOKYO_ID IN ('08', '09', '10', '11', '12')
     * 
     *     --- 動的検索条件1 ---
     * 
     * ORDER BY
     *     TO_NUMBER(NVL(A.KEKKA1_TEN, '-1')) DESC        -- 一時審査結果(計)の降順
     *     , A.KEKKA1_TEN_SORTED DESC        -- 一時審査結果(総合評点)の降順
     *     , A.SYSTEM_NO ASC
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * searchInfoによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業コード</td><td>jigyoCd</td><td>AND SUBSTR(A.JIGYO_ID,3,5) = '事業コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>年度</td><td>nend</td><td>AND A.NENDO = '年度'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>回数</td><td>kaisu</td><td>AND A.KAISU = '回数'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：姓）</td><td>nameKanjiSei</td><td>AND A.NAME_KANJI_SEI like '%申請者名（漢字)%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：名）</td><td>nameKanjiMei</td><td>AND A.NAME_KANJI_MEI like '%申請者名（漢字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：姓）</td><td>nameKanaSei</td><td>AND A.NAME_KANA_SEI like '%申請者名（カナ：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：名）</td><td>nameKanaMei</td><td>AND A.NAME_KANA_MEI like '%申請者名（カナ：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：姓）</td><td>nameRoSei</td><td>AND UPPER(A.NAME_RO_SEI) like '%申請者名（ローマ字：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：名）</td><td>nameRoMei</td><td>AND UPPER(A.NAME_RO_MEI) like '%申請者名（ローマ字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>shozokuCd</td><td>AND A.SHOZOKU_CD = '所属機関コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>細目番号</td><td>bunkasaimokuCd</td><td>AND (A.BUNKASAIMOKU_CD = '細目番号' OR A.BUNKASAIMOKU_CD2 = '細目番号')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>海外分野</td><td>kaigaiBunyaName</td><td>AND (A.KAIGAIBUNYA_NAME LIKE '%海外分野%' OR A.KAIGAIBUNYA_NAME_RYAKU LIKE '%海外分野%')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請番号</td><td>uketukeNo</td><td>AND A.UKETUKE_NO = '申請番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>評価（点）（高）</td><td>hyokaHigh</td><td>AND NVL(A.KEKKA1_TEN, -1) <= '評価（点）（高）'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>評価（点）（低）</td><td>hyokaLow</td><td>AND A.KEKKA1_TEN >= '評価（点）（低）'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業区分</td><td>jigyoKubun</td><td>AND A.JIGYO_KUBUN = '事業区分'</td></tr>
     * </table><br><br>
     * 
     * 　(b)第二引数searchInfoの変数hyojiHoshikiKiban(表示方式（基盤用）)が"2"のとき<br>
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     A.SYSTEM_NO                    -- システム番号
     *     , A.NENDO                    -- 年度
     *     , A.KAISU                    -- 回数
     *     , A.JIGYO_NAME                -- 事業名
     *     , A.BUNKASAIMOKU_CD            -- 細目番号
     *     , A.SAIMOKU_NAME                -- 細目名
     *     , A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野名(略称)
     *     , A.SHOZOKU_NAME_RYAKU        -- 所属機関名
     *     , A.BUKYOKU_NAME_RYAKU        -- 部局名
     *     , A.SHOKUSHU_NAME_RYAKU        -- 職種名
     *     , A.NAME_KANJI_SEI            -- 申請者氏名(漢字等-姓)
     *     , A.NAME_KANJI_MEI            -- 申請者氏名(漢字等-名)
     *     , A.UKETUKE_NO                -- 申請番号
     *     , A.KEKKA1_TEN_SORTED        -- 一時審査結果(総合評点)
     *     , A.KEKKA1_TEN                -- 一時審査結果(計)
     *     , B.COMMENTS                    -- コメント
     *     , B.SHINSAIN_NO                -- 審査員氏名(漢字等-姓)
     *     , B.SHINSAIN_NAME_KANJI_SEI        -- 審査員氏名(漢字等-姓)
     *     , B.SHINSAIN_NAME_KANJI_MEI        -- 審査員氏名(漢字等-名)
     *     , A.JIGYO_KUBUN                -- 事業区分
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     *     , SHINSAKEKKA B                -- 審査結果テーブル
     * WHERE
     *     EXISTS (SELECT *
     *     FROM
     *         SHINSEIDATAKANRI A        -- 申請データ管理テーブル
     *         , SHINSAKEKKA B            -- 審査結果テーブル
     *     WHERE
     *         A.SYSTEM_NO = B.SYSTEM_NO
     *         AND A.JIGYO_KUBUN = B.JIGYO_KUBUN
     *         AND B.SHINSAIN_NO NOT LIKE '@%'    -- 審査員が1人も割り当てられていない
     *      )
     * 
     *     AND A.DEL_FLG = 0
     *     AND A.JOKYO_ID IN ('08', '09', '10', '11', '12')
     *     AND A.SYSTEM_NO = B.SYSTEM_NO
     *     AND A.JIGYO_KUBUN = B.JIGYO_KUBUN
     * 
     *     --- 動的検索条件1 ---
     * 
     * ORDER BY
     *     TO_NUMBER(NVL(A.KEKKA1_TEN, '-1')) DESC        -- 一時審査結果(計)の降順
     *     , A.KEKKA1_TEN_SORTED DESC        -- 一時審査結果(総合評点)の降順
     *     , A.SYSTEM_NO ASC
     *     , TO_NUMBER(NVL(REPLACE(B.KEKKA_TEN, '-', '0'), '-1')) DESC
     *                         -- 審査結果(点数)の降順
     *     , B.SHINSAIN_NO ASC
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * searchInfoによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業コード</td><td>jigyoCd</td><td>AND SUBSTR(A.JIGYO_ID,3,5) = '事業コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>年度</td><td>nend</td><td>AND A.NENDO = '年度'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>回数</td><td>kaisu</td><td>AND A.KAISU = '回数'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：姓）</td><td>nameKanjiSei</td><td>AND A.NAME_KANJI_SEI like '%申請者名（漢字)%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：名）</td><td>nameKanjiMei</td><td>AND A.NAME_KANJI_MEI like '%申請者名（漢字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：姓）</td><td>nameKanaSei</td><td>AND A.NAME_KANA_SEI like '%申請者名（カナ：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：名）</td><td>nameKanaMei</td><td>AND A.NAME_KANA_MEI like '%申請者名（カナ：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：姓）</td><td>nameRoSei</td><td>AND UPPER(A.NAME_RO_SEI) like '%申請者名（ローマ字：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：名）</td><td>nameRoMei</td><td>AND UPPER(A.NAME_RO_MEI) like '%申請者名（ローマ字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>shozokuCd</td><td>AND A.SHOZOKU_CD = '所属機関コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>細目番号</td><td>bunkasaimokuCd</td><td>AND (A.BUNKASAIMOKU_CD = '細目番号' OR A.BUNKASAIMOKU_CD2 = '細目番号')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>海外分野</td><td>kaigaiBunyaName</td><td>AND (A.KAIGAIBUNYA_NAME LIKE '%海外分野%' OR A.KAIGAIBUNYA_NAME_RYAKU LIKE '%海外分野%')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請番号</td><td>uketukeNo</td><td>AND A.UKETUKE_NO = '申請番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>評価（点）（高）</td><td>hyokaHigh</td><td>AND NVL(A.KEKKA1_TEN, -1) <= '評価（点）（高）'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>評価（点）（低）</td><td>hyokaLow</td><td>AND A.KEKKA1_TEN >= '評価（点）（低）'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業区分</td><td>jigyoKubun</td><td>AND A.JIGYO_KUBUN = '事業区分'</td></tr>
     * </table><br><br>
     * 
     * <b>2.値の返却</b><br>
     * 1.で取得したページ情報を返却する。<br><br>
     * 
     * @param userInfo        UserInfo
     * @param searchInfo    HyokaSearchInfo
     * @return 評価リスト情報を格納したPageオブジェクト
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchHyokaList(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiSearchInfo)
     */
    public Page searchHyokaList(
            UserInfo userInfo,
            HyokaSearchInfo searchInfo)
            throws NoDataFoundException, ApplicationException {

        //DBコネクションの取得
        Connection connection = null;    
        try{
            connection = DatabaseUtil.getConnection();
            
            //---申請書一覧ページ情報
            Page pageInfo = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                if(searchInfo.getJigyoKubun().equals("1")) {
                    pageInfo = dao.searchHyokaList(connection, searchInfo);
                } else if(searchInfo.getJigyoKubun().equals("4")) {
                    if(searchInfo.getHyojiHoshikiKiban().equals("1")) {
                        pageInfo = dao.searchHyokaListKiban(connection, searchInfo);
                    } else if(searchInfo.getHyojiHoshikiKiban().equals("2")) {
                        pageInfo = dao.searchCommentListKiban(connection, searchInfo);
                    }
                }
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
            return pageInfo;
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 評価リストCSVファイルの取得.<br><br>
     * 
     * 評価リストをCSV出力するために、検索条件に該当するレコードをListへ格納し、呼び出し元へ返却する。<br>
     * その際、各レコード情報は列ごとにListへ格納されたうえで返却するListへ格納される。(Listによる2次元配列構造)<br>
     * なお、返却するListの一つ目の要素は、ヘッダー情報を格納する。<br><br>
     * 
     * <b>1.申請評価情報の取得</b><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     B.JIGYO_ID                        -- 事業ID
     *     , B.UKETUKE_NO                    -- 申請番号
     *     , A.NENDO                        -- 年度
     *     , A.KAISU                        -- 回数
     *     , A.JIGYO_NAME                    -- 事業名
     *     , A.NAME_KANJI_SEI                -- 申請者氏名（漢字等-姓）
     *     , A.NAME_KANJI_MEI                -- 申請者氏名（漢字等-名)
     *     , A.SHOZOKU_CD                    -- 所属機関コード
     *     , A.SHOZOKU_NAME                    -- 所属機関名
     *     , A.SHOZOKU_NAME_RYAKU            -- 所属機関名（略称）
     *     , A.BUKYOKU_CD                    -- 部局コード
     *     , A.BUKYOKU_NAME                    -- 部局名
     *     , A.BUKYOKU_NAME_RYAKU            -- 部局名（略称）
     *     , A.SHOKUSHU_CD                    -- 職種コード
     *     , A.SHOKUSHU_NAME_KANJI            -- 職名（和文）
     *     , A.SHOKUSHU_NAME_RYAKU            -- 職名（略称）
     *     , A.KADAI_NAME_KANJI                -- 研究課題名(和文）
     *     , A.KANTEN                        -- 推薦の観点
     *     , A.KEI_NAME                        -- 系等の区分
     *     , A.KENKYU_NO                    -- 申請者研究者番号
     *     , SUBSTR(REPLACE(REPLACE(A.KEKKA1_ABC, 'A', ',A'), 'B', ',B') , 2, 17)
     *                         -- １次審査結果(ABC)
     *     , B.SHINSAIN_NAME_KANJI_SEI            -- 審査員名（漢字等-姓）
     *     , B.SHINSAIN_NAME_KANJI_MEI            -- 審査員名（漢字等-名)
     *     , B.SHOZOKU_NAME SHINSAIN_SHOZOKU_NAME
     *         -- 審査員所属機関名　→　申請者とかぶるので念のためリネーム
     *     , B.BUKYOKU_NAME SHINSAIN_BUKYOKU_NAME    
     *         -- 審査員部局名　→　申請者とかぶるので念のためリネーム
     *     , B.KEKKA_ABC                    -- 審査結果
     *     , B.COMMENT1                        -- コメント1
     *     , B.COMMENT2                        -- コメント2
     *     , B.COMMENT3                        -- コメント3
     *     , B.COMMENT4                        -- コメント4
     *     , B.COMMENT5                        -- コメント5
     *     , B.COMMENT6                        -- コメント6
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     *     , SHINSAKEKKA B                -- 審査結果テーブル
     * WHERE
     *     EXISTS (SELECT *
     *     FROM
     *         SHINSEIDATAKANRI A        -- 申請データ管理テーブル
     *         , SHINSAKEKKA B            -- 審査結果テーブル
     *     WHERE
     *         A.SYSTEM_NO = B.SYSTEM_NO
     *         AND A.JIGYO_KUBUN = B.JIGYO_KUBUN
     *         AND B.SHINSAIN_NO NOT LIKE '@%'    -- 審査員が1人も割り当てられていない
     *      )
     * 
     *     AND A.DEL_FLG = 0
     *     AND A.JOKYO_ID IN ('08', '09', '10', '11', '12')
     *     AND A.SYSTEM_NO = B.SYSTEM_NO
     *     AND A.JIGYO_KUBUN = B.JIGYO_KUBUN
     * 
     *     --- 動的検索条件1 ---
     * 
     * ORDER BY
     * 
     *     --- 動的整列キー ---
     * 
     *     , A.SYSTEM_NO ASC        -- 申請番号の昇順
     *     , A.JIGYO_ID ASC            -- 事業IDの昇順
     *     , B.KEKKA_ABC ASC        -- 審査結果(ABC)の昇順
     *     , B.KEKKA_TEN DESC        -- 審査結果(点数)の降順
     *     , B.SHINSAIN_NO ASC        -- 審査員番号の昇順
     *     , B.JIGYO_KUBUN ASC        -- 事業区分の昇順
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * searchInfoによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>年度</td><td>nend</td><td>AND A.NENDO = '年度'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>回数</td><td>kaisu</td><td>AND A.KAISU = '回数'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請番号</td><td>uketukeNo</td><td>AND A.UKETUKE_NO = '申請番号'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>所属機関コード</td><td>shozokuCd</td><td>AND A.SHOZOKU_CD = '所属機関コード'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>細目番号</td><td>bunkasaimokuCd</td><td>AND (A.BUNKASAIMOKU_CD = '細目番号' OR A.BUNKASAIMOKU_CD2 = '細目番号')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>系統の区分</td><td>keiName</td><td>AND (A.KEI_NAME like '%系統の区分%' OR A.KEI_NAME_RYAKU like '%系統の区分%')</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：姓）</td><td>nameKanjiSei</td><td>AND A.NAME_KANJI_SEI like '%申請者名（漢字)%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（漢字：名）</td><td>nameKanjiMei</td><td>AND A.NAME_KANJI_MEI like '%申請者名（漢字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：姓）</td><td>nameKanaSei</td><td>AND A.NAME_KANA_SEI like '%申請者名（カナ：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（カナ：名）</td><td>nameKanaMei</td><td>AND A.NAME_KANA_MEI like '%申請者名（カナ：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：姓）</td><td>nameRoSei</td><td>AND UPPER(A.NAME_RO_SEI) like '%申請者名（ローマ字：姓）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>申請者名（ローマ字：名）</td><td>nameRoMei</td><td>AND UPPER(A.NAME_RO_MEI) like '%申請者名（ローマ字：名）%'</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>事業区分</td><td>jigyoKubun</td><td>AND A.JIGYO_KUBUN = '事業区分'</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的整列キー</span></b><br>
     * searchInfoによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">条件(hyojiHoshikiの値)</td><td>動的整列キー</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>"1"のとき</td><td>TO_NUMBER(NVL(A.KEKKA1_TEN, '-1')) DESC<br>, NVL(REPLACE(REPLACE(REPLACE(REPLACE(KEKKA1_ABC, 'A-', '3'), 'B-', '1'), 'A', '4'), 'B', '2'), '0') DESC</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>"1"以外のとき</td><td>NVL(REPLACE(REPLACE(REPLACE(REPLACE(KEKKA1_ABC, 'A-', '3'), 'B-', '1'), 'A', '4'), 'B', '2'), '0')DESC<br>, TO_NUMBER(NVL(A.KEKKA1_TEN, '-1')) DESC</td></tr>
     * </table><br><br>
     * 
     * <b>2.申請毎データを作成</b><br>
     * 取得したListが審査員ごととなっているため、申請毎にデータを作り直す。<br><br>
     * 
     * (1)項目名のセット<br>
     * 　CSVの項目名を１行目にセットする。<br>
     * 　カラム名は以下の通り。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * １次審査結果ABC
     * 事業ID
     * 申請番号
     * 年度
     * 回数
     * 事業名
     * 申請者氏名（漢字等-姓）
     * 申請者氏名（漢字等-名）
     * 所属機関コード
     * 所属機関名
     * 所属機関名（略称）
     * 部局コード
     * 部局名
     * 部局名（略称）
     * 職種コード
     * 職名（和文）
     * 職名（略称）
     * 研究課題名（和文）
     * 推薦の観点
     * 系等の区分
     * 申請者研究者番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 続けて以下を審査員の人数分（6人分）格納する。
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * 審査員名（漢字-姓）
     * 審査員名（漢字-名）
     * 審査員所属機関名1        （※1〜6）
     * 審査員部局名1            （※1〜6）
     * 審査結果1                 （※1〜6）
     * コメント1
     * 　：
     * コメント6
     * </pre>
     * </td></tr>
     * </table><br><br>
     * 
     * (2)データ作成<br>
     * 　1.で取得したデータから、1申請毎のリストを取得する。<br><br>
     * 
     * 　１つ前のデータと申請番号・事業IDが一致した場合、同じ申請データなのでコメントを付け加える。<br><br>
     * 
     * 　１つ前のデータと違う申請データの場合、新しく作った1行分の申請データを新CSVリストに登録。<br><br>
     * 
     * 　以上の処理を、1.で取得したデータ件数だけ繰り返す。<br><br>
     * 
     * <b>3.CSVファイルを出力</b><br>
     * (1)CSVファイル出力パスの作成<br>
     * 　[リテラルHYOKA_WORK_FOLDER + WASの本日日付("yyyyMMddHHmmss") + "/"] をファイルパスとする。<br>
     * 　　　※リテラルHYOKA_WORK_FOLDERの値：${shinsei_path}/work/hyoka/<br><br>
     * 
     * (2)CSVファイル出力<br>
     * 　CsvUtilクラスのoutput()メソッドを呼び、CSVファイルを出力する。<br>
     * 　引数に、2.で作成したリスト、(1)で作成したファイルパス、リテラルCSV_FILENAMEを渡す。<br>
     * 　　※CSV_FILENAMEの値："HYOKA"<br><br>
     * 
     * <b>4.依頼書ファイルをコピー</b><br>
     * (1)<br>
     * 　FileUtil.fileCopy()メソッドを呼び、評価結果ファイルをコピーする。<br>
     * 　　fromfile：D:/shinsei-kaken/settings/hyoka/HYOKA.doc (リテラルHYOKA_FORMAT_PATH + リテラルHYOKA_FORMAT_FILE_NAME)<br>　　　　　
     * 　　tofile　：3.で生成したCSVファイル出力パス + "HYOKA.doc"(リテラルHYOKA_FORMAT_FILE_NAME)<br><br>
     * 
     * (2)<br>
     * 　FileUtil.fileCopy()メソッドを呼び、ファイルをコピーする。<br>
     * 　　fromfile：D:/shinsei-kaken/settings/hyoka/$ (リテラルHYOKA_FORMAT_PATH + "$")<br>　　　　　
     * 　　tofile　：3.で生成したCSVファイル出力パス + "$"<br><br>
     * 
     * <b>5.ファイルを圧縮</b><br>
     * (1)圧縮ファイル名作成<br>
     * 　[リテラルCSV_FILENAME + "_" + WASの本日日付("yyyyMMddHHmmss")] をファイル名とする。<br>
     * 　　　※リテラルCSV_FILENAMEの値："HYOKA"<br><br>
     * 
     * (2)圧縮処理<br>
     * 　FileUtilクラスのfileCompress()メソッドを呼び、圧縮処理を行う。<br>
     * 　引数に、3.で作成したファイルパス、3.で作成したファイルパス、(1)で作成したファイル名を渡す。<br><br>
     * 
     * <b>6.ファイル読み込み</b><br>
     * (1)ファイルパス生成<br>
     * 　[3.で生成したCSVファイル出力パス + 5.で作成したファイル名 + ".EXE"]をファイルパスとする。<br><br>
     * 
     * (2)ファイル読み込み<br>
     * 　FileUtilクラスのreadFile()メソッドにて、ファイルを読み込む。<br>
     * 　引数に、(1)で生成したファイルパスを渡す。<br><br>
     * 
     * (3)作業ファイルの削除<br>
     * 　FileUtilクラスのdelete()メソッドにて、作業ファイルを削除する。<br>
     * 　引数に、(1)で生成したファイルパスの親パス名を渡す。<br><br>
     * 
     * <b>7.値の返却</b><br>
     * 6.で生成したファイルリソースを返却する。<br><br>
     * 
     * @param userInfo        UserInfo
     * @param searchInfo    HyokaSearchInfo
     * @return (FileResource)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchCsvHyokaList(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiSearchInfo)
     */
    public FileResource searchCsvHyokaList(
            UserInfo userInfo,
            HyokaSearchInfo searchInfo)
            throws NoDataFoundException, ApplicationException {

        //DBコネクションの取得
        Connection connection = null;    
        try{
            connection = DatabaseUtil.getConnection();
            
            //---申請書一覧ページ情報
            List allList = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                allList = dao.searchCsvHyokaList(connection, searchInfo);//該当レコードを全件取得
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //▼▼▼取得したListが審査員ごととなっているため、申請毎にデータを作り直す
            //CSVの項目名を１行目にセットする
            //2005.10.04 iso 申請→応募、所属機関→所属研究機関、コード→番号、申請書→研究計画調書
            String[] columnArray = new String[COMMENT_INDEX+(SHINSAIN_INFO_NUM+COMMENT_NUM)*SHINSAIN_NUM];
            int col = 0;
            columnArray[col++] = "事業ID";                
            columnArray[col++] = "応募番号";
            columnArray[col++] = "年度";
            columnArray[col++] = "回数";
            columnArray[col++] = "事業名";
            columnArray[col++] = "整理番号(学創用)";
            columnArray[col++] = "応募者氏名（漢字等-姓）";
            columnArray[col++] = "応募者氏名（漢字等-名）";
            columnArray[col++] = "所属研究機関番号";
            columnArray[col++] = "所属研究機関名";
            columnArray[col++] = "所属研究機関名（略称）";
            columnArray[col++] = "部局番号";
            columnArray[col++] = "部局名";
            columnArray[col++] = "部局名（略称）";
            columnArray[col++] = "職種番号";
            columnArray[col++] = "職名（和文）";
            columnArray[col++] = "職名（略称）";
            columnArray[col++] = "研究課題名（和文）";
            columnArray[col++] = "推薦の観点";
            columnArray[col++] = "系等の区分";
            columnArray[col++] = "応募者研究者番号";
            columnArray[col] = "１次審査結果ABC";
            for(int i = 1, comment_col = COMMENT_INDEX; i <= SHINSAIN_NUM; i++) {
                columnArray[comment_col++] = "審査員名（漢字-姓）" + Integer.toString(i);
                columnArray[comment_col++] = "審査員名（漢字-名）" + Integer.toString(i);
                columnArray[comment_col++] = "審査員所属研究機関名" + Integer.toString(i);
                columnArray[comment_col++] = "審査員部局名" + Integer.toString(i);
                columnArray[comment_col++] = "審査結果" + Integer.toString(i);
                for(int j = 1; j <= COMMENT_NUM; j++, comment_col++) {
                    columnArray[comment_col] = "コメント" + Integer.toString(i) + "-" + Integer.toString(j);
                }
            }
                    
            ArrayList newList = new ArrayList(Arrays.asList(columnArray));    //新しく作る1申請毎のリスト(新CSV1行分)
            ArrayList csvList = new ArrayList();                            //CSVとして出力するリスト
            String beforeJigyoId = "0";                                        //1個前の事業ID：初期値0(初めに一致しなければ何でもいい)
            String beforeUketukeNo = "0";                                    //1個前の申請番号：初期値0(初めに一致しなければ何でもいい)

            for(int i = 0; i < allList.size(); i++) {
                ArrayList shinseiList = (ArrayList)allList.get(i);            //元データの1申請毎のリスト(元CSV1行分)
                
                //1個前と申請番号・事業IDが一致した場合、同じ申請データなのでコメントを付け加える。
                if(shinseiList.get(0).equals(beforeJigyoId) && shinseiList.get(1).equals(beforeUketukeNo)) {
                    for(int j = 0; j < SHINSAIN_INFO_NUM+COMMENT_NUM; j++) {
                        newList.add(shinseiList.get(COMMENT_INDEX+j));
                    }
                } else {
                    //1個前と違う申請データの場合、新しく作った1行分の申請データを新CSVリストに登録。
                    //登録後、newListを新しい申請データで初期化。
                    //審査結果の数がきちんとあるデータのみ出力する。
                    if(newList.size() == COMMENT_INDEX+(SHINSAIN_INFO_NUM+COMMENT_NUM)*SHINSAIN_NUM) {
                        csvList.add(newList);
                    }
                    newList = new ArrayList(shinseiList);
                    //現在の事業ID・申請番号を次の判断に使うためにセット。
                    beforeJigyoId = shinseiList.get(0).toString();
                    beforeUketukeNo = shinseiList.get(1).toString();
                }
                //最後のデータは上のelseに引っかからないので、ここでcsvListに格納する。
                if(i == allList.size()-1) {
                    //審査結果の数がきちんとあるデータのみ出力する。
                    if(newList.size() == COMMENT_INDEX+(SHINSAIN_INFO_NUM+COMMENT_NUM)*SHINSAIN_NUM) {
                        csvList.add(newList);
                    }
                }
            }
            //▲▲▲取得したListが審査員ごととなっているため、申請毎にデータを作り直す    

            //-----------------------
            // CSVファイル出力
            //-----------------------
            //ファイル出力パスを指定
            //2005/09/09 takano フォルダ名をミリ秒単位に変更。念のため同時に同期処理も組み込み。
            String filepath = null;
            synchronized(log){
                filepath = HYOKA_WORK_FOLDER + new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date()) + "/";    
            }
            CsvUtil.output(csvList, filepath, CSV_FILENAME);
    
            //-----------------------
            // 依頼書ファイルのコピー
            //-----------------------
            //TODO 所定の位置にフォーマットファイルが無かった場合、エラーにするべきか？
            FileUtil.fileCopy(new File(HYOKA_FORMAT_PATH + HYOKA_FORMAT_FILE_NAME), new File(filepath + HYOKA_FORMAT_FILE_NAME));
            FileUtil.fileCopy(new File(HYOKA_FORMAT_PATH + "$"), new File(filepath + "$"));
    
            //-----------------------
            // ファイルの圧縮
            //-----------------------
            //圧縮ファイル名
            String comp_file_name = CSV_FILENAME + "_" + new SimpleDateFormat("yyyyMMdd").format(new Date());
            //圧縮処理
            FileUtil.fileCompress(filepath, filepath, comp_file_name);
    
            //-------------------------------------
            // 処理状況判定フラグ
            //-------------------------------------
            boolean success = false;
    
            //-------------------------------------
            // 作成したファイルを読み込む。
            //-------------------------------------
            //ファイルを取得する。
            File exe_file = new File(filepath + comp_file_name + ".EXE");
            FileResource hyokaFileResource = null;
    
            try {    
                hyokaFileResource = FileUtil.readFile(exe_file);
                success = true;
            } catch(IOException e) {
                throw new ApplicationException(
                    "作成ファイル'" + comp_file_name + ".EXE'情報の取得に失敗しました。",
                    new ErrorInfo("errors.8005"),
                    e);
            } finally {
                if(success) {
                    //-------------------------------------
                    //作業ファイルの削除
                    //-------------------------------------
                    FileUtil.delete(exe_file.getParentFile());
                }
            }
            return hyokaFileResource;
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

//    CSV出力機能を追加        2005/10/28
    /* 
     * 評価結果一覧をCSV出力
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchCsvData(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.impl.vo.HyokaSearchInfo)
     */
    public List searchCsvData(UserInfo userInfo, HyokaSearchInfo searchInfo)
            throws ApplicationException {

        //DBコネクションの取得
        Connection connection = null;
        try {
            connection = DatabaseUtil.getConnection();
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                return dao.searchCsvData(connection, searchInfo);
            } catch (DataAccessException e) {
                throw new ApplicationException(
                        "申請評価データ検索中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4004"),
                        e);
            } catch(NoDataFoundException e) {
                throw new ApplicationException(
                        "申請評価データが見つかりません。",
                        new ErrorInfo("errors.4000"),
                        e);
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }    

    /**
     * 1次審査結果備考を登録.<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"06"(学振受理)、"08"(審査員割り振り処理後)、"09"(割り振りチェック完了)、
     * "10"(1次審査中)、"11"(1次審査完了)、"12"(2次審査完了)以外のとき、例外をthrowする。<br><br>
     * 
     * <b>3.更新データのセット</b><br>
     * 1次審査備考に第二引数shinsaKekkaRefInfoの変数shinsa1Bikoをセットする。<br><br>
     * 
     * <b>4.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによってバインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?                -- 申請番号
     *     ,JIGYO_ID = ?                -- 事業ID
     *     ,NENDO = ?                    -- 年度
     *     ,KAISU = ?                    -- 回数
     *     ,JIGYO_NAME = ?                -- 事業名
     *     ,SHINSEISHA_ID = ?            -- 申請者ID
     *     ,SAKUSEI_DATE = ?            -- 申請書作成日
     *     ,SHONIN_DATE = ?                -- 所属機関承認日
     *     ,JYURI_DATE = ?                -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?            -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?            -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?            -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                    -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                    -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?        -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?            -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?            -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?            -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?            -- 細目2
     *     ,KANTEN_NO = ?                -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?            -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>5.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo                UserInfo
     * @param shinsaKekkaRefInfo    ShinsaKekkaReferenceInfo
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#regist1stShinsaKekkaBiko(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinsaKekkaReferenceInfo)
     */
    public void regist1stShinsaKekkaBiko(
            UserInfo userInfo,
            ShinsaKekkaReferenceInfo shinsaKekkaRefInfo)
            throws NoClassDefFoundError, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataPk shinseiDataPk = (ShinseiDataPk)shinsaKekkaRefInfo;
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag))
            {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();

            //---学振受理、審査員割り振り処理後、割り振りチェック完了、
            //        1次審査中、1次審査完了、2次審査完了以外の場合はエラー
            if( !(StatusCode.STATUS_GAKUSIN_JYURI.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_SHINSAIN_WARIFURI_SHORIGO.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_WARIFURI_CHECK_KANRYO.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_1st_SHINSATYU.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_1st_SHINSA_KANRYO.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_2nd_SHINSA_KANRYO.equals(jyokyoId)) )
            {
                throw new ApplicationException(
                    "当該申請データは1次審査結果備考を登録可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9013"));
            }            

            //---DB更新---
            try {
                //更新データをセットする
                existInfo.setShinsa1Biko(shinsaKekkaRefInfo.getShinsa1Biko());    //業務担当者備考
                dao.updateShinseiDataInfo(connection, existInfo, true);
                success = true;
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                    } else {
                        DatabaseUtil.rollback(connection);
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }    

    /**
     * 2次審査結果を登録.<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3            -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"06"(学振受理)、"08"(審査員割り振り処理後)、"09"(割り振りチェック完了)、
     * "10"(1次審査中)、"11"(1次審査完了)、"12"(2次審査完了)以外のとき、例外をthrowする。<br><br>
     * 
     * <b>3.更新データのセット</b><br>
     * 申請状況に"12"(2次審査完了)をセットする。<br><br>
     * 
     * 2次審査結果に第二引数shinsaKekka2ndの変数kekka2をセットする。<br><br>
     * 
     * 総経費に第二引数shinsaKekka2ndの変数soukehiをセットする。<br><br>
     * 
     * 初年度経費に第二引数shinsaKekka2ndの変数shonenKehiをセットする。<br><br>
     * 
     * 業務担当者記入欄に第二引数shinsaKekka2ndの変数shinsa2Bikoをセットする。<br><br>
     * 
     * <b>4.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table            -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---        -- システム受付番号
     *                 -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?                -- 申請番号
     *     ,JIGYO_ID = ?                -- 事業ID
     *     ,NENDO = ?                    -- 年度
     *     ,KAISU = ?                    -- 回数
     *     ,JIGYO_NAME = ?                -- 事業名
     *     ,SHINSEISHA_ID = ?            -- 申請者ID
     *     ,SAKUSEI_DATE = ?            -- 申請書作成日
     *     ,SHONIN_DATE = ?                -- 所属機関承認日
     *     ,JYURI_DATE = ?                -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?            -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?            -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?            -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?            -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                    -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                    -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?        -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?            -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?            -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?            -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?        -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?            -- 細目2
     *     ,KANTEN_NO = ?                -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?            -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?        -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                -- XMLの格納パス
     *     ,PDF_PATH = ?                -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>5.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinsaKekka2nd    ShinsaKekka2ndInfo
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#regist2ndShinsaKekka(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinsaKekka2ndInfo)
     */
    public void regist2ndShinsaKekka(
            UserInfo userInfo,
            ShinsaKekka2ndInfo shinsaKekka2nd)
            throws NoDataFoundException, ApplicationException {

        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataPk shinseiDataPk = (ShinseiDataPk)shinsaKekka2nd;
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
            }catch(NoDataFoundException e){
                throw e;
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();

            //---学振受理、審査員割り振り処理後、割り振りチェック完了、
            //        1次審査中、1次審査完了、2次審査完了以外の場合はエラー
            if( !(StatusCode.STATUS_GAKUSIN_JYURI.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_SHINSAIN_WARIFURI_SHORIGO.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_WARIFURI_CHECK_KANRYO.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_1st_SHINSATYU.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_1st_SHINSA_KANRYO.equals(jyokyoId)) &&
                 !(StatusCode.STATUS_2nd_SHINSA_KANRYO.equals(jyokyoId)) )
            {
                throw new ApplicationException(
                    "当該申請データは2次審査結果登録可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9014"));
            }            

            //---DB更新---
            try {
                //更新データをセットする
                existInfo.setJokyoId(StatusCode.STATUS_2nd_SHINSA_KANRYO);    //申請状況
                existInfo.setKekka2(shinsaKekka2nd.getKekka2());              //2次審査結果
                existInfo.setSouKehi(shinsaKekka2nd.getSouKehi());            //総経費
                existInfo.setShonenKehi(shinsaKekka2nd.getShonenKehi());      //初年度経費
                existInfo.setShinsa2Biko(shinsaKekka2nd.getShinsa2Biko());    //業務担当者記入欄
                dao.updateShinseiDataInfo(connection, existInfo, true);
                success = true;
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                    } else {
                        DatabaseUtil.rollback(connection);
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }                
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 添付ファイルのリソースを取得.<br><br>
     * 
     * 自クラスのgetAllTenpuFileRes(UserInfo, ShinseiDataPk)メソッドを呼ぶ。<br>
     * 引数に第一引数userInfo、第二引数shinseiDataPkを渡す。<br><br>
     * 
     * 取得したファイルリソース配列の最初のデータを返却する。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return 添付ファイル(FileResourse)
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#getTenpuFileRes(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public FileResource getTenpuFileRes(UserInfo userInfo, ShinseiDataPk shinseiDataPk)
             throws ApplicationException {
                
        return getAllTenpuFileRes(userInfo, shinseiDataPk)[0];
    }

    /**
     * 添付ファイルのリソースを取得.<br><br>
     * 
     * 複数の添付ファイルリソースを取得する。<br><br>
     * 
     * <b>1.添付ファイル情報の取得</b><br>
     * 以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * "SELECT
     *     A.SYSTEM_NO,                    -- システム受付番号
     *     A.SEQ_TENPU,                    -- シーケンス番号
     *     A.JIGYO_ID,                    -- 事業ID
     *     A.TENPU_PATH,                -- 格納パス
     *     A.PDF_PATH"                    -- 変換ファイル格納パス
     * FROM
     *     TENPUFILEINFO A                -- 添付ファイル管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.ファイルリソース取得</b><br>
     * (1)ファイルパス生成<br>
     * 　1.で取得した添付ファイル情報から、格納パスを取得する。<br>
     * 　格納パスが空のとき、例外をthrowする。<br><br>
     * 
     * 　取得した格納パスから、ファイルパスを生成する。<br><br>
     * 
     * (2)ファイル読み込み<br>
     * 　FileUtilクラスのreadFile()メソッドに生成したファイルパスを渡し、ファイルを読み込む。<br><br>
     * 
     * 　取得したファイルリソースを、ファイルリソース配列(TenpuFileInfo[])に格納する。<br><br>
     * 
     * (1)〜(2)を1.で取得した添付ファイル情報の数だけ繰り返す。<br><br>
     * 
     * <b>3.値の返却</b><br>
     * ファイルリソース配列(TenpuFileInfo[])を返却する。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPk        ShinseiDataPk
     * @return 添付ファイル情報(FileResourse[])
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#getAllTenpuFileRes(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public FileResource[] getAllTenpuFileRes(UserInfo userInfo, ShinseiDataPk shinseiDataPk)
             throws ApplicationException {
        
        FileResource[] fileRes = null;
                
        //DBコネクションの取得
        Connection connection = null;        
        TenpuFileInfo[] fileInfos = null;
        try{
            try{
                connection = DatabaseUtil.getConnection();
                TenpuFileInfoDao tenpuDao = new TenpuFileInfoDao(userInfo);
                fileInfos = tenpuDao.selectTenpuFileInfos(connection, shinseiDataPk);
            }catch(DataAccessException e){
                throw new FileIOException(
                "添付ファイル管理テーブル検索中にDBエラーが発生しました。",
                e);
            }catch(NoDataFoundException e){
                throw new FileIOException(
                "添付ファイル管理テーブル検索中に該当するデータが見つかりません。" ,
                e);                
            }
            
            fileRes = new FileResource[fileInfos.length];
            for (int i = 0; i < fileInfos.length; i++) {
                String tepupath = fileInfos[i].getTenpuPath();
                if(tepupath == null || tepupath.equals("")){
                    throw new FileIOException(
                        "ファイルパスが不正です。ファイルパス'" + tepupath + "'");            
                }
                FileResource res = null;
                try{
                    File file = new File(tepupath);
                    res = FileUtil.readFile(file);
                }catch(FileNotFoundException e){
                    throw new FileIOException(
                        "ファイルが見つかりませんでした。",            
                        e);
                }catch(IOException e){
                    throw new FileIOException(
                        "ファイルの入出力中にエラーが発生しました。",
                        e);
                }
                fileRes[i] = res;
            }
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
        return fileRes;
    }

//add start dyh 2006/06/02
    /**
     * 一括受理.<br><br>
     * 
     * 一括受理データを表示。（学創、特推、基盤で使用）
     * 
     * @param userInfo
     * @param searchInfo
     * @param systemNos
     * @return Page
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    public Page getShinseiJuriAll(
            UserInfo userInfo,
            ShinseiSearchInfo searchInfo,
            String[] systemNos)
            throws NoDataFoundException, ApplicationException{

        // DBコネクションの取得
        Connection connection = null;
        try{
            connection = DatabaseUtil.getConnection();
            
            //---申請書一覧ページ情報
            Page pageInfo = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                pageInfo = dao.selectShinseiDataInfoList(connection,searchInfo,systemNos);   //該当レコードを全件取得
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }
        
            return pageInfo;
        
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }
//add end dyh 2006/06/02

//    2005/04/22 追加 ここから-----------------------------------------
//    学創・特推用一括受理処理
    /**
     * 一括受理.<br><br>
     * 
     * 一括受理登録を行う。（学創・特推で使用）
     * 
     * @param userInfo
     * @param pks	受理対象キー
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    public synchronized List registShinseiJuriAll(
            UserInfo userInfo,List pks)
            throws NoDataFoundException, ApplicationException{

        List lstErrors = new ArrayList();

        Connection   connection  = null;
        boolean     success     = false;
// 2007/02/06 張志男　追加ここから
        /** ログ（getSystemNos） */
        // 更新前
        String strBeforeSystemNos = "" ;
        // 更新後
        String strAfterSystemNos = "" ;
        // 更新失敗
        String strErrorSystemNo = "" ;
// 2007/02/06 張志男　追加ここまで
        
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();

            //申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            ShinseiDataInfo existInfo = null;
            
// 2007/02/26 張志男　追加ここから            
            for (int i = 0; i < pks.size(); i++) {
                strBeforeSystemNos = strBeforeSystemNos + pks.get(i).toString() + ",";
            }

            /** ログ（更新前） */
            strBeforeSystemNos = "(" + strBeforeSystemNos.trim().substring(0, strBeforeSystemNos.length() - 1) + ")";
          statusLog.info( " 応募情報一括受理前 , ユーザ種別 : " + userInfo.getRole() 
          + " , ログインID : " + userInfo.getId() 
          + " , システム受付番号" + strBeforeSystemNos );
//          ADD　START 2007/07/20 BIS 趙一非
              //制度改正カスタマイズ
              //一括受理ログ出力
            juriLog.info( " 応募情報一括受理を開始しました , ユーザ種別 : " + userInfo.getRole() 
                    + " , ログインID : " + userInfo.getId());
//          ADD　END 2007/07/20 BIS 趙一非
//2007/02/26　張志男　追加ここまで
            
            existInfo = null;
            
            for(int i=0; i<pks.size(); i++){
            	//ADD START 2007/07/20 BIS 趙一非
            	//制度改正カスタマイズ
            	//・1,000件単位で途中経過のログを出力する。
            	//システム時間, "応募情報一括受理を処理中（1000件）です", ユーザ種別, ログインID
            	
            	if(0==(i%1000)&0!=i)
            	{
            		juriLog.info(" 応募情報一括受理を処理中（"+i+"件）です , ユーザ種別 : " + userInfo.getRole()
                            + " , ログインID : " + userInfo.getId());
            	}
            	//ADD END 2007/07/20 BIS 趙一非
                ShinseiDataPk pkInfo = new ShinseiDataPk();
                pkInfo.setSystemNo(pks.get(i).toString());
// 2007/02/06 張志男　追加ここから
                /** ログ 更新後（getSystemNos） */
                strAfterSystemNos = strAfterSystemNos + pkInfo.getSystemNo() + ",";
                /** ログ 更新失敗 */
                strErrorSystemNo = pkInfo.getSystemNo();
// 2007/02/06 張志男　追加ここまで
                //排他制御のため既存データを取得する
                try{
                    existInfo = dao.selectShinseiDataInfoForLock(connection, pkInfo, true);                    
                }catch(NoDataFoundException e){
                    throw e;
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "申請書管理データ排他取得中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }

                //---申請データ削除フラグチェック---
                String delFlag = existInfo.getDelFlg(); 
                if(FLAG_APPLICATION_DELETE.equals(delFlag)) {
                    throw new ApplicationException(
                        "当該申請データは削除されています。SystemNo=" + pkInfo.getSystemNo(),
                        new ErrorInfo("errors.9001"));
                }

                //---申請データステータスチェック---
                String jyokyoId = existInfo.getJokyoId();
                //---学振処理中、学振受理、学振不受理以外の場合はエラー
                if( !(StatusCode.STATUS_GAKUSIN_SHORITYU.equals(jyokyoId)) &&
                     !(StatusCode.STATUS_GAKUSIN_JYURI.equals(jyokyoId)) &&
                      !(StatusCode.STATUS_GAKUSIN_FUJYURI.equals(jyokyoId)))
                {
                    throw new ApplicationException(
                        "当該申請データは受理可能なステータスではありません。SystemNo="
                        + pkInfo.getSystemNo(),
                        new ErrorInfo("errors.9015"));
                }
                //---受理登録時の重複申請チェック---
                if(CHECK_DUPLICACATION_FLAG){
                    if(!checkDuplicationForJuri(connection, userInfo, existInfo)){
                        throw new ApplicationException(
                            "申請受理登録時に重複申請が見つかりました。SystemNo="
                            + pkInfo.getSystemNo(),
                            new ErrorInfo("errors.9017"));
                    }
                }

/****************************************************************************************************************************/
// TODO:研究者の存在チェック
                KenkyushaMaintenance kenkyusha        = new KenkyushaMaintenance();
                KenkyushaInfo shinseishaInfo        = new KenkyushaInfo();
                KenkyushaPk kenkyuPk                = new KenkyushaPk();
                String shozokuCd                    = existInfo.getDaihyouInfo().getShozokuCd();
                String kenkyuNo                        = existInfo.getDaihyouInfo().getKenkyuNo();
                kenkyuPk.setShozokuCd(shozokuCd);
                kenkyuPk.setKenkyuNo(kenkyuNo);
                try{
                    shinseishaInfo = kenkyusha.select(userInfo, kenkyuPk);
                }catch(NoDataFoundException ex){
//2005/9/9 出力メッセージ変更
//                    if(!lstErrors.contains(ex.getMessage())){
//                        lstErrors.add(ex.getMessage());
//                    }
                    //(申請番号)[研究者姓_研究者名]研究者番号と表示する
                    lstErrors.add("研究者マスタに以下の研究者が存在しません。：("
                                + existInfo.getUketukeNo() + ")["
                                + existInfo.getDaihyouInfo().getNameKanaSei() + "_"
                                + existInfo.getDaihyouInfo().getNameKanaMei() + "]"
                                + existInfo.getDaihyouInfo().getKenkyuNo());
                }catch(ApplicationException ex){
                    throw new ApplicationException("一括受理実行中にエラーが発生しました。",new ErrorInfo("errors.4004"),ex);
                }finally{
                }
/****************************************************************************************************************************/

                try{
                    //---審査結果テーブルを作成---
                    ShinsaKekkaInfoDao shinsaKekkaDao = new ShinsaKekkaInfoDao(userInfo);
                    //現行データを削除
                    shinsaKekkaDao.deleteShinsaKekkaInfo(connection, pkInfo);                
                    
                    //新規データを作成
                    ShinsaKekkaInfo shinsaKekkaInfo = new ShinsaKekkaInfo();
                    shinsaKekkaInfo.setSystemNo(existInfo.getSystemNo());                            //システム番号
                    shinsaKekkaInfo.setUketukeNo(existInfo.getUketukeNo());                            //申請番号
                    shinsaKekkaInfo.setJigyoKubun(existInfo.getKadaiInfo().getJigyoKubun());        //事業区分                                    
                    shinsaKekkaInfo.setShinsaKubun(existInfo.getKadaiInfo().getShinsaKubun());        //審査区分
                    shinsaKekkaInfo.setJigyoId(existInfo.getJigyoId());                                //事業ID
                    shinsaKekkaInfo.setJigyoName(existInfo.getJigyoName());                            //事業名
                    shinsaKekkaInfo.setBunkaSaimokuCd(existInfo.getKadaiInfo().getBunkaSaimokuCd());//細目番号
                    shinsaKekkaInfo.setShinsaJokyo("0");                                            //審査状況
// 2006/07/17 苗　修正ここから                
                    //審査員番号、シーケンス番号が異なるレコードを作成する、完全電子化の基盤SABは12個、学創・特推は6個
                    int shinsainNum = 0;
//2006/07/19 孟　修正ここから                           
//                    String jigyoCd = existInfo.getJigyoId().substring(2,7);
//  
//                    if(IJigyoCd.JIGYO_CD_KIBAN_S.equals(jigyoCd)
//                            || IJigyoCd.JIGYO_CD_KIBAN_A_IPPAN.equals(jigyoCd)
//                            || IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI.equals(jigyoCd)
//                            || IJigyoCd.JIGYO_CD_KIBAN_B_IPPAN.equals(jigyoCd)
//                            || IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI.equals(jigyoCd)){
//                        shinsainNum = 12;
//                    } else {
//                        shinsainNum = 6;
//                    }
                    String jigyoKubun = existInfo.getKadaiInfo().getJigyoKubun();
                    
                    if(IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(jigyoKubun)
                            ||IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(jigyoKubun)
                            ||IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(jigyoKubun)){
                        shinsainNum = 12;
                    } else if(IJigyoKubun.JIGYO_KUBUN_GAKUSOU_HIKOUBO.equals(jigyoKubun)
                            ||IJigyoKubun.JIGYO_KUBUN_GAKUSOU_KOUBO.equals(jigyoKubun)){
                        shinsainNum = 6;
                    }
//2006/07/19　孟　修正ここまで    
                    for(int j = 0 ; j < shinsainNum ; j++){
                        shinsaKekkaInfo.setShinsainNo("@"+ StringUtil.fillLZero(new Integer(j+1).toString(),6));//審査員番号(7桁)                 
                        shinsaKekkaInfo.setSeqNo(new Integer(j+1).toString());//シーケンス番号
                        shinsaKekkaDao.insertShinsaKekkaInfo(connection, shinsaKekkaInfo);                                              
                    }
//2006/07/17　苗　修正ここまで       
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "審査結果情報登録中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
                
                //---DB更新---
                try{
                    //更新データをセットする
                    //申請フラグが「1（再申請中）」の場合は「2（再申請済み）」に変更
                //BIS 趙一非　ADD START
                //「OK」ボタンを押した時、SAISHINSEI_FLG=1なら、SAISHINSEI_FLG=2に更新する。
                //on change
                // BIS 趙一非　ADD END
                	if((StatusCode.SAISHINSEI_FLG_SAISHINSEITYU).equals(existInfo.getSaishinseiFlg())){
                        existInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_SAISHINSEIZUMI);
                    }
                    existInfo.setJokyoId(StatusCode.STATUS_GAKUSIN_JYURI);    //申請状況「06：学振受理」
                    existInfo.setJuriKekka(FLAG_JURI_KEKKA_JURI);            //受理結果
                    existInfo.setJuriBiko("");                                //受理結果備考
                    existInfo.setJyuriDate(new Date());                        //学振受理日
                    dao.updateShinseiDataInfo(connection, existInfo, true);
                } catch (DataAccessException e) {
                    throw new ApplicationException(
                        "申請情報更新中にDBエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }

                // 20050825 エラーの有無による判別を追加
                if(!lstErrors.isEmpty()){
                    success = false;
                }
                else{
                    success = true;
                }
            }
            
        } catch (ApplicationException e) {
            throw new ApplicationException(
            "申請情報更新中にDBエラーが発生しました。",
            new ErrorInfo("errors.4001"),
            e);
        } finally {
            try {
                if (success) {
                    DatabaseUtil.commit(connection);
                    
//  2007/02/06 張志男　追加ここから
                    /** ログ 更新後（getSystemNos） */
                    strAfterSystemNos = "(" + strAfterSystemNos.trim().substring(0, strAfterSystemNos.length() - 1) + ")";
                  statusLog.info(" 応募情報一括受理後 , ユーザ種別 : " + userInfo.getRole()
                  + " , ログインID : " + userInfo.getId() 
                  + " , システム受付番号" + strAfterSystemNos);
                    //ADD　START 2007/07/20 BIS 趙一非
                    //制度改正カスタマイズ
                    //一括受理ログ出力
                    juriLog.info(" 応募情報一括受理が正常に終了しました, ユーザ種別 : " + userInfo.getRole()
                            + " , ログインID : " + userInfo.getId());
                    //ADD　END 2007/07/20 BIS 趙一非
//  2007/02/06　張志男　追加ここまで
                } else {
                    DatabaseUtil.rollback(connection);
//  2007/02/06 張志男　追加ここから
                    /** ログ 更新失敗 */ 
                  statusLog.info( " 応募情報一括受理失敗 , ユーザ種別 : " + userInfo.getRole() 
                  + " , ログインID : " + userInfo.getId() 
                  + " , システム受付番号 : " + strErrorSystemNo );
                  //ADD　START 2007/07/20 BIS 趙一非
                    //制度改正カスタマイズ
                    //一括受理ログ出力
                    juriLog.info( " 応募情報一括受理に失敗しました , ユーザ種別 : " + userInfo.getRole() 
                            + " , ログインID : " + userInfo.getId());
                    //ADD　END 2007/07/20 BIS 趙一非
//  2007/02/06　張志男　追加ここまで                   
                }
            } catch (TransactionException e) {
                throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
            } finally{
                DatabaseUtil.closeConnection(connection);
            }
        }
        return lstErrors;
    }
// 追加 ここまで--------------------------------------------------------------

    /**
     * 研究者情報のチェックメソッド（研究者番号でのみチェックする）
     * @param connection
     * @param userInfo
     * @param shinseiInfo
     * @param errors エラー情報リスト
     * @throws ApplicationException
     * @throws NoDataFoundException
     */
    public void checkKenkyuusha(
            Connection connection,
            UserInfo userInfo,
            ShinseiDataInfo shinseiInfo,
            List errors)
            throws ApplicationException, NoDataFoundException{

        List kenkyushaList = shinseiInfo.getKenkyuSoshikiInfoList();
        //List errors = new ArrayList();
        ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);

        String chSQL = "SELECT" +
                        " COUNT(KENKYU_NO) " + STR_COUNT + " " +
                        "FROM" +
                        " (SELECT DISTINCT KENKYU_NO FROM MASTER_KENKYUSHA WHERE KENKYU_NO = '";

        //プロパティ名
        String property = "shinseiDataInfo.kenkyuSoshikiInfoList.kenkyuNo";

        //研究組織情報チェック
        for(int i=1; i<=kenkyushaList.size(); i++){
            KenkyuSoshikiKenkyushaInfo kenkyushaInfo = (KenkyuSoshikiKenkyushaInfo)kenkyushaList.get(i-1);
            
            //研究者番号の取得
            String kenkyuNo = StringUtil.toHankakuDigit(kenkyushaInfo.getKenkyuNo());
            
            //研究者番号が99999999である場合、存在チェックを行わない
            if (KENKYUU_ERROR_NO.equals(kenkyuNo)) {
                continue;
            }
            
            String chStr = chSQL + EscapeUtil.toSqlString(kenkyuNo) + "')";
            //for debug
            if(log.isDebugEnabled()){log.debug("query:" + chStr);}

            String msg      = "研究組織表 研究者番号 "+i+"行目";
            
            try{
                if("0".equals(dao.selectKenkyuushaCount(connection, chStr).toString())){
//                    errors.add("研究者チェック　" + String.valueOf(i) + "行目：" + kenkyushaInfo.getKenkyuNo().toString());
//                    errors.add("研究者番号　" + String.valueOf(i) + "行目が間違っています。");
                    errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
                }
            }catch(DataAccessException ex){
                throw new ApplicationException(
                        "研究者情報の検索中にエラーが発生しました。",
                        new ErrorInfo("errors.4004")
                        );
            }catch(NoDataFoundException ex){
//                errors.add("研究者チェック　" + String.valueOf(i) + "行目：" + kenkyushaInfo.getKenkyuNo().toString());
//                errors.add("研究者番号　" + String.valueOf(i) + "行目が間違っています。");
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
        }
    }

// 20050713
    /**
     * 若手研究の年齢制限チェック
     * @param userInfo
     * @param dataInfo
     * @return boolean
     */
    boolean blnWakateLimitCheck(UserInfo userInfo, ShinseiDataInfo dataInfo) {

        boolean blnResult = true;
// 2006/02/13 Update 
        if ((dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_SHOKUSHINHI_WAKATE_A)|| //特別研究促進費（若手研究(A)相当）
             dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_SHOKUSHINHI_WAKATE_B)|| //特別研究促進費（若手研究(B)相当）
             dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_A) || //若手A
//2007/02/03 苗　追加ここから
             dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S) || //若手S
//2007/02/03　苗　追加ここまで             
             dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_B)) && //若手B
             dataInfo.getShinseiKubun().equals(IShinseiMaintenance.SHINSEI_NEW) //新規
        ) {
// Nae End
            if (dataInfo.getDaihyouInfo().getNenrei() == null
                    || dataInfo.getDaihyouInfo().getNenrei().length() < 1) {
                //TODO:年齢が異常値であった場合
                dataInfo.getDaihyouInfo().setNenrei("0");
                blnResult = false;
                //2005.08.15 iso 年齢チェックに引っかかった場合、ログを出力
                log.info("年齢制限チェック");
                log.info("年齢=" + dataInfo.getDaihyouInfo().getNenrei());
            }
//2007/02/03 苗　追加ここから
            if (dataInfo.getJigyoCd().equals(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S)){
                if (Integer.parseInt(dataInfo.getDaihyouInfo().getNenrei()) > WAKATE_S_LIMIT
                        || Integer.parseInt(dataInfo.getDaihyouInfo().getNenrei()) <= 0) {
                    //制限年齢より大きい、0以下の場合
                    blnResult = false;
                    log.info("年齢制限チェック");
                    log.info("年齢=" + dataInfo.getDaihyouInfo().getNenrei());
                }
            } else {
//2007/02/03　苗　追加ここまで            
                if (Integer.parseInt(dataInfo.getDaihyouInfo().getNenrei()) > WAKATE_LIMIT
                        || Integer.parseInt(dataInfo.getDaihyouInfo().getNenrei()) <= 0) {
                    //制限年齢より大きい、0以下の場合
                    blnResult = false;
                    //2005.08.15 iso 年齢チェックに引っかかった場合、ログを出力
                    log.info("年齢制限チェック");
                    log.info("年齢=" + dataInfo.getDaihyouInfo().getNenrei());
                }
            }
        }
        return blnResult;
    }

// 20050725 
    /**
     * キーワードマスタの存在チェック
     * @param connection
     * @param userInfo
     * @param dataInfo
     * @return boolean
     * @throws ApplicationException
     * @throws NoDataFoundException
     */
//    boolean blnKeyWordCheck(
//            Connection connection,
//            UserInfo userInfo,
//            ShinseiDataInfo dataInfo)
//            throws ApplicationException, NoDataFoundException {
//
//        boolean blnResult = false;            //結果
//
//        //キーワードマスタの検索情報を抽出
//        String chSaimokuNo = dataInfo.getKadaiInfo().getBunkaSaimokuCd();
//        String chBunkatuNo = dataInfo.getKadaiInfo().getBunkatsuNo();
//        String chKeyWordCd = dataInfo.getKigou();
//        String jigyoKubun = dataInfo.getKadaiInfo().getJigyoKubun();
//        String jigyoCd = dataInfo.getJigyoCd();
//        //2005/08/23 takano 分割番号がnullの場合は条件から除外するように変更したため削除 ここから -----
//        //分割NOがNULLの場合、キーワードマスタには−(ハイフン)が登録されているため
//        //if(chBunkatuNo == null || chBunkatuNo.length() <= 0){
//        //    chBunkatuNo = "-";
//        //}
//        //2005/08/23 takano 分割番号がnullの場合は条件から除外するように変更したため削除 ここまで -----
//
//        //基盤C(一般)の場合
//        if((IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd()) &&
//                (chBunkatuNo == null || chBunkatuNo.length() <= 0) )
//                || (IJigyoCd.JIGYO_CD_SHOKUSHINHI_KIBAN_C.equals(dataInfo.getJigyoCd()) &&
//                        (chBunkatuNo == null || chBunkatuNo.length() <= 0))) {
//                chBunkatuNo = "-";
//            }
//        
//        if (((IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(jigyoKubun)
//                && !IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI.equals(jigyoCd) && !IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI
//                .equals(jigyoCd)) || IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI
//                .equals(jigyoKubun))
//                && (chSaimokuNo == null || chSaimokuNo.length() <= 0
//                        || chKeyWordCd == null || chKeyWordCd.length() <= 0)) {
//            return blnResult;
//        }
//
//        try{
//            MasterKeywordInfoDao dao = new MasterKeywordInfoDao(userInfo);
//            
//        //2005/08/23 takano 細目キーワード取得ロジックを修正 ここから -----
//            //KeywordPk keywordPK = new KeywordPk(chSaimokuNo,chBunkatuNo,chKeyWordCd);
//            //KeywordInfo keyResult = new KeywordInfo();
//            //keyResult = dao.selectKeywordInfo(connection,keywordPK);
//            //仮に複数ヒットした場合は、最初に見つかったレコードを参照する
//            KeywordInfo keyResult = dao.selectKeywordInfo(connection,
//                                                          chSaimokuNo,
//                                                          chBunkatuNo,
//                                                          chKeyWordCd)[0];
//        //2005/08/23 takano 細目キーワード取得ロジックを修正 ここまで -----
//            
//            if(keyResult == null || keyResult.getKeywordCd().length()<=0){
//                throw new NoDataFoundException(
//                        "該当しないキーワードが入力されています。",
//                        new ErrorInfo("errors.5053"));
//            }
//            else{
//                dataInfo.setKeyName(keyResult.getKeyword());
//                blnResult = true;
//            }
//
//        }catch(DataAccessException ex){
//            throw new ApplicationException(
//                    "キーワードの検索でエラーが発生しました。",
//                    new ErrorInfo("errors.4004"));
//        }catch(NoDataFoundException ex){
//            throw new NoDataFoundException(
//                    "該当しないキーワードが入力されています。",
//                    new ErrorInfo("errors.5053"));
//        }
//        finally{
//            //TODO:
//        }
//        return blnResult;
//    }
    boolean blnKeyWordCheck(Connection connection, UserInfo userInfo,
            ShinseiDataInfo dataInfo) throws ApplicationException,
            NoDataFoundException {

        boolean blnResult = false; //結果

        //キーワードマスタの検索情報を抽出
        String chSaimokuNo = dataInfo.getKadaiInfo().getBunkaSaimokuCd();
        String chBunkatuNo = dataInfo.getKadaiInfo().getBunkatsuNo();
        String chKeyWordCd = dataInfo.getKigou();
        String jigyoKubun = dataInfo.getKadaiInfo().getJigyoKubun();
        String jigyoCd = dataInfo.getJigyoCd();

        try {
            //分科細目マスタ
            MasterSaimokuInfoDao saimokuInfoDao = new MasterSaimokuInfoDao(userInfo);
   
            SaimokuInfo saimokuInfo = new SaimokuInfo();
            
            SaimokuPk saimokuPk = new SaimokuPk(chSaimokuNo, chBunkatuNo);
            //分科細目マスタに、分割番号を取得する
            saimokuInfo = saimokuInfoDao.selectSaimokuInfoForCheck(connection, saimokuPk);

            //基盤C(一般)の場合
            if ((IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd()) 
                    && (chBunkatuNo == null || chBunkatuNo.length() <= 0))) {
                chBunkatuNo = "-";
            }
            
            //特別研究促進費（年複数回応募の試行）の場合
            if (IJigyoCd.JIGYO_CD_SHOKUSHINHI_KIBAN_C.equals(dataInfo.getJigyoCd())
                    && StringUtil.isBlank(chBunkatuNo)) {
//<!-- UPDATE　START 2007/07/24 BIS 張楠 -->      
//分割番号（BUNKATSU_NO）が「1」「2」「3」「4」「5」の場合            	
//                if (!saimokuInfo.getBunkatsuNo().equals("1") 
//                        && !saimokuInfo.getBunkatsuNo().equals("2")) {
//                    chBunkatuNo = "-";
//                }
            	if (!saimokuInfo.getBunkatsuNo().equals("1") 
                        && !saimokuInfo.getBunkatsuNo().equals("2")
                        && !saimokuInfo.getBunkatsuNo().equals("3")
                        && !saimokuInfo.getBunkatsuNo().equals("4")
                        && !saimokuInfo.getBunkatsuNo().equals("5")) {
                    chBunkatuNo = "-";
                }
//<!-- UPDATE　END 2007/07/24 BIS 張楠 -->            	
            }


            if (((IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(jigyoKubun)
                        && !IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI.equals(jigyoCd) 
                        && !IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI.equals(jigyoCd)) 
                    || (IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(jigyoKubun) 
                        && !IJigyoCd.JIGYO_CD_SHOKUSHINHI_KIBAN_C.equals(dataInfo.getJigyoCd())))
                    && (StringUtil.isBlank(chSaimokuNo) || StringUtil.isBlank(chKeyWordCd))) {
                return blnResult;
            }
            
            //キーワードマスタ
            MasterKeywordInfoDao dao = new MasterKeywordInfoDao(userInfo);
            
            KeywordInfo keyResult = dao.selectKeywordInfo(connection,
                    chSaimokuNo, chBunkatuNo, chKeyWordCd)[0];

            if (keyResult == null || keyResult.getKeywordCd().length() <= 0) {
                throw new NoDataFoundException("該当しないキーワードが入力されています。",
                        new ErrorInfo("errors.5053"));
            } else {
                dataInfo.setKeyName(keyResult.getKeyword());
                blnResult = true;
            }

        } catch (DataAccessException ex) {
            throw new ApplicationException("キーワードの検索でエラーが発生しました。",
                    new ErrorInfo("errors.4004"));
        } catch (NoDataFoundException ex) {
            throw new NoDataFoundException("該当しないキーワードが入力されています。",
                    new ErrorInfo("errors.5053"));
        } finally {
            //TODO:
        }
        return blnResult;
    }
// Horikoshi

    /**
     * 本登録時、必須項目チェック
     * 代表者情報の職名、細目番号等
     * @param connection
     * @param userInfo
     * @param daihyoInfo
     * @param errors エラー情報リスト
     */
    private void checkHissuItem(
            Connection connection,
            UserInfo userInfo,
            ShinseiDataInfo dataInfo,
            List errors){

        DaihyouInfo daihyoInfo = dataInfo.getDaihyouInfo();
        
        String shokushuCd = daihyoInfo.getShokushuCd();
        String shokushuName = daihyoInfo.getShokushuNameKanji();

        String msg      = "職";
        String property = "shinseiDataInfo.daihyouInfo.shokushuNameKanji";
        
        if ("25".equals(shokushuCd)){
            //職コードが25である場合、全角又は半角又は「その他」のみを入力する時エラーとする 
            if ( StringUtil.isSpaceString(shokushuName) ){
                errors.add(new ErrorInfo("errors.required", new String[]{msg}, property));
            }
            //「そのた」を入力した場合もエラーとする
            else if ("その他".equals(shokushuName)){
                errors.add(new ErrorInfo("errors.5060", new String[]{msg, "その他"}, property));
            }
        }
    
        //細目番号などの組み合わせチェック 2005/8/30修正
        //基盤(C)一般で、時限付き細目番号が選択されていない場合、
        //「細目表キーワード必須」のチェックを行う。
        boolean selectFlg = true;                //キーワードを検索するか
//    2006/02/13 Update Start 理由は「特別研究促進費（基盤研究(C)相当）」を追加する
        if (IJigyoCd.JIGYO_CD_KIBAN_C_IPPAN.equals(dataInfo.getJigyoCd())
                || IJigyoCd.JIGYO_CD_SHOKUSHINHI_KIBAN_C.equals(dataInfo.getJigyoCd())) {
            try {
// End Nae
                if(StringUtil.isBlank(dataInfo.getKigou())) {
                    if(Integer.parseInt(dataInfo.getKadaiInfo().getBunkaSaimokuCd()) <= IShinseiMaintenance.MAX_SAIMOKU_NOT_JIGEN) {
                        //細目表キーワードが空で時限細目番号でなければ、必須エラー
                        property = "shinseiDataInfo.kigou";
                        errors.add(new ErrorInfo("errors.required", new String[]{"細目表キーワード"}, property));
                    } else {
                        //細目表キーワードが空で時限細目番号の場合、DB検索を行わないよう設定
                        dataInfo.setKeyName("");
                    }
                    //キーワードが入力されていなかった場合にはキーワードチェックを行わない
                    selectFlg= false;
                }
            } catch (NumberFormatException e) {
                //数値チェックはvalidaton.xmlで行っているので考えない。
            }
         }

        //2005/8/31 細目番号がマスタに存在しない場合、組合せチェックを行わない
// 2006/02/13 Update Start 理由は「特別研究促進費」と「若手研究（スタートアップ）」を追加する
        String jigyoKubun = dataInfo.getKadaiInfo().getJigyoKubun();
        String jigyoCd = dataInfo.getJigyoCd();
        if (selectFlg&& !notSaimokuFlg && 
                ((IJigyoKubun.JIGYO_KUBUN_KIBAN.equals(jigyoKubun) && !IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI.equals(jigyoCd) && !IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI.equals(jigyoCd))
                || IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(jigyoKubun)
                || IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(jigyoKubun))){
// Nae End
            try {
                if (!blnKeyWordCheck(connection, userInfo, dataInfo)) {
                    property = "shinseiDataInfo.kigou";
                    errors.add(new ErrorInfo("errors.5053",
                            new String[] { "" }, property));
//ADD　START 2007-07-12 BIS 劉多良
                    //細目番号と分割番号と細目表キーワードを組み合わせての誤り
                    String propertyRow=property + ".bunkaSaimokuCdbunkatsuNokigou";
                    errors.add(new ErrorInfo("errors.5053",
                            new String[] { "" }, propertyRow));
//ADD　END 2007-07-12 BIS 劉多良
                }
            } catch (NoDataFoundException ex) {
                property = "shinseiDataInfo.kigou";
                // 2006/02/27 Start
                if (IJigyoKubun.JIGYO_KUBUN_WAKATESTART.equals(jigyoKubun)) {
                    msg = "存在しない細目番号を指定しているか細目番号と分割番号の組み合わせ";
                    errors.add(new ErrorInfo("errors.2001",
                            new String[] { msg }, property));
//ADD　START 2007-07-20 BIS 劉多良
            		//組み合わせのエラーを追加する
                    String propertyKumiai = "shinseiDataInfo.kigou.kumiai";
                    errors.add(new ErrorInfo("errors.2001", new String[]{msg}, propertyKumiai));
//ADD　END 2007-07-20 BIS 劉多良
                } else {
                    errors.add(new ErrorInfo("errors.5053",
                            new String[] { "" }, property));
//ADD　START 2007-07-11 BIS 劉多良
                    //細目番号と分割番号と細目表キーワードを組み合わせての誤り
                    String propertyRow=property + ".bunkaSaimokuCdbunkatsuNokigou";
                    errors.add(new ErrorInfo("errors.5053",
                            new String[] { "" }, propertyRow));
//ADD　END 2007-07-11 BIS 劉多良
                }
                // syuu End
            } catch (ApplicationException ex) {
                property = "shinseiDataInfo.kigou";
                errors.add(new ErrorInfo("errors.4004"));
            } finally {
                //TODO:
            }
        }
    }

// 2006/02/13 Start    
    /**
     * 応募資格日付,育休等開始日,採用年月日,育休等終了日のチェック
     * @param userInfo ユーザ情報
     * @param dataInfo
     * @param errors エラー情報リスト
     */
    private void checkMeiboDate(UserInfo userInfo, ShinseiDataInfo dataInfo,
            List errors) {

        DateUtil dateUtil = new DateUtil();
        Date sikakuDate = dataInfo.getSikakuDate();               //資格取得年月日
        Date meboDate = dataInfo.getMeiboDate();                  //研究者名簿締切日
        dateUtil.setCal(Integer.toString(2000 + Integer.parseInt(dataInfo.getNendoSeireki()) - 1),"4","1");
        Date before1Nendo = dateUtil.getDateYYYYMMDD();           //事業年度の前一年
        dateUtil.setCal(Integer.toString(2000 + Integer.parseInt(dataInfo.getNendoSeireki()) - 3),"4","1");
        Date before3Nendo = dateUtil.getDateYYYYMMDD();           //事業年度の前三年
//2006/04/11 追加ここから        
        dateUtil.setCal(Integer.toString(2000 + Integer.parseInt(dataInfo.getNendoSeireki())),"3","31");
        Date nendoMar31 = dateUtil.getDateYYYYMMDD();             //事業年度の3月31日
//苗　追加ここまで        
        Date uketukekikanEnd = dataInfo.getUketukekikanEnd();     //事業学振締切日
        Date saiyoDate = dataInfo.getSaiyoDate();                 //採用年月日
        Date ikukyuStartDate = dataInfo.getIkukyuStartDate();     //育休等開始日
        Date ikukyuEndDate = dataInfo.getIkukyuEndDate();         //育休等終了日
        int isBefore = 0;
        int isAfter = 0;

//2006/04/19 更新ここから
        boolean hasErrSaiyo = false;
        //採用年月日のチェック
        if (saiyoDate != null) {
            //採用年月日：事業年度前年度の4月1日以前（4月1日を含まない）はエラー。
            isBefore = saiyoDate.compareTo(before1Nendo);
            if(isBefore < 0){
                hasErrSaiyo = true;
//                errors.add(new ErrorInfo("errors.9024", new String[]{"採用年月日", DateFormat.format(before1Nendo)},"saiyoDateYear"));
            }
            //採用年月日：事業学振締切日以降（受付締切日を含まない）のチェック。
            isAfter = saiyoDate.compareTo(uketukekikanEnd);
            if(hasErrSaiyo == false && isAfter > 0){
                hasErrSaiyo = true;
//                errors.add(new ErrorInfo("errors.9024", new String[]{"採用年月日", DateFormat.format(uketukekikanEnd)},"saiyoDateYear"));
            }
            if(hasErrSaiyo){
                errors.add(new ErrorInfo("errors.9024", new String[]{"採用年月日"},"saiyoDateYear"));
            }
        }
//苗　更新ここまで
        
        boolean hasErrSikaku = false;
        //資格取得年月日のチェック
        if (sikakuDate != null) {
            //資格取得年月:事業管理に登録されている研究者名簿締切日以前（締切日当日を含む）はエラー。
            isBefore = sikakuDate.compareTo(meboDate);
            if(isBefore <= 0){
                hasErrSikaku = true;
//                if("1".equals(dataInfo.getOuboShikaku())){
//                    errors.add(new ErrorInfo("errors.2001", new String[]{"新たに科研費の応募資格を得た年月日"},"sikakuDateYear"));
//                }else if("2".equals(dataInfo.getOuboShikaku())){
//                    errors.add(new ErrorInfo("errors.2001", new String[]{"再び科研費の応募資格を得た年月日"},"sikakuDateYear"));
//                }
            }
            //資格取得年月:事業学振締切日以降（受付締切日を含まない）はエラー。
            isAfter = sikakuDate.compareTo(uketukekikanEnd);
            if(hasErrSikaku == false && isAfter > 0){
                hasErrSikaku = true;
//                if("1".equals(dataInfo.getOuboShikaku())){
//                    errors.add(new ErrorInfo("errors.2001", new String[]{"新たに科研費の応募資格を得た年月日"},"sikakuDateYear"));
//                }else if("2".equals(dataInfo.getOuboShikaku())){
//                    errors.add(new ErrorInfo("errors.2001", new String[]{"再び科研費の応募資格を得た年月日"},"sikakuDateYear"));
//                }
            }
            if(hasErrSikaku){
                String errObj = "";
                if("1".equals(dataInfo.getOuboShikaku())){
                    errObj = "新たに科研費の応募資格を得た年月日";
                }else{
                    errObj = "再び科研費の応募資格を得た年月日";
                }
                errors.add(new ErrorInfo("errors.2001", new String[]{errObj},"sikakuDateYear"));
            }
        }
//2006/04/15 更新ここから　苗        
        boolean hasErrIkukyu = false;
        //育休等開始日のチェック
        if(ikukyuStartDate != null){
            //育休等開始日:開始日が事業年度−3年の4月1日以前（4月1日を含まない）はエラー。
            isBefore = ikukyuStartDate.compareTo(before3Nendo);
            if(isBefore < 0){
                hasErrIkukyu = true;
//                errors.add(new ErrorInfo("errors.2001", new String[]{"産前産後の休暇の取得期間又は育児休業の取得期間"},"ikukyuStartDate"));
            }
        }
        
        //育休等終了日のチェック
        if(ikukyuEndDate != null && hasErrIkukyu == false){
            //育休等終了日:終了日が事業学振締切日以降（受付締切日を含まない）はエラー。
            isAfter = ikukyuEndDate.compareTo(uketukekikanEnd);
            if(isAfter > 0){
                hasErrIkukyu = true;
//                errors.add(new ErrorInfo("errors.2001", new String[]{"産前産後の休暇の取得期間又は育児休業の取得期間"},"ikukyuEndDate"));
            }
        }
        
//2006/04/11　追加ここから        
        int isBeforeStart = 0;
        int isAfterEnd = 0;
        
        //育休等開始日と育休等終了日のチェック
        if(ikukyuStartDate != null && ikukyuEndDate != null && hasErrIkukyu == false){
            //育休等開始日のチェック:開始日と事業年度3月31日
            isBeforeStart = ikukyuStartDate.compareTo(nendoMar31);

            //育休等終了日のチェック:終了日と事業年度-1年の4月1日
            isAfterEnd = ikukyuEndDate.compareTo(before1Nendo);
            isBefore = ikukyuStartDate.compareTo(ikukyuEndDate);
            //１．育休取得期間の開始日又は終了日は事業年度の前年度（4/1〜3/31）期間にあること
            //２．または、育休取得期間の開始日<=事業年度前年度の4/1且つ育休取得期間の終了日>=事業年度の3/31であること
            if(!(isBeforeStart <= 0 && isAfterEnd >=0 && isBefore < 0)){
                hasErrIkukyu = true;
//                errors.add(new ErrorInfo("errors.2001", new String[]{"産前産後の休暇の取得期間又は育児休業の取得期間"},"ikukyuEndDate"));
            }
        }
        
        if(hasErrIkukyu == true){
            errors.add(new ErrorInfo("errors.2001", new String[]{"産前産後の休暇の取得期間又は育児休業の取得期間"},"ikukyuStartDate"));
        }
//苗　追加ここまで        
    }
// 2006/02/13 Nae
    
//2007/02/08 苗　削除ここから　使用しない
// 2006/02/16 Start    
//    /**
//     * 分野
//     * @param connection
//     * @param dataInfo
//     */
//    private void codeValue(Connection connection, ShinseiDataInfo dataInfo)
//            throws ApplicationException {
//        String rykioi = dataInfo.getShinsaRyoikiCd();
//        String rykioiName = MasterShinsaRyoikiInfoDao.selectRyoikiName(
//                connection, rykioi);
//        dataInfo.setShinsaRyoikiName(rykioiName);
//    }
// End Syuu
//2007/02/08 苗　削除ここまで    

    // 20060605 Wang Xiancheng add start
    /**
     * 複数申請の承認.<br><br>
     * 
     * 申請ステータスを"学振処理中"に更新し、メールを送信する。<br><br>
     * 
     * <b>1.既存データの取得</b><br>
     * 排他制御のため、既存データを取得する。<br>
     * 該当データが存在しないとき、例外をthrowする。<br><br>
     * 
     * 以下のSQLを実行し、取得したレコードをロックする。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT 
     *     A.SYSTEM_NO                    -- システム受付番号
     *     ,A.UKETUKE_NO                -- 申請番号
     *     ,A.JIGYO_ID                    -- 事業ID
     *     ,A.NENDO                        -- 年度
     *     ,A.KAISU                        -- 回数
     *     ,A.JIGYO_NAME                -- 事業名
     *     ,A.SHINSEISHA_ID                -- 申請者ID
     *     ,A.SAKUSEI_DATE                -- 申請書作成日
     *     ,A.SHONIN_DATE                -- 所属機関承認日
     *     ,A.JYURI_DATE                -- 学振受理日
     *     ,A.NAME_KANJI_SEI            -- 申請者氏名（漢字等-姓）
     *     ,A.NAME_KANJI_MEI            -- 申請者氏名（漢字等-名）
     *     ,A.NAME_KANA_SEI                -- 申請者氏名（フリガナ-姓）
     *     ,A.NAME_KANA_MEI                -- 申請者氏名（フリガナ-名）
     *     ,A.NAME_RO_SEI                -- 申請者氏名（ローマ字-姓）
     *     ,A.NAME_RO_MEI                -- 申請者氏名（ローマ字-名）
     *     ,A.NENREI                    -- 年齢
     *     ,A.KENKYU_NO                    -- 申請者研究者番号
     *     ,A.SHOZOKU_CD                -- 所属機関コード
     *     ,A.SHOZOKU_NAME                -- 所属機関名
     *     ,A.SHOZOKU_NAME_RYAKU        -- 所属機関名（略称）
     *     ,A.BUKYOKU_CD                -- 部局コード
     *     ,A.BUKYOKU_NAME                -- 部局名
     *     ,A.BUKYOKU_NAME_RYAKU        -- 部局名（略称）
     *     ,A.SHOKUSHU_CD                -- 職名コード
     *     ,A.SHOKUSHU_NAME_KANJI        -- 職名（和文）
     *     ,A.SHOKUSHU_NAME_RYAKU        -- 職名（略称）
     *     ,A.ZIP                        -- 郵便番号
     *     ,A.ADDRESS                    -- 住所
     *     ,A.TEL                        -- TEL
     *     ,A.FAX                        -- FAX
     *     ,A.EMAIL                        -- E-Mail
     *     ,A.SENMON                    -- 現在の専門
     *     ,A.GAKUI                        -- 学位
     *     ,A.BUNTAN                    -- 役割分担
     *     ,A.KADAI_NAME_KANJI            -- 研究課題名(和文）
     *     ,A.KADAI_NAME_EIGO            -- 研究課題名(英文）
     *     ,A.JIGYO_KUBUN                -- 事業区分
     *     ,A.SHINSA_KUBUN                -- 審査区分
     *     ,A.SHINSA_KUBUN_MEISHO        -- 審査区分名称
     *     ,A.BUNKATSU_NO                -- 分割番号
     *     ,A.BUNKATSU_NO_MEISHO        -- 分割番号名称
     *     ,A.KENKYU_TAISHO                -- 研究対象の類型
     *     ,A.KEI_NAME_NO                -- 系等の区分番号
     *     ,A.KEI_NAME                    -- 系等の区分
     *     ,A.KEI_NAME_RYAKU            -- 系等の区分略称
     *     ,A.BUNKASAIMOKU_CD            -- 細目番号
     *     ,A.BUNYA_NAME                -- 分野
     *     ,A.BUNKA_NAME                -- 分科
     *     ,A.SAIMOKU_NAME                -- 細目
     *     ,A.BUNKASAIMOKU_CD2            -- 細目番号2
     *     ,A.BUNYA_NAME2                -- 分野2
     *     ,A.BUNKA_NAME2                -- 分科2
     *     ,A.SAIMOKU_NAME2                -- 細目2
     *     ,A.KANTEN_NO                    -- 推薦の観点番号
     *     ,A.KANTEN                    -- 推薦の観点
     *     ,A.KANTEN_RYAKU                -- 推薦の観点略称
     *     ,A.KEIHI1                    -- 1年目研究経費
     *     ,A.BIHINHI1                    -- 1年目設備備品費
     *     ,A.SHOMOHINHI1                -- 1年目消耗品費
     *     ,A.KOKUNAIRYOHI1                -- 1年目国内旅費
     *     ,A.GAIKOKURYOHI1                -- 1年目外国旅費
     *     ,A.RYOHI1                    -- 1年目旅費
     *     ,A.SHAKIN1                    -- 1年目謝金等
     *     ,A.SONOTA1                    -- 1年目その他
     *     ,A.KEIHI2                    -- 2年目研究経費
     *     ,A.BIHINHI2                    -- 2年目設備備品費
     *     ,A.SHOMOHINHI2                -- 2年目消耗品費
     *     ,A.KOKUNAIRYOHI2                -- 2年目国内旅費
     *     ,A.GAIKOKURYOHI2                -- 2年目外国旅費
     *     ,A.RYOHI2                    -- 2年目旅費
     *     ,A.SHAKIN2                    -- 2年目謝金等
     *     ,A.SONOTA2                    -- 2年目その他
     *     ,A.KEIHI3                    -- 3年目研究経費
     *     ,A.BIHINHI3                    -- 3年目設備備品費
     *     ,A.SHOMOHINHI3                -- 3年目消耗品費
     *     ,A.KOKUNAIRYOHI3                -- 3年目国内旅費
     *     ,A.GAIKOKURYOHI3                -- 3年目外国旅費
     *     ,A.RYOHI3                    -- 3年目旅費
     *     ,A.SHAKIN3                    -- 3年目謝金等
     *     ,A.SONOTA3                    -- 3年目その他
     *     ,A.KEIHI4                    -- 4年目研究経費
     *     ,A.BIHINHI4                    -- 4年目設備備品費
     *     ,A.SHOMOHINHI4                -- 4年目消耗品費
     *     ,A.KOKUNAIRYOHI4                -- 4年目国内旅費
     *     ,A.GAIKOKURYOHI4                -- 4年目外国旅費
     *     ,A.RYOHI4                    -- 4年目旅費
     *     ,A.SHAKIN4                    -- 4年目謝金等
     *     ,A.SONOTA4                    -- 4年目その他
     *     ,A.KEIHI5                    -- 5年目研究経費
     *     ,A.BIHINHI5                    -- 5年目設備備品費
     *     ,A.SHOMOHINHI5                -- 5年目消耗品費
     *     ,A.KOKUNAIRYOHI5                -- 5年目国内旅費
     *     ,A.GAIKOKURYOHI5                -- 5年目外国旅費
     *     ,A.RYOHI5                    -- 5年目旅費
     *     ,A.SHAKIN5                    -- 5年目謝金等
     *     ,A.SONOTA5                    -- 5年目その他
     *     ,A.KEIHI_TOTAL                -- 総計-研究経費
     *     ,A.BIHINHI_TOTAL                -- 総計-設備備品費
     *     ,A.SHOMOHINHI_TOTAL            -- 総計-消耗品費
     *     ,A.KOKUNAIRYOHI_TOTAL        -- 総計-国内旅費
     *     ,A.GAIKOKURYOHI_TOTAL        -- 総計-外国旅費
     *     ,A.RYOHI_TOTAL                -- 総計-旅費
     *     ,A.SHAKIN_TOTAL                -- 総計-謝金等
     *     ,A.SONOTA_TOTAL                -- 総計-その他
     *     ,A.SOSHIKI_KEITAI_NO            -- 研究組織の形態番号
     *     ,A.SOSHIKI_KEITAI            -- 研究組織の形態
     *     ,A.BUNTANKIN_FLG                -- 分担金の有無
     *     ,A.KOYOHI                    -- 研究支援者雇用経費
     *     ,A.KENKYU_NINZU                -- 研究者数
     *     ,A.TAKIKAN_NINZU                -- 他機関の分担者数
     *     ,A.SHINSEI_KUBUN                -- 新規継続区分
     *     ,A.KADAI_NO_KEIZOKU            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG_NO            -- 継続分の研究課題番号
     *     ,A.SHINSEI_FLG                -- 申請の有無
     *     ,A.KADAI_NO_SAISYU            -- 最終年度課題番号
     *     ,A.KAIJIKIBO_FLG_NO            -- 開示希望の有無番号
     *     ,A.KAIJIKIBO_FLG                -- 開示希望の有無
     *     ,A.KAIGAIBUNYA_CD            -- 海外分野コード
     *     ,A.KAIGAIBUNYA_NAME            -- 海外分野名称
     *     ,A.KAIGAIBUNYA_NAME_RYAKU    -- 海外分野略称
     *     ,A.KANREN_SHIMEI1        -- 関連分野の研究者-氏名1
     *     ,A.KANREN_KIKAN1            -- 関連分野の研究者-所属機関1
     *     ,A.KANREN_BUKYOKU1        -- 関連分野の研究者-所属部局1
     *     ,A.KANREN_SHOKU1            -- 関連分野の研究者-職名1
     *     ,A.KANREN_SENMON1        -- 関連分野の研究者-専門分野1
     *     ,A.KANREN_TEL1            -- 関連分野の研究者-勤務先電話番号1
     *     ,A.KANREN_JITAKUTEL1        -- 関連分野の研究者-自宅電話番号1
     *     ,A.KANREN_MAIL1            -- 関連分野の研究者-E-mail1
     *     ,A.KANREN_SHIMEI2        -- 関連分野の研究者-氏名2
     *     ,A.KANREN_KIKAN2            -- 関連分野の研究者-所属機関2
     *     ,A.KANREN_BUKYOKU2        -- 関連分野の研究者-所属部局2
     *     ,A.KANREN_SHOKU2            -- 関連分野の研究者-職名2
     *     ,A.KANREN_SENMON2        -- 関連分野の研究者-専門分野2
     *     ,A.KANREN_TEL2            -- 関連分野の研究者-勤務先電話番号2
     *     ,A.KANREN_JITAKUTEL2        -- 関連分野の研究者-自宅電話番号2
     *     ,A.KANREN_MAIL2            -- 関連分野の研究者-E-mail2
     *     ,A.KANREN_SHIMEI3        -- 関連分野の研究者-氏名3
     *     ,A.KANREN_KIKAN3            -- 関連分野の研究者-所属機関3
     *     ,A.KANREN_BUKYOKU3        -- 関連分野の研究者-所属部局3
     *     ,A.KANREN_SHOKU3            -- 関連分野の研究者-職名3
     *     ,A.KANREN_SENMON3        -- 関連分野の研究者-専門分野3
     *     ,A.KANREN_TEL3            -- 関連分野の研究者-勤務先電話番号3
     *     ,A.KANREN_JITAKUTEL3        -- 関連分野の研究者-自宅電話番号3
     *     ,A.KANREN_MAIL3                -- 関連分野の研究者-E-mail3
     *     ,A.XML_PATH                    -- XMLの格納パス
     *     ,A.PDF_PATH                    -- PDFの格納パス
     *     ,A.JURI_KEKKA                -- 受理結果
     *     ,A.JURI_BIKO                    -- 受理結果備考
     *     ,A.SUISENSHO_PATH            -- 推薦書の格納パス
     *     ,A.KEKKA1_ABC                -- １次審査結果(ABC)
     *     ,A.KEKKA1_TEN                -- １次審査結果(点数)
     *     ,A.KEKKA1_TEN_SORTED            -- １次審査結果(点数順)
     *     ,A.SHINSA1_BIKO                -- １次審査備考
     *     ,A.KEKKA2                    -- ２次審査結果
     *     ,A.SOU_KEHI                    -- 総経費（学振入力）
     *     ,A.SHONEN_KEHI                -- 初年度経費（学振入力）
     *     ,A.SHINSA2_BIKO                -- 業務担当者記入欄
     *     ,A.JOKYO_ID                    -- 申請状況ID
     *     ,A.SAISHINSEI_FLG            -- 再申請フラグ
     *     ,A.DEL_FLG                    -- 削除フラグ
     * FROM
     *     SHINSEIDATAKANRI A            -- 申請データ管理テーブル
     * WHERE
     *     SYSTEM_NO = ?
     * 
     * FOR UPDATE
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>第二引数shinseiDataPkの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>2.各種チェック</b><br>
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"03"(所属機関受付中)以外のとき、例外をthrowする。<br><br>
     * 
     * ・学振受付期間チェック<br>
     * 　再申請フラグが"01"(再申請中)以外のとき、以下のチェックを行う。<br><br>
     * 
     * 　自クラスのcheckGakusinUketukeKikan(UserInfo, ShinseiDataInfo)メソッドを呼び、受付期間チェックを行う。<br>
     * 　引数に第一引数userInfo、1.でデータをセットした申請情報dataInfoを渡す。<br>
     * 　学振受付期間（終了）を過ぎている場合、例外をthrowする。<br><br>
     * 
     * <b>3.PDFファイル</b><br>
     * (1)PDFファイル作成<br>
     * 　PdfconvertクラスのgetShinseiFileResourceWithoutLock(UserInfo, ShinseiDataPk)メソッドを呼ぶ。<br>
     * 　このメソッドにて、申請データよりPDFファイルを作成し、ファイルリソースを返却する。<br>
     * 　引数に第一引数userInfo、第二引数shinseiDataPkを渡す。<br><br>
     * 
     * 　申請データが見つからないとき、変換に失敗したときは、それぞれに例外をthrowする。<br><br>
     * 
     * (2)ファイル名生成<br>
     * 　PDFファイル名を設定する。<br>
     * 　　継続：系等の区分コード-所属機関コード-[0]-課題番号-申請者ID<br>
     * 　　新規：系等の区分コード-所属機関コード-[1]-整理番号-申請者ID<br><br>
     * 
     * 　(例)系等の区分コード：1　所属機関コード：10101　課題番号：00000012　申請者ID:041000100001A<br>
     * 　　　の継続のとき<br>
     * 　　　　PDFファイル名：1-10101-0-00000012-041000100001A<br><br>
     * 
     * 　　　系等の区分コード：1　所属機関コード：10101　整理番号：1001　申請者ID:041000100001B<br>
     * 　　　の新規のとき<br>
     * 　　　　PDFファイル名：1-10101-0-1001-041000100001B<br><br>
     * 
     * (3)ファイルパス生成<br>
     * 　配列pathInfoに事業IDと(2)で生成したファイル名を格納する。<br><br>
     * 
     * 　リテラルSHINSEI_PDF_NO_PASSWORDのパターンに従い、配列pathInfoをMessageFormatクラスのformat()メソッドを用いてフォーマットし、ファイルパスを生成する。<br/><br/>
     * 
     * 　(例)ファイルパターン：${shinsei_path}/data/pdf/{0}/{1}.pdf<br>
     * 　　　事業ID：04000011　PDFファイル名：1-10101-0-00000012-041000100001A　のとき<br>
     * 　　　ファイルパス：${shinsei_path}/data/pdf/04000011/1-10101-0-00000012-041000100001A.pdf<br>
     * 　　　　※${shinsei_path}の値はApplicationSettings.propertiesに設定<br><br>
     * 
     * (4)ファイル書き込み<br>
     * 　JigyoKanriMaintenanceクラスのwriteFile(File, FileResource, boolean)メソッドにてファイルを書き込む。<br><br>
     * 　引数に(3)で生成したファイルパス、(1)で作成したPDFファイル、trueを渡す。<br><br>
     * 
     * <b>4.更新データのセット</b><br>
     * 1.で取得の申請情報existInfoの再申請フラグが"1"（再申請中）のとき、再申請フラグに"2"（再申請済み）をセットする。<br><br>
     * 
     * 状況IDに"04"(学振処理中)をセットする。<br><br>
     * 
     * 所属機関承認日に本日日付(WASのシステム日付)をセットする。<br><br>
     * 
     * <b>5.申請情報の更新</b><br>
     * (1)参照可能申請データかチェック<br>
     * <p>
     * 　判断基準は以下の通り。
     * <li>申請者の場合･･･････････自分の申請者IDのものかどうか
     * <li>所属機関担当者の場合･･･自分の所属機関IDのものかどうか
     * <li>審査員の場合･･･････････自分に割り振られた申請書かどうか
     * <li>業務担当者･････････････自分が担当する事業の申請書かどうか
     * <li>その他の場合･･･････････なし（すべてOK）
     * </p><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * SELECT
     *     COUNT(A.SYSTEM_NO)
     * FROM
     *     table                   -- 変数table(下記参照)
     * WHERE
     * 
     *   --- 動的検索条件1 ---       -- システム受付番号
     *                             -- (pkInfoのlengthによって、バインド数が変化)
     * 
     *   --- 動的検索条件2 ---
     * 
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * 変数table<br>
     * ログインユーザによって値が変化する。<br>
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>変数table</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>SHINSEIDATAKANRI A</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT SYSTEM_NO FROM SHINSAKEKKA<br>
     *             　　　　WHERE SHINSAIN_NO = 'userInfo.getShinsainInfo().getShinsainNo()' B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>
     *             SHINSEIDATAKANRI A,<br>
     *                 (SELECT JIGYO_CD FROM ACCESSKANRI<br>
     *              　　WHERE GYOMUTANTO_ID = 'userInfo.getGyomutantoInfo().getGyomutantoId()'  B<Br>
     *             </td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>
     *                 SHINSEIDATAKANRI A
     *             </td>
     *     </tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件1</span></b><br>
     * 第二引数の配列ShinseiDataPkの値数によって、検索条件のパラメタ数が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="30%">変数名（日本語）</td><td>変数名</td><td>動的検索条件</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>システム受付番号</td><td>SYSTEM_NO</td><td>A.SYSTEM_NO IN ('システム受付番号1', 'システム受付番号2', …)</td></tr>
     * </table><br>
     * 
     * <b><span style="color:#002288">動的検索条件2</span></b><br>
     * ログインユーザによって検索条件が動的に変化する。<br>
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="20%">ログインユーザ</td><td>条件</td></tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>申請者</td>
     *             <td>AND A.SHINSEISHA_ID = 'userInfo.getShinseishaInfo().getShinseishaId()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>所属機関担当者</td>
     *             <td>AND A.SHOZOKU_CD = 'userInfo.getShozokuInfo().getShozokuCd()'</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>審査員</td>
     *             <td>AND A.SYSTEM_NO = B.SYSTEM_NO</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>業務担当者</td>
     *             <td>AND B.JIGYO_CD = SUBSTR(A.JIGYO_ID,3,5)</td>
     *     </tr>
     *     <tr bgcolor="#FFFFFF">
     *             <td>それ以外</td>
     *             <td>空白</td>
     *     </tr>
     * </table><br><br>
     * 
     * 参照可能に該当しない場合、例外をthrowする。<br>
     * 　※参照可能に該当しない−結果件数が引数primaryKeysの数と一致しない場合<br><br>
     * 
     * (2)申請情報の更新<br>
     * 　(1)のチェックで参照可能データであれば、更新処理を行う。<br><br>
     * 
     * 　以下のSQLを実行する。（バインド変数はSQLの下の表を参照）
     * <table border="0" bgcolor="#000000" cellspacing="1" cellpadding="1" width="600">
     * <tr bgcolor="#FFFFFF"><td>
     * <pre>
     * UPDATE
     *     SHINSEIDATAKANRI            --申請データ管理テーブル
     * SET
     *     SYSTEM_NO = ?                -- システム受付番号
     *     ,UKETUKE_NO = ?                -- 申請番号
     *     ,JIGYO_ID = ?                    -- 事業ID
     *     ,NENDO = ?                        -- 年度
     *     ,KAISU = ?                        -- 回数
     *     ,JIGYO_NAME = ?                -- 事業名
     *     ,SHINSEISHA_ID = ?                -- 申請者ID
     *     ,SAKUSEI_DATE = ?                -- 申請書作成日
     *     ,SHONIN_DATE = ?                -- 所属機関承認日
     *     ,JYURI_DATE = ?                -- 学振受理日
     *     ,NAME_KANJI_SEI = ?            -- 申請者氏名（漢字等-姓）
     *     ,NAME_KANJI_MEI = ?            -- 申請者氏名（漢字等-名）
     *     ,NAME_KANA_SEI = ?                -- 申請者氏名（フリガナ-姓）
     *     ,NAME_KANA_MEI = ?                -- 申請者氏名（フリガナ-名）
     *     ,NAME_RO_SEI = ?                -- 申請者氏名（ローマ字-姓）
     *     ,NAME_RO_MEI = ?                -- 申請者氏名（ローマ字-名）
     *     ,NENREI = ?                    -- 年齢
     *     ,KENKYU_NO = ?                    -- 申請者研究者番号
     *     ,SHOZOKU_CD = ?                -- 所属機関コード
     *     ,SHOZOKU_NAME = ?                -- 所属機関名
     *     ,SHOZOKU_NAME_RYAKU = ?        -- 所属機関名（略称）
     *     ,BUKYOKU_CD = ?                -- 部局コード
     *     ,BUKYOKU_NAME = ?                -- 部局名
     *     ,BUKYOKU_NAME_RYAKU = ?        -- 部局名（略称）
     *     ,SHOKUSHU_CD = ?                -- 職名コード
     *     ,SHOKUSHU_NAME_KANJI = ?        -- 職名（和文）
     *     ,SHOKUSHU_NAME_RYAKU = ?        -- 職名（略称）
     *     ,ZIP = ?                        -- 郵便番号
     *     ,ADDRESS = ?                    -- 住所
     *     ,TEL = ?                        -- TEL
     *     ,FAX = ?                        -- FAX
     *     ,EMAIL = ?                        -- E-Mail
     *     ,SENMON = ?                    -- 現在の専門
     *     ,GAKUI = ?                        -- 学位
     *     ,BUNTAN = ?                    -- 役割分担
     *     ,KADAI_NAME_KANJI = ?            -- 研究課題名(和文）
     *     ,KADAI_NAME_EIGO = ?            -- 研究課題名(英文）
     *     ,JIGYO_KUBUN = ?                -- 事業区分
     *     ,SHINSA_KUBUN = ?                -- 審査区分
     *     ,SHINSA_KUBUN_MEISHO = ?        -- 審査区分名称
     *     ,BUNKATSU_NO = ?                -- 分割番号
     *     ,BUNKATSU_NO_MEISHO = ?        -- 分割番号名称
     *     ,KENKYU_TAISHO = ?                -- 研究対象の類型
     *     ,KEI_NAME_NO = ?                -- 系等の区分番号
     *     ,KEI_NAME = ?                    -- 系等の区分
     *     ,KEI_NAME_RYAKU = ?            -- 系等の区分略称
     *     ,BUNKASAIMOKU_CD = ?            -- 細目番号
     *     ,BUNYA_NAME = ?                -- 分野
     *     ,BUNKA_NAME = ?                -- 分科
     *     ,SAIMOKU_NAME = ?                -- 細目
     *     ,BUNKASAIMOKU_CD2 = ?            -- 細目番号2
     *     ,BUNYA_NAME2 = ?                -- 分野2
     *     ,BUNKA_NAME2 = ?                -- 分科2
     *     ,SAIMOKU_NAME2 = ?                -- 細目2
     *     ,KANTEN_NO = ?                    -- 推薦の観点番号
     *     ,KANTEN = ?                    -- 推薦の観点
     *     ,KANTEN_RYAKU = ?                -- 推薦の観点略称
     *     ,KEIHI1 = ?                    -- 1年目研究経費
     *     ,BIHINHI1 = ?                -- 1年目設備備品費
     *     ,SHOMOHINHI1 = ?                -- 1年目消耗品費
     *     ,KOKUNAIRYOHI1 = ?            -- 1年目国内旅費
     *     ,GAIKOKURYOHI1 = ?            -- 1年目外国旅費
     *     ,RYOHI1 = ?                    -- 1年目旅費
     *     ,SHAKIN1 = ?                    -- 1年目謝金等
     *     ,SONOTA1 = ?                    -- 1年目その他
     *     ,KEIHI2 = ?                    -- 2年目研究経費
     *     ,BIHINHI2 = ?                -- 2年目設備備品費
     *     ,SHOMOHINHI2 = ?                -- 2年目消耗品費
     *     ,KOKUNAIRYOHI2 = ?            -- 2年目国内旅費
     *     ,GAIKOKURYOHI2 = ?            -- 2年目外国旅費
     *     ,RYOHI2 = ?                    -- 2年目旅費
     *     ,SHAKIN2 = ?                    -- 2年目謝金等
     *     ,SONOTA2 = ?                    -- 2年目その他
     *     ,KEIHI3 = ?                    -- 3年目研究経費
     *     ,BIHINHI3 = ?                -- 3年目設備備品費
     *     ,SHOMOHINHI3 = ?                -- 3年目消耗品費
     *     ,KOKUNAIRYOHI3 = ?            -- 3年目国内旅費
     *     ,GAIKOKURYOHI3 = ?            -- 3年目外国旅費
     *     ,RYOHI3 = ?                    -- 3年目旅費
     *     ,SHAKIN3 = ?                    -- 3年目謝金等
     *     ,SONOTA3 = ?                    -- 3年目その他
     *     ,KEIHI4 = ?                    -- 4年目研究経費
     *     ,BIHINHI4 = ?                -- 4年目設備備品費
     *     ,SHOMOHINHI4 = ?                -- 4年目消耗品費
     *     ,KOKUNAIRYOHI4 = ?            -- 4年目国内旅費
     *     ,GAIKOKURYOHI4 = ?            -- 4年目外国旅費
     *     ,RYOHI4 = ?                    -- 4年目旅費
     *     ,SHAKIN4 = ?                    -- 4年目謝金等
     *     ,SONOTA4 = ?                    -- 4年目その他
     *     ,KEIHI5 = ?                    -- 5年目研究経費
     *     ,BIHINHI5 = ?                -- 5年目設備備品費
     *     ,SHOMOHINHI5 = ?                -- 5年目消耗品費
     *     ,KOKUNAIRYOHI5 = ?            -- 5年目国内旅費
     *     ,GAIKOKURYOHI5 = ?            -- 5年目外国旅費
     *     ,RYOHI5 = ?                    -- 5年目旅費
     *     ,SHAKIN5 = ?                    -- 5年目謝金等
     *     ,SONOTA5 = ?                    -- 5年目その他
     *     ,KEIHI_TOTAL = ?                -- 総計-研究経費
     *     ,BIHINHI_TOTAL = ?            -- 総計-設備備品費
     *     ,SHOMOHINHI_TOTAL = ?        -- 総計-消耗品費
     *     ,KOKUNAIRYOHI_TOTAL = ?        -- 総計-国内旅費
     *     ,GAIKOKURYOHI_TOTAL = ?        -- 総計-外国旅費
     *     ,RYOHI_TOTAL = ?                -- 総計-旅費
     *     ,SHAKIN_TOTAL = ?            -- 総計-謝金等
     *     ,SONOTA_TOTAL = ?            -- 総計-その他
     *     ,SOSHIKI_KEITAI_NO = ?        -- 研究組織の形態番号
     *     ,SOSHIKI_KEITAI = ?            -- 研究組織の形態
     *     ,BUNTANKIN_FLG = ?            -- 分担金の有無
     *     ,KOYOHI = ?                    -- 研究支援者雇用経費
     *     ,KENKYU_NINZU = ?            -- 研究者数
     *     ,TAKIKAN_NINZU = ?            -- 他機関の分担者数
     *     ,SHINSEI_KUBUN = ?            -- 新規継続区分
     *     ,KADAI_NO_KEIZOKU = ?        -- 継続分の研究課題番号
     *     ,SHINSEI_FLG_NO = ?            -- 継続分の研究課題番号
     *     ,SHINSEI_FLG = ?                -- 申請の有無
     *     ,KADAI_NO_SAISYU = ?            -- 最終年度課題番号
     *     ,KAIJIKIBO_FLG_NO = ?        -- 開示希望の有無番号
     *     ,KAIJIKIBO_FLG = ?            -- 開示希望の有無
     *     ,KAIGAIBUNYA_CD = ?            -- 海外分野コード
     *     ,KAIGAIBUNYA_NAME = ?        -- 海外分野名称
     *     ,KAIGAIBUNYA_NAME_RYAKU = ?    -- 海外分野略称
     *     ,KANREN_SHIMEI1 = ?        -- 関連分野の研究者-氏名1
     *     ,KANREN_KIKAN1 = ?        -- 関連分野の研究者-所属機関1
     *     ,KANREN_BUKYOKU1 = ?        -- 関連分野の研究者-所属部局1
     *     ,KANREN_SHOKU1 = ?        -- 関連分野の研究者-職名1
     *     ,KANREN_SENMON1 = ?        -- 関連分野の研究者-専門分野1
     *     ,KANREN_TEL1 = ?            -- 関連分野の研究者-勤務先電話番号1
     *     ,KANREN_JITAKUTEL1 = ?    -- 関連分野の研究者-自宅電話番号1
     *     ,KANREN_MAIL1 = ?        -- 関連分野の研究者-E-mail1
     *     ,KANREN_SHIMEI2 = ?        -- 関連分野の研究者-氏名2
     *     ,KANREN_KIKAN2 = ?        -- 関連分野の研究者-所属機関2
     *     ,KANREN_BUKYOKU2 = ?        -- 関連分野の研究者-所属部局2
     *     ,KANREN_SHOKU2 = ?        -- 関連分野の研究者-職名2
     *     ,KANREN_SENMON2 = ?        -- 関連分野の研究者-専門分野2
     *     ,KANREN_TEL2 = ?            -- 関連分野の研究者-勤務先電話番号2
     *     ,KANREN_JITAKUTEL2 = ?    -- 関連分野の研究者-自宅電話番号2
     *     ,KANREN_MAIL2 = ?        -- 関連分野の研究者-E-mail2
     *     ,KANREN_SHIMEI3 = ?        -- 関連分野の研究者-氏名3
     *     ,KANREN_KIKAN3 = ?        -- 関連分野の研究者-所属機関3
     *     ,KANREN_BUKYOKU3 = ?        -- 関連分野の研究者-所属部局3
     *     ,KANREN_SHOKU3 = ?        -- 関連分野の研究者-職名3
     *     ,KANREN_SENMON3 = ?        -- 関連分野の研究者-専門分野3
     *     ,KANREN_TEL3 = ?            -- 関連分野の研究者-勤務先電話番号3
     *     ,KANREN_JITAKUTEL3 = ?    -- 関連分野の研究者-自宅電話番号3
     *     ,KANREN_MAIL3 = ?            -- 関連分野の研究者-E-mail3
     *     ,XML_PATH = ?                    -- XMLの格納パス
     *     ,PDF_PATH = ?                    -- PDFの格納パス
     *     ,JURI_KEKKA = ?                -- 受理結果
     *     ,JURI_BIKO = ?                -- 受理結果備考
     *     ,SUISENSHO_PATH = ?            -- 推薦書の格納パス
     *     ,KEKKA1_ABC = ?                -- １次審査結果(ABC)
     *     ,KEKKA1_TEN = ?                -- １次審査結果(点数)
     *     ,KEKKA1_TEN_SORTED = ?        -- １次審査結果(点数順)
     *     ,SHINSA1_BIKO = ?            -- １次審査備考
     *     ,KEKKA2 = ?                    -- ２次審査結果
     *     ,SOU_KEHI = ?                -- 総経費（学振入力）
     *     ,SHONEN_KEHI = ?                -- 初年度経費（学振入力）
     *     ,SHINSA2_BIKO = ?            -- 業務担当者記入欄
     *     ,JOKYO_ID = ?                -- 申請状況ID
     *     ,SAISHINSEI_FLG = ?            -- 再申請フラグ
     *     ,DEL_FLG = ?                    -- 削除フラグ
     * WHERE
     *     SYSTEM_NO = ?";            -- システム受付番号
     * </pre>
     * </td></tr>
     * </table><br>
     * 
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>UKETUKE_NO</td><td>引数existInfoの変数uketukeNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_ID</td><td>引数existInfoの変数jigyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENDO</td><td>引数existInfoの変数nendo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAISU</td><td>引数existInfoの変数kaisu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_NAME</td><td>引数existInfoの変数jigyoName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEISHA_ID</td><td>引数existInfoの変数shinseishaId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAKUSEI_DATE</td><td>引数existInfoの変数sakuseiDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONIN_DATE</td><td>引数existInfoの変数shoninDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JYURI_DATE</td><td>引数existInfoの変数jyuriDate</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_SEI</td><td>引数existInfoの変数nameKanjiSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANJI_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_SEI</td><td>引数existInfoの変数nameKanaSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_KANA_MEI</td><td>引数existInfoの変数nameKanjiMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_SEI</td><td>引数existInfoの変数nameRoSei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NAME_RO_MEI</td><td>引数existInfoの変数nameRoMei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>NENREI</td><td>引数existInfoの変数nenrei</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NO</td><td>引数existInfoの変数kenkyuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_CD</td><td>引数existInfoの変数shozokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME</td><td>引数existInfoの変数shozokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOZOKU_NAME_RYAKU</td><td>引数existInfoの変数shozokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_CD</td><td>引数existInfoの変数bukyokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME</td><td>引数existInfoの変数bukyokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUKYOKU_NAME_RYAKU</td><td>引数existInfoの変数bukyokuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_CD</td><td>引数existInfoの変数shokushuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_KANJI</td><td>引数existInfoの変数shokushuNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOKUSHU_NAME_RYAKU</td><td>引数existInfoの変数shokushuNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ZIP</td><td>引数existInfoの変数zip</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>ADDRESS</td><td>引数existInfoの変数address</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TEL</td><td>引数existInfoの変数tel</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>FAX</td><td>引数existInfoの変数fax</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>EMAIL</td><td>引数existInfoの変数email</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SENMON</td><td>引数existInfoの変数senmon</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAKUI</td><td>引数existInfoの変数gakui</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTAN</td><td>引数existInfoの変数buntan</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_KANJI</td><td>引数existInfoの変数kadaiNameKanji</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NAME_EIGO</td><td>引数existInfoの変数kadaiNameEigo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JIGYO_KUBUN</td><td>引数existInfoの変数jigyoKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN</td><td>引数existInfoの変数shinsaKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA_KUBUN_MEISHO</td><td>引数existInfoの変数shinsaKubunMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO</td><td>引数existInfoの変数bunkatsuNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKATSU_NO_MEISHO</td><td>引数existInfoの変数bunkatsuNoMeisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_TAISHO</td><td>引数existInfoの変数kenkuTaisho</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_NO</td><td>引数existInfoの変数keiNameNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME</td><td>引数existInfoの変数keiName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD</td><td>引数existInfoの変数bunkaSaimokuCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME</td><td>引数existInfoの変数bunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME</td><td>引数existInfoの変数bunkaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME</td><td>引数existInfoの変数saimokuName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKASAIMOKU_CD2</td><td>引数existInfoの変数bunkaSaimokuCd2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNYA_NAME2</td><td>引数existInfoの変数bunyaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNKA_NAME2</td><td>引数existInfoの変数bunkaName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAIMOKU_NAME2</td><td>引数existInfoの変数saimokuName2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_NO</td><td>引数existInfoの変数kantenNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN</td><td>引数existInfoの変数kanten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANTEN_RYAKU</td><td>引数existInfoの変数kantenRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEI_NAME_RYAKU</td><td>引数existInfoの変数keiNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI1</td><td>引数existInfoの変数keihi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI1</td><td>引数existInfoの変数bihinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI1</td><td>引数existInfoの変数shomohinhi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI1</td><td>引数existInfoの変数kokunairyohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI1</td><td>引数existInfoの変数gaikokuryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI1</td><td>引数existInfoの変数ryohi1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN1</td><td>引数existInfoの変数shakin1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA1</td><td>引数existInfoの変数sonota1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI5</td><td>引数existInfoの変数keihi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI5</td><td>引数existInfoの変数bihinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI5</td><td>引数existInfoの変数shomohinhi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI5</td><td>引数existInfoの変数kokunairyohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI5</td><td>引数existInfoの変数gaikokuryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI5</td><td>引数existInfoの変数ryohi5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN5</td><td>引数existInfoの変数shakin5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA5</td><td>引数existInfoの変数sonota5</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEIHI_TOTAL</td><td>引数existInfoの変数keihiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BIHINHI_TOTAL</td><td>引数existInfoの変数bihinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHOMOHINHI_TOTAL</td><td>引数existInfoの変数shomohinhiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOKUNAIRYOHI_TOTAL</td><td>引数existInfoの変数kokunairyohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>GAIKOKURYOHI_TOTAL</td><td>引数existInfoの変数gaikokuryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>RYOHI_TOTAL</td><td>引数existInfoの変数ryohiTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHAKIN_TOTAL</td><td>引数existInfoの変数shakinTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SONOTA_TOTAL</td><td>引数existInfoの変数sonotaTotal</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI_NO</td><td>引数existInfoの変数shoshikiKeitaiNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOSHIKI_KEITAI</td><td>引数existInfoの変数soshikiKeitai</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>BUNTANKIN_FLG</td><td>引数existInfoの変数buntankinFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KOYOHI</td><td>引数existInfoの変数koyohi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KENKYU_NINZU</td><td>引数existInfoの変数kenkyuNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>TAKIKAN_NINZU</td><td>引数existInfoの変数takikanNinzu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_KUBUN</td><td>引数existInfoの変数shinseiKubun</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_KEIZOKU</td><td>引数existInfoの変数kadaiNoKeizoku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG_NO</td><td>引数existInfoの変数shinseiFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSEI_FLG</td><td>引数existInfoの変数shinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KADAI_NO_SAISYU</td><td>引数existInfoの変数kadaiNoSaisyu</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG_NO</td><td>引数existInfoの変数kaijikiboFlgNo</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIJIKIBO_FLG</td><td>引数existInfoの変数kaijikiboFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_CD</td><td>引数existInfoの変数kaigaibunyaCd</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME</td><td>引数existInfoの変数kaigaibunyaName</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KAIGAIBUNYA_NAME_RYAKU</td><td>引数existInfoの変数kaigaibunyaNameRyaku</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI1</td><td>引数existInfoの変数kanrenShimei1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN1</td><td>引数existInfoの変数kanrenKikan1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU1</td><td>引数existInfoの変数kanrenBukyoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU1</td><td>引数existInfoの変数kanrenShoku1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON1</td><td>引数existInfoの変数kanrenSenmon1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL1</td><td>引数existInfoの変数kanrenTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL1</td><td>引数existInfoの変数kanrenJitakuTel1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL1</td><td>引数existInfoの変数kanrenMail1</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>　：</td><td>　：</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHIMEI3</td><td>引数existInfoの変数kanrenShimei3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_KIKAN3</td><td>引数existInfoの変数kanrenKikan3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_BUKYOKU3</td><td>引数existInfoの変数kanrenBukyoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SHOKU3</td><td>引数existInfoの変数kanrenShoku3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_SENMON3</td><td>引数existInfoの変数kanrenSenmon3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_TEL3</td><td>引数existInfoの変数kanrenTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_JITAKUTEL3</td><td>引数existInfoの変数kanrenJitakuTel3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KANREN_MAIL3</td><td>引数existInfoの変数kanrenMail3</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>XML_PATH</td><td>引数existInfoの変数xmlPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>PDF_PATH</td><td>引数existInfoの変数pdfPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_KEKKA</td><td>引数existInfoの変数juriKekka</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JURI_BIKO</td><td>引数existInfoの変数juriBiko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SUISENSHO_PATH</td><td>引数existInfoの変数suisenshoPath</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_ABC</td><td>引数existInfoの変数kekka1Abc</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN</td><td>引数existInfoの変数kekka1Ten</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA1_TEN_SORTED</td><td>引数existInfoの変数kekka1TenSorted</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA1_BIKO</td><td>引数existInfoの変数shinsa1Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>KEKKA2</td><td>引数existInfoの変数kekka2</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SOU_KEHI</td><td>引数existInfoの変数souKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHONEN_KEHI</td><td>引数existInfoの変数shonenKehi</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SHINSA2_BIKO</td><td>引数existInfoの変数shinsa2Biko</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>JOKYO_ID</td><td>引数existInfoの変数jokyoId</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SAISHINSEI_FLG</td><td>引数existInfoの変数saishinseiFlg</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>DEL_FLG</td><td>引数existInfoの変数delFlg</td></tr>
     * </table><br>
     * 
     * 条件文バインド変数
     * <table border="0" cellspacing="1" cellpadding="1" bgcolor="#000000" width="600">
     *     <tr style="color:white;font-weight:bold"><td width="40%">列名</td><td>値</td></tr>
     *     <tr bgcolor="#FFFFFF"><td>SYSTEM_NO</td><td>引数existInfoの変数systemNo</td></tr>
     * </table><br><br>
     * 
     * <b>6.コミット、ロールバック</b><br>
     * 更新処理が正常に行われたとき、コミットを行う。<br>
     * 　DatabaseUtilクラスのcommit()メソッドにて、コミットする。<br><br>
     * 
     * 更新処理の途中で例外が発生したとき、ロールバックを行う。<br>
     * 　DatabaseUtilクラスのrollback()メソッドにて、ロールバックする。<br><br>
     * 
     * <b>7.メール送信</b><br>
     * (1)メール宛先情報取得を取得<br>
     * 　1.で取得した申請情報から、代表者の所属機関コードを取得する。<br>
     * 　ShozokuMaintenanceクラスのshozokuMainte.searchShozokuInfo(UserInfo,String)メソッドを呼び、所属機関担当者情報(List)を取得する。<br>
     *　 引数に第一引数userInfo、所属機関コードを渡す。<br><br>
     * 
     * 　所属担当者情報が取得できなかった場合、ログにエラー情報を出力しreturn。<br><br>
     * 
     * 　所属機関担当者情報から１人目のメールアドレスを取得し、変数toに代入する。<br>
     * 　(担当者Email1に対してのみメールを送信する)<br><br>
     * 
     * (2)メール本文ファイルの読み込み<br>
     * 　リテラルCONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONINの値からファイルパスを作成する。<br>
     * 　CONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONINの値：<br>
     * 　　　${shinsei_path}/settings/mail/shinseisho_shozokukikan_shonin.txt<br><br>
     * 
     * 　FileUtilクラスのreadFile()メソッドを呼び、ファイルリソースを取得する。<br>
     * 　引数には作成したファイルパスを渡す。<br><br>
     * 
     * 　取得したファイルリソースのバイナリを文字列に変換し、変数contentに代入する。<br><br>
     * 
     * 　例外が発生したとき、ログにエラー情報を出力しreturn。<br><br>
     * 
     * (3)メール本文ファイルの動的項目変更<br>
     * 　1.で取得した申請情報から、事業名、課題名、申請者名−姓、申請者名−名、申請番号、所属機関承認日を取得し配列paramに格納する。<br>
     * 　　※所属機関承認日については、SimpleDateFormatで"yyyy年MM月dd日"に変換して格納。<br><br>
     * 
     * 　MessageFormatクラスのformat()メソッドにメッセージ本文content、配列paramを渡しフォーマットする。<br><br>
     * 
     * (4)メールの送信<br>
     * 　SendMailerクラスのsendMail()メソッドを呼び、メールを送信する。<br>
     * 　引数にリテラルFROM_ADDRESS(差出人)、変数to(TO)、null(CC)、null(BCC)、
     * リテラルSUBJECT_SHINSEISHO_KAKUNIN_KANRYO(件名)、変数content(本文)を渡す。<br><br>
     * 
     * @param userInfo            UserInfo
     * @param shinseiDataPks      キー配列
     * @param checkKbn            確認と承認の区分
     * @throws ValidationException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#recognizeApplication(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public void recognizeMultiApplication(
            UserInfo userInfo,
            ShinseiDataPk[] shinseiDataPks,
            String checkKbn)
            throws ValidationException, ApplicationException {

        Connection connection = null;
        boolean updSuccess = true;
        boolean success = false;

// 2007/02/05 張志男　追加ここから
        /** ログ（getSystemNos） */
        // 更新前
        String strBeforeSystemNos = "" ;
        // 更新後
        String strAfterSystemNos = "" ;
        // 更新失敗
        String strErrorSystemNo = "" ;
// 2007/02/05 張志男　追加ここまで
        
        try {
            // DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            List errList = checkShinseiData(connection, userInfo,shinseiDataPks, checkKbn);

            // エラーが有かった場合のみ退避する
            if (errList != null && errList.size() > 0) {
                updSuccess = false;
                throw new ValidationException("申請書形式チェックエラーが発生しました。", errList);
            }
            // 申請データ管理DAO
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);

            // 排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            
// 2007/02/26 張志男　追加ここから
            for (int i = 0; i < shinseiDataPks.length; i++) {
                /** ログ 更新前（getSystemNos） */
                strBeforeSystemNos = strBeforeSystemNos + shinseiDataPks[i].getSystemNo() + ",";
            }           

            /** ログ（更新前） */
            strBeforeSystemNos = "(" + strBeforeSystemNos.trim().substring(0, strBeforeSystemNos.length() - 1) + ")";
            statusLog.info( " 応募情報承認前 , ユーザ種別 : " + userInfo.getRole() 
                          + " , ログインID : " + userInfo.getId() 
                          + " , システム受付番号" + strBeforeSystemNos );
// 2007/02/26　張志男　追加ここまで 
            
            existInfo = null;
            for (int i = 0; i < shinseiDataPks.length; i++) {
                ShinseiDataPk shinseiDataPk = shinseiDataPks[i];
//  2007/02/05 張志男　追加ここから
                /** ログ 更新後（getSystemNos） */                
                strAfterSystemNos = strAfterSystemNos + shinseiDataPk.getSystemNo() + ",";
                /** ログ 更新失敗 */ 
                strErrorSystemNo = shinseiDataPk.getSystemNo();
//  2007/02/05　張志男　追加ここまで
                
                try {
                    existInfo = dao.selectShinseiDataInfoForLock(connection, shinseiDataPk, true);
                }
                catch (NoDataFoundException e) {
                    throw new ApplicationException(
                            "申請書管理データ排他取得中にDBエラーが発生しました。", new ErrorInfo(
                                    "errors.4004"), e);
                }
                catch (DataAccessException e) {
                    throw new ApplicationException(
                            "申請書管理データ排他取得中にDBエラーが発生しました。", new ErrorInfo(
                                    "errors.4004"), e);
                }

                try {
                    // 2006/7/21 dyh add start
                    // 理由：「学創、特推、基盤S、基盤A（一般）、基盤A（海外）、基盤B（一般）、基盤B（海外）」以外時、コピーしない
                    // 有効な事業コード（学創、特推）
                    List validJigyoCds1 = new ArrayList();
                    validJigyoCds1.add(IJigyoCd.JIGYO_CD_GAKUSOU_HIKOUBO);
                    validJigyoCds1.add(IJigyoCd.JIGYO_CD_GAKUSOU_KOUBO);
                    validJigyoCds1.add(IJigyoCd.JIGYO_CD_TOKUSUI);

                    // 有効な事業コード（基盤S、基盤A（一般）、基盤A（海外）、基盤B（一般）、基盤B（海外））
                    List validJigyoCds2 = new ArrayList();
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_KIBAN_S);
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_KIBAN_A_IPPAN);
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI);
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_KIBAN_B_IPPAN);
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI);
                    //2007/03/15 苗　追加ここから
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S);     //若手研究(S)
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_WAKATESTART);        //若手研究（スタートアップ）
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_SHOKUSHINHI_KIBAN_C);//特別研究促進費(年複数回応募の試行)
                    //2007/03/15　苗　追加ここまで
// ADD START 2007-07-17 BIS 王志安
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_KIBAN_HOGA);
                    validJigyoCds2.add(IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU);
// ADD END 2007-07-17 BIS 王志安

                    String jigyoCd = existInfo.getJigyoId().substring(2, 7);
                    if (validJigyoCds1.contains(jigyoCd) || validJigyoCds2.contains(jigyoCd)) {
                    // 2006/7/21 dyh add end
                        PdfConvert pdfconvert = new PdfConvert();
                        FileResource fileResource = pdfconvert
                                .getShinseiFileResourceWithoutLock(userInfo,shinseiDataPk);

// 2006/07/21 dyh update start
//                        // 新規(DBでは1)・継続(DBでは2)では、ソート順が逆になるので継続：0に置換
//                        // 継続：ファイル名に課題番号を使用
//                        // 新規：ファイル名に整理番号を使用
//                        String shinseiKubun = existInfo.getShinseiKubun();
//                        String nameNo4th = "";
//                        if (shinseiKubun != null && shinseiKubun.equals("2")) {
//                            shinseiKubun = "0";
//                            nameNo4th = existInfo.getKadaiNoKeizoku();
//                        }
//                        else if (shinseiKubun == null
//                                || (shinseiKubun != null && shinseiKubun
//                                        .equals("1"))) {
//                            shinseiKubun = "1";
//                            nameNo4th = existInfo.getUketukeNo().substring(6);
//                        }

                        // 新規(DBでは1)・継続(DBでは2)では、ソート順が逆になるので継続：0に置換
                        String shinseiKubun = existInfo.getShinseiKubun();
                        if (shinseiKubun != null && "2".equals(shinseiKubun)) {
                            shinseiKubun = "0";
                        } else if (shinseiKubun == null || "1".equals(shinseiKubun)) {
                            shinseiKubun = "1";
                        }
                        String uketukeNo4th = " ";
                        if(existInfo.getUketukeNo() != null 
                                && existInfo.getUketukeNo().length() == 10){
                            uketukeNo4th = existInfo.getUketukeNo().substring(6);
                        }
                        String pdfName = "";
                        // PDFファイル名（学創・特推）を設定:
                        // 系別+機関番号+継続・新規別+(継続の場合）課題番号・(新規の場合)整理番号順+申請者ID
                        // 学創は、新規と同じ命名規則
                        // 系等の区分(番号)-所属機関コード-継続(0)-課題番号-申請者ID
                        // 系等の区分(番号)-所属機関コード-新規(1)-整理番号-申請者ID
//                        String PdfName = existInfo.getKadaiInfo().getKeiNameNo()
//                                + "-"
//                                + existInfo.getDaihyouInfo().getShozokuCd()
//                                + "-"
//                                + shinseiKubun
//                                + "-"
//                                + nameNo4th
//                                + "-"
//                                + existInfo.getShinseishaId();
                        if(validJigyoCds1.contains(jigyoCd)){
                            // 継続：ファイル名に課題番号を使用
                            // 新規：ファイル名に整理番号を使用
                            String nameNo4th = " ";
                            if("0".equals(shinseiKubun)){
                                nameNo4th = existInfo.getKadaiNoKeizoku();
                            }else{
                                nameNo4th = uketukeNo4th;
                            }
// UPDATE START 2007-07-19 BIS 王志安
//                            pdfName = StringUtil.convertNullToHanSpace(existInfo.getKadaiInfo().getKeiNameNo())
//                                    + "-"
//                                    + StringUtil.convertNullToHanSpace(existInfo.getDaihyouInfo().getShozokuCd())
//                                    + "-"
//                                    + shinseiKubun
//                                    + "-"
//                                    + nameNo4th
//                                    + "-"
//                                    + StringUtil.convertNullToHanSpace(existInfo.getShinseishaId());
                            //【系統の区分略称+機関番号+新規・継続区分+応募者氏名+研究者番号.pdf】
                            pdfName = new StringBuffer((StringUtil.convertNullToHanSpace(existInfo.getKadaiInfo().getKeiNameRyaku())))
									.append("-")
									.append(StringUtil.convertNullToHanSpace(existInfo.getDaihyouInfo().getShozokuCd()))
									.append("-")
									.append(existInfo.getShinseiKubun())
									.append("-")
									.append(StringUtil.convertNullToHanSpace(existInfo.getDaihyouInfo().getNameKanjiSei()))
									.append(StringUtil.convertNullToHanSpace(existInfo.getDaihyouInfo().getNameKanjiMei()))
									.append("-")
									.append(StringUtil.convertNullToHanSpace(existInfo.getDaihyouInfo().getKenkyuNo()))
									.toString();
// UPDATE END 2007-07-19 BIS 王志安
                        }
                        // PDFファイル名（基盤S、基盤A（一般）、基盤A（海外）、基盤B（一般）、基盤B（海外））
                        // 新規・継続区分+事業コード+機関コード+細目コード+分割AB+分割12+整理番号
                        else {
                            // 分割ABと分割12
                            String bunkatsuNo = existInfo.getKadaiInfo().getBunkatsuNo();
                            String bunkatsuNoAB = " ";
                            String bunkatsuNo12 = " ";
                            if("A".equalsIgnoreCase(bunkatsuNo) 
                                    || "B".equalsIgnoreCase(bunkatsuNo)){
                                bunkatsuNoAB = bunkatsuNo;
                            }else if("1".equals(bunkatsuNo) 
                                    || "2".equals(bunkatsuNo)){
                                bunkatsuNo12 = bunkatsuNo;
                            }
                            pdfName = shinseiKubun
                                    + "-"
                                    + jigyoCd
                                    + "-"
                                    + StringUtil.convertNullToHanSpace(existInfo.getDaihyouInfo().getShozokuCd())
                                    + "-"
                                    + StringUtil.convertNullToHanSpace(existInfo.getKadaiInfo().getBunkaSaimokuCd())
                                    + "-"
                                    + bunkatsuNoAB
                                    + "-"
                                    + bunkatsuNo12
                                    + "-"
                                    + uketukeNo4th;
// ADD START 2007-07-17 BIS 王志安
                            if (IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(jigyoCd)) {
                            	// 特定領域研究（継続領域）
                            	//　【新規・継続区分+事業コード+機関コード+領域番号+整理番号.pdf】
                            	// ※継続・新規別は、新規＝1、継続＝2と番号付けているが、ソート順では継続が上になるように継続＝0としてソートする。
                                pdfName = new StringBuffer(shinseiKubun)
	                                .append("-")
	                                .append(jigyoCd)
	                                .append("-")
	                                .append(StringUtil.convertNullToHanSpace(existInfo.getDaihyouInfo().getShozokuCd()))
	                                .append("-")
	                                .append(StringUtil.convertNullToHanSpace(existInfo.getRyouikiNo()))
	                                .append("-")
	                                .append(StringUtil.convertNullToHanSpace(existInfo.getSeiriNo()))
	                                .toString();
                            }
// ADD END 2007-07-17 BIS 王志安
                        }
// 2006/07/21 dyh update end

                        String[] pathInfo = new String[] {
                                existInfo.getJigyoId(), pdfName };
                        String shinseiPath = MessageFormat.format(
                                SHINSEI_PDF_NO_PASSWORD, pathInfo);
                        File shinseiFile = new File(shinseiPath);
                        JigyoKanriMaintenance jigyoKanriMaintenance = new JigyoKanriMaintenance();
                        jigyoKanriMaintenance.writeFile(shinseiFile,
                                fileResource, true);
                    }
                }
                catch (NoDataFoundException e) {
                    throw new ApplicationException("申請データが見つかりません。",
                            new ErrorInfo("errors.4000"), e);
                }
                catch (ConvertException e) {
                    throw new ApplicationException("PDF変換中にエラーが発生しました。",
                            new ErrorInfo("errors.8000"), e);
                }

                // ---DB更新---
                try {
                    // 更新データをセットする
                    if (existInfo.getSaishinseiFlg().equals(
                            StatusCode.SAISHINSEI_FLG_SAISHINSEITYU)) { // 再申請中なら再申請済みへ
                        existInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_SAISHINSEIZUMI); // 再申請フラグ
                    }
                    // update start ly 2006/06/21
                    if (existInfo.getJigyoId().substring(2, 7).equals(
                            IJigyoCd.JIGYO_CD_TOKUTEI_SINKI)) {
                        existInfo.setJokyoId(StatusCode.STATUS_RYOUIKIDAIHYOU_KAKUNIN); // 領域代表者確認中
                        if (existInfo.getSaishinseiFlg().equals(
                                FLAG_APPLICATION_DELETE)) { // 「1：（再応募中）」の場合、「2：（再応募済み）」に変更
                            existInfo.setSaishinseiFlg(KUBUN_KOUBO);
                        }
                    }
                    else {
                        existInfo.setJokyoId(StatusCode.STATUS_GAKUSIN_SHORITYU); // 申請状況
                    }
                    // existInfo.setJokyoId(StatusCode.STATUS_GAKUSIN_SHORITYU);
                    // //申請状況
                    // update end ly 2006/06/21
                    existInfo.setShoninDate(new Date()); // 承認日
                    dao.updateShinseiDataInfo(connection, existInfo, true);
                    if (i == shinseiDataPks.length - 1) {
                        success = true;
                    }
                }
                catch (DataAccessException e) {
                    updSuccess = false;
                    throw new ApplicationException("申請情報更新中にDBエラーが発生しました。",
                            new ErrorInfo("errors.4001"), e);
                }
                catch (ApplicationException e) {
                    updSuccess = false;
                    throw new ApplicationException("申請情報更新中にDBエラーが発生しました。",
                            new ErrorInfo("errors.4001"), e);
                }
            }            
            // ---------------
            // メール送信
            // ---------------
            // 2006/06/29 zjp 追加ここから
            List list = null;
            try {
                list = dao.selectShinseiDataListForMail(connection,shinseiDataPks);                 
            }
            catch (NoDataFoundException e) {
                throw new ApplicationException(
                        "申請書管理データ排他取得中にDBエラーが発生しました。", new ErrorInfo(
                                "errors.4004"), e);
            }
            catch (DataAccessException e) {
                throw new ApplicationException(
                        "申請書管理データ排他取得中にDBエラーが発生しました。", new ErrorInfo(
                                "errors.4004"), e);
            }
            
            List dataList = new ArrayList();
            for (int i = 0; i < list.size(); i++) {

                //1レコード
                Map recordMap = (Map) list.get(i);
                String nendo = (String) recordMap.get("NENDO");
                BigDecimal kaisu = (BigDecimal) recordMap.get("KAISU");
                String jigyo_name = (String) recordMap.get("JIGYO_NAME");
                Date shoninDate = (Date) recordMap.get("SHONIN_DATE");
                String strDate = new SimpleDateFormat("yyyy年MM月dd日").format(shoninDate);
                String count = recordMap.get("COUNT").toString();

                String kaisu_hyoji = "";
                if (kaisu.intValue() > 1) {
                    kaisu_hyoji = "第" + kaisu + "回 "; //回数が1回以上の場合は表示する
                }

                //事業名を「年度＋事業名」へ変換し、問い合わせ先を（改行＋全角空白）で結合。
/* DEL START 2007-07-06 BIS 王志安
                String jigyo_info = new StringBuffer("  【研究種目名】平成")
                                                .append(nendo)
                                                .append("年度 ")
                                                .append(kaisu_hyoji)
                                                .append(jigyo_name)
                                                .append("\n")
                                                .append("  【件数】")
                                                .append(count)
                                                .append("件")
                                                .append("\n")
                                                .append("  【所属研究機関承認日】")
                                                .append(strDate)
                                                .toString();
/ DEL END 2007-07-06 BIS 王志安 */
// ADD START 2007-07-06 BIS 王志安
                String jigyo_info = new StringBuffer("　【研究種目名】\n    平成")
								                .append(nendo)
								                .append("年度 ")
								                .append(kaisu_hyoji)
								                .append(jigyo_name)
								                .append("\n")
								                .append("　【件数】\n")
								                .append("    " + count)
								                .append("件\n")
								                .append("　【所属機関承認日】\n    ")
								                .append(strDate)
								                .toString();
                
                String oldJigyoId = null;
                String jigyoId = recordMap.get("JIGYO_ID").toString();
                if (i > 0) {
                	oldJigyoId = ((Map)list.get(i - 1)).get("JIGYO_ID").toString();
                	jigyoId = jigyoId == null ? "" : jigyoId;
                    oldJigyoId = oldJigyoId == null ? "" : oldJigyoId;
                    if (!oldJigyoId.equals(jigyoId)) {
                    	jigyo_info = "\n\n" + jigyo_info;
                    }
                }
// ADD END 2007-07-06 BIS 王志安
                 dataList.add(jigyo_info); 
            }
            
            KadaiInfo kadaiInfo = existInfo.getKadaiInfo();
            if (kadaiInfo != null
                    && (IJigyoKubun.JIGYO_KUBUN_GAKUSOU_HIKOUBO
                            .equals(kadaiInfo.getJigyoKubun())
                            || IJigyoKubun.JIGYO_KUBUN_GAKUSOU_KOUBO .equals(kadaiInfo.getJigyoKubun())
                            || IJigyoKubun.JIGYO_KUBUN_TOKUSUI.equals(kadaiInfo.getJigyoKubun())
                            || IJigyoCd.JIGYO_CD_KIBAN_S.equals(existInfo.getJigyoCd())
                            || IJigyoCd.JIGYO_CD_KIBAN_A_IPPAN.equals(existInfo.getJigyoCd())
                            || IJigyoCd.JIGYO_CD_KIBAN_B_IPPAN.equals(existInfo.getJigyoCd())
                            || IJigyoCd.JIGYO_CD_KIBAN_A_KAIGAI.equals(existInfo.getJigyoCd()) 
                            || IJigyoCd.JIGYO_CD_KIBAN_B_KAIGAI.equals(existInfo.getJigyoCd())
                            //2007/03/15 苗　追加ここから
                            //若手研究(S)
                            || IJigyoCd.JIGYO_CD_KIBAN_WAKATE_S.equals(existInfo.getJigyoCd())
                            //若手研究（スタートアップ）
                            || IJigyoCd.JIGYO_CD_WAKATESTART.equals(existInfo.getJigyoCd())
                             //特別研究促進費(年複数回応募の試行)
                            || IJigyoCd.JIGYO_CD_SHOKUSHINHI_KIBAN_C.equals(existInfo.getJigyoCd())
                            //2007/03/15　苗　追加ここまで
// ADD START 2007-07-17 BIS 王志安
                            || IJigyoCd.JIGYO_CD_KIBAN_HOGA.equals(existInfo.getJigyoCd())
                            || IJigyoCd.JIGYO_CD_TOKUTEI_KEIZOKU.equals(existInfo.getJigyoCd())
// ADD END 2007-07-17 BIS 王志安
                            )) {
                // 2006/06/29 zjp 追加ここまで
                // -----メール差出人情報取得
                String to = null;
                try {
                    // 当該申請者の所属機関担当者情報を取得する
                    String shozokuCd = existInfo.getDaihyouInfo()
                            .getShozokuCd();
                    IShozokuMaintenance shozokuMainte = new ShozokuMaintenance();
                    List shozokuTantoList = shozokuMainte.searchShozokuInfo(
                            userInfo, shozokuCd);
                    // 所属担当者情報が取得できなかった場合
                    if (shozokuTantoList == null
                            || shozokuTantoList.size() == 0) {
                        log.warn("所属機関担当者情報を取得できませんでした。所属コード:" + shozokuCd);
                        return;
                    }
                    // リストの１人目の情報を取得する（担当者Email1に対してのみ送信する）
                    to = (String) ((Map) shozokuTantoList.get(0))
                            .get("TANTO_EMAIL");
                }
                catch (ApplicationException e) {
                    log.warn("メール宛先情報取得に失敗しました。", e);
                    return;
                }

                // -----メール本文ファイルの読み込み
                String content = null;
                try {
                    File contentFile = new File(
                            CONTENT_SHINSEISHO_SHOZOKUKIKAN_SHONIN);
                    FileResource fileRes = FileUtil.readFile(contentFile);
                    content = new String(fileRes.getBinary());
                }
                catch (FileNotFoundException e) {
                    log.warn("メール本文ファイルが見つかりませんでした。", e);
                    return;
                }
                catch (IOException e) {
                    log.warn("メール本文ファイル読み込み時にエラーが発生しました。", e);
                    return;
                }
                // 2006/06/29 zjp 修正ここから            
                //-----メール本文ファイルの動的項目変更
                StringBuffer jigyoNameList = new StringBuffer();
                for (int i = 0; i < dataList.size(); i++) {
                    if(i != 0){
                        jigyoNameList.append("\n").append("\n");
                    }
                    jigyoNameList.append(dataList.get(i));
                }

                String[] param = new String[] {
                        jigyoNameList.toString() 
                };
                // 2006/06/29 zjp 修正ここまで
                content = MessageFormat.format(content, param);
                
                if (log.isDebugEnabled()){
                    log.debug("content:" + content);
                }

                //-----メール送信
                try {
                    SendMailer mailer = new SendMailer(SMTP_SERVER_ADDRESS);
                    mailer.sendMail(FROM_ADDRESS, //差出人
                            to, //to
                            null, //cc
                            null, //bcc
                            SUBJECT_SHINSEISHO_SHOZOKUKIKAN_SHONIN, //件名
                            content); //本文
                }
                catch (Exception e) {
                    log.warn("メール送信に失敗しました。", e);
                    return;
                }
            }
        }
        finally {
            try {
                if (!updSuccess) {
                    DatabaseUtil.rollback(connection);
// 2007/02/05 張志男　追加ここから
                    /** ログ 更新失敗 */   
                    statusLog.info( " 応募情報承認失敗 , ユーザ種別 : " + userInfo.getRole() 
                                  + " , ログインID : " + userInfo.getId() 
                                  + " , システム受付番号 : " + strErrorSystemNo );
//  2007/02/05　張志男　追加ここまで 
                }
                if (success) {
                    DatabaseUtil.commit(connection);                    
//  2007/02/05 張志男　追加ここから
                    /** ログ 更新後（getSystemNos） */                      
                    strAfterSystemNos = "(" + strAfterSystemNos.trim().substring(0, strAfterSystemNos.length() - 1) + ")";
                    statusLog.info( " 応募情報承認後 , ユーザ種別 : " + userInfo.getRole() 
                                  + " , ログインID : " + userInfo.getId() 
                                  + " , システム受付番号" + strAfterSystemNos );
//  2007/02/05　張志男　追加ここまで
                    
                }
            }
            catch (TransactionException e) {
                throw new ApplicationException("申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"), e);
            }
            DatabaseUtil.closeConnection(connection);
        }
    }

    /**
     * 申請情報形式チェック
     * @param connection Connection
     * @param userInfo UserInfo
     * @param pkInfo ShinseiDataPk[]
     * @param checkKbn 確認と承認の区分
     * @return  List errList
     */
    private List checkShinseiData(
            Connection connection,
            UserInfo userInfo,
            ShinseiDataPk[] pkInfo,
            String checkKbn)
            throws ApplicationException {

        List errList = new ArrayList();
        try {
            // DBコネクションの取得
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(
                    userInfo);

            // 排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            for (int i = 0; i < pkInfo.length; i++) {
                try {
                    existInfo = shinseiDataInfoDao
                            .selectShinseiDataInfoForLock(connection, pkInfo[i], true);
                }
                catch (DataAccessException e) {
                    throw new ApplicationException(
                            "申請書管理データ排他取得中にDBエラーが発生しました。",
                            new ErrorInfo("errors.4004"), e);
                }
                String errAddInfo = existInfo.getDaihyouInfo().getNameKanjiSei()
                        + " "
                        + existInfo.getDaihyouInfo().getNameKanjiMei()
                        + " " + existInfo.getKadaiInfo().getKadaiNameKanji()
                        + "の応募情報は、";

                // ---申請データ削除フラグチェック---
                String delFlag = existInfo.getDelFlg();
                if (FLAG_APPLICATION_DELETE.equals(delFlag)) {
                    errList.add(new ErrorInfo("errors.9001"));
                }

                // ---申請データステータスチェック---
                String jyokyoId = existInfo.getJokyoId();
                // ---所属機関受付中以外の場合はエラー
                if (!(StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU
                        .equals(jyokyoId))) {
                    if("kakunin".equals(checkKbn)){
                        errList.add(new ErrorInfo("errors.9000",
                                new String[] { errAddInfo + "確認" }));
                    }else{
                        errList.add(new ErrorInfo("errors.9000",
                                new String[] { errAddInfo + "承認" }));
                    }
                }

                // ---学振受付期間チェック（再申請中の場合はチェックしない）---
                if (!StatusCode.SAISHINSEI_FLG_SAISHINSEITYU.equals(existInfo
                        .getSaishinseiFlg())) {
                    if (!checkGakusinUketukeKikan(userInfo, existInfo)) {
                        errList.add(new ErrorInfo("errors.9027",
                                new String[] {errAddInfo}));
                    }
                }
                if (existInfo.getJigyoId().substring(2, 7).equals(
                        IJigyoCd.JIGYO_CD_TOKUTEI_SINKI)) {
                    RyoikiKeikakushoInfoDao ryoikiDao = new RyoikiKeikakushoInfoDao(
                            userInfo);
                    try {
                        ryoikiDao.existRyoikiInfoCount(connection, existInfo);
                    }
                    catch (NoDataFoundException ex) {
                        errList.add(new ErrorInfo("errors.9028",
                                        new String[] {errAddInfo}));
                    }
                    catch (DataAccessException e) {
                        errList.add(new ErrorInfo("errors.9028",
                                        new String[] {errAddInfo}));
                    }
                }
            }
            return errList;

        }catch(SystemBusyException e){
            throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。", new ErrorInfo(
                            "errors.4004"), e);  
        }
    }
    // 20060605 Wang Xiancheng add end

// 2006/06/14 dyh add start 研究計画調書一覧用
    /**
     * 研究計画調書一覧データを取得
     * @param userInfo
     * @param searchInfo 検索条件
     * @return List 一覧データ
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    public List getKeikakuTyosyoList(
            UserInfo userInfo,
            ShinseiSearchInfo searchInfo)
            throws NoDataFoundException, ApplicationException{
        
        // DBコネクションの取得
        Connection connection = null;
        try{
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(userInfo);
            List resultList = shinseiDataInfoDao.selectKeikakuTyosyoList(
                    connection, searchInfo.getRyouikiNo(), searchInfo.getJokyoId());
            return resultList;
        }catch (DataAccessException e) {
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }finally{
            DatabaseUtil.closeConnection(connection);
        }
    }
//2006/06/14 dyh add end
    
//2006/06/15 苗　追加ここから
    /**
     * 領域計画書概要テーブル（当該年度の削除フラグ=0）に仮領域番号が存在するかチェック
     * 
     * @param connection
     * @param userInfo
     * @param dataInfo
     * @param errors
     * 
     * @throws ApplicationException 
     */
    private void checkRyoikoNoForTokuteiSinki(Connection connection, UserInfo userInfo,
            ShinseiDataInfo dataInfo, List errors) throws ApplicationException {
        
        // 仮領域番号
        String ryouikiNo = dataInfo.getRyouikiNo();
        // 事業年度
        String jigyoId = dataInfo.getJigyoId();
        
        if(!StringUtil.isBlank(ryouikiNo)){
            RyoikiKeikakushoInfoDao  ryoikikeikakushoInfoDao = new RyoikiKeikakushoInfoDao(userInfo);
    
            //仮領域番号のチェック：領域計画書概要テーブルに当該年度の削除フラグ=0で存在する番号
            StringBuffer chSQL =  new StringBuffer();
            chSQL.append("SELECT COUNT(KARIRYOIKI_NO) ");
            chSQL.append(STR_COUNT);
            chSQL.append(" FROM");
            chSQL.append(" (SELECT R.KARIRYOIKI_NO KARIRYOIKI_NO FROM RYOIKIKEIKAKUSHOINFO R WHERE R.DEL_FLG = 0 ");
            chSQL.append("  AND R.KARIRYOIKI_NO = '");
            chSQL.append(EscapeUtil.toSqlString(ryouikiNo));
            chSQL.append("  ' AND R.JIGYO_ID = '");
            chSQL.append(EscapeUtil.toSqlString(jigyoId));
            chSQL.append("')");
    
            //プロパティ名
            String property = "shinseiDataInfo.ryouikiNo";
    
            //for debug
            if(log.isDebugEnabled()){
                log.debug("query:" + chSQL.toString());
            }
    
            String msg = "仮領域番号";
                
            try{
                if ("0".equals(ryoikikeikakushoInfoDao.selectRyoikiNoCount(connection,
                        chSQL.toString()).toString())) {
                    errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
                }
            }catch(DataAccessException ex){
                throw new ApplicationException("仮領域番号の検索中にエラーが発生しました。",new ErrorInfo("errors.4004"));
            }
        }
    }
    
    
    //ADD START 2007/07/13 趙一非
    //Ｈ１９カスタマイズ
    //・初年度研究経費の有効な入力値チェックの表現を変更。（内容は変わっていない。）
    //・エラー発生時の画面イメージを追加
    /**
     * 領域計画書概要テーブ
     * 
     * @param connection
     * @param userInfo
     * @param dataInfo
     * @param errors
     * 
     * @throws ApplicationException 
     */
    private void checkKenkyuKeihiSoukeiInfo(Connection connection, UserInfo userInfo,
            ShinseiDataInfo dataInfo, List errors) throws ApplicationException {
        
        // 仮領域番号
        String ryouikiNo = dataInfo.getRyouikiNo();
        
//      研究項目番号
        String komokuNo = dataInfo.getRyouikiKoumokuNo();
        
        if(!StringUtil.isBlank(ryouikiNo)){
            RyoikiKeikakushoInfoDao  ryoikikeikakushoInfoDao = new RyoikiKeikakushoInfoDao(userInfo);
    
            //仮領域番号のチェック：領域計画書概要テーブルに当該年度の削除フラグ=0で存在する番号
            StringBuffer chSQL =  new StringBuffer();
            
            chSQL.append("SELECT  Count(R.zennendo_oubo_no) ");
            chSQL.append(STR_COUNT);
            chSQL.append(" FROM RYOIKIKEIKAKUSHOINFO R WHERE R.DEL_FLG = 0");
            chSQL.append("  AND R.KARIRYOIKI_NO = '");
            chSQL.append(EscapeUtil.toSqlString(ryouikiNo));
            chSQL.append("'  And R.zennendo_oubo_flg='1'");
           
    
            //プロパティ名
            String property ="shinseiDataInfo.kenkyuKeihiSoukeiInfo.kenkyuKeihi6[0].bihinhi";
    
            //for debug
            if(log.isDebugEnabled()){
                log.debug("query:" + chSQL.toString());
            }
    
            //String msg = "「研究組織表」の研究経費";
                
            try{
            	if ("X00".equals(komokuNo)) {
					String s = dataInfo.getKenkyuKeihiSoukeiInfo()
							.getKenkyuKeihi6()[0].getKeihi();
					if (Integer.parseInt(s) < 100) {
						property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0";
						errors.add(new ErrorInfo("errors.5031", new String[] {
								"初年度研究経費", "100" }, property));
					}

				} else {
					if (!"0".equals(ryoikikeikakushoInfoDao
							.selectRyoikiNoCount(connection, chSQL.toString())
							.toString())) {
						String s = dataInfo.getKenkyuKeihiSoukeiInfo()
								.getKenkyuKeihi6()[0].getKeihi();
						if (!(0 == Integer.parseInt(s))) {
							property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0";
//							errors.add(new ErrorInfo("errors.5032",
//									new String[] { "総括班以外で、領域計画書の前年度応募「該当の有無」",
//											"「有」","" }, property));
							errors.add(new ErrorInfo("errors.5075",
									new String[] {}, property));
						}

					} else {
						String s = dataInfo.getKenkyuKeihiSoukeiInfo()
								.getKenkyuKeihi6()[0].getKeihi();
						if (Integer.parseInt(s) < 100) {
							property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0";
							errors
									.add(new ErrorInfo("errors.5031",
											new String[] { "初年度研究経費", "100" },
											property));
						}
					}
				}
            }catch(DataAccessException ex){
            	ex.printStackTrace();
                throw new ApplicationException("仮領域番号の検索中にエラーが発生しました。",new ErrorInfo("errors.4004"));
            }
        }
    }
    
    // ADD END 2007/07/13 趙一非
    
    /**
	 * 領域代表者以外のチェック
	 * 
	 * @param connection
	 * @param userInfo
	 * @param dataInfo
	 * @param errors
	 * 
	 * @throws ApplicationException
	 */
    private void checkKomokuNoForTokuteiSinki(Connection connection, UserInfo userInfo,
            ShinseiDataInfo dataInfo, List errors) throws ApplicationException {
        
        // 研究項目番号
        String komokuNo = dataInfo.getRyouikiKoumokuNo();
        // 申請者ID
        String shinseishaId = userInfo.getShinseishaInfo().getShinseishaId();
        // 仮領域番号
        String kariryoikiNo = dataInfo.getRyouikiNo();
        
        if("X00".equals(komokuNo)){
            
            RyoikiKeikakushoInfoDao  ryoikikeikakuInfoDao = new RyoikiKeikakushoInfoDao(userInfo);
    
            //研究項目番号のチェック：領域計画書概要テーブルに当該年度の削除フラグ=0で存在する番号
            StringBuffer chSQL = new StringBuffer();
                
            chSQL.append("SELECT COUNT(KARIRYOIKI_NO) ");
            chSQL.append(STR_COUNT);
            chSQL.append(" FROM");
            chSQL.append(" (SELECT KARIRYOIKI_NO FROM RYOIKIKEIKAKUSHOINFO R WHERE R.DEL_FLG = 0 ");
            chSQL.append("  AND R.SHINSEISHA_ID = '");
            chSQL.append(EscapeUtil.toSqlString(shinseishaId));
            chSQL.append("  ' AND R.KARIRYOIKI_NO = '");
            chSQL.append(EscapeUtil.toSqlString(kariryoikiNo));
            chSQL.append("')");
    
            //プロパティ名
            String property = "shinseiDataInfo.ryouikiKoumokuNo";
            ErrorInfo error = new ErrorInfo("errors.5041");
            error.setProperty(property);
    
            //for debug
            if(log.isDebugEnabled()){
                log.debug("query:" + chSQL.toString());
            }
                
            try{
                if("0".equals(ryoikikeikakuInfoDao.selectRyoikiNoCount(connection, chSQL.toString()).toString())){
                    errors.add(error);
                }
            }catch(DataAccessException ex){
                throw new ApplicationException("研究項目番号の検索中にエラーが発生しました。",new ErrorInfo("errors.4004"));
            }
        }
    }
    
    /**
     * 領域計画書確定済のチェック
     * 
     * @param connection
     * @param userInfo
     * @param dataInfo
     * @param errors
     * 
     * @throws ApplicationException 
     */
    private void checkRyoikikeikakushoKakutei(Connection connection, UserInfo userInfo,
            ShinseiDataInfo dataInfo, List errors) throws ApplicationException {
        
        // 仮領域番号
        String ryouikiNo = dataInfo.getRyouikiNo();
        
        RyoikiKeikakushoInfoDao  ryoikikeikakuInfoDao = new RyoikiKeikakushoInfoDao(userInfo);

        //確定フラグのチェック：領域計画書概要テーブルの、確定フラグが「１」（領域計画書確定済）なら、エラーとなる。
        StringBuffer chSQL = new StringBuffer();
            
        chSQL.append("SELECT COUNT(KARIRYOIKI_NO) ");
        chSQL.append(STR_COUNT);
        chSQL.append(" FROM");
        chSQL.append(" (SELECT KARIRYOIKI_NO FROM RYOIKIKEIKAKUSHOINFO R WHERE R.DEL_FLG = 0 ");
        chSQL.append("  AND R.RYOIKIKEIKAKUSHO_KAKUTEI_FLG = ");
        chSQL.append(FLAG_RYOIKIKEIKAKUSHO_KAKUTEI);
        chSQL.append("  AND R.KARIRYOIKI_NO = '");
        chSQL.append(ryouikiNo);
        chSQL.append("')");

        //for debug
        if(log.isDebugEnabled()){
            log.debug("query:" + chSQL.toString());
        }

        try{
            if(!"0".equals(ryoikikeikakuInfoDao.selectRyoikiNoCount(connection, chSQL.toString()).toString())){
                errors.add(new ErrorInfo("errors.9000", new String[]{"当該事業は申請"}));
            }
        }catch(DataAccessException ex){
            throw new ApplicationException("領域計画書の確定フラグの検索中にエラーが発生しました。",new ErrorInfo("errors.4004"));
        }
    }
//2006/06/15　苗　追加ここまで    

    //2006/06/16　Wang Xiancheng　add start
    /**
     * 申請書一覧ページ情報を取得.<br><br>
     * 
     * (1)担当部局のチェック<BR>
     * 第一引数userInfoの変数roleがUserRole.BUKYOKUTANTOと同じ場合、
     * 検索条件の部局コードがユーザの担当部局と一致するかのチェックを行う。<BR>
     * 担当部局を持つユーザで、検索条件に部局コードをセットしていた場合、
     * BukyokutantoMaintenanceのselect(UserInfo, BukyokutantoInfo)メソッドを呼び、
     * 検索条件の部局コードとユーザの担当部局が一致する部局担当者情報を取得する。<BR>
     * 取得した部局担当者情報が0件の場合は、ユーザの担当する部局ではないとして例外をthrowする。<BR><BR>
     * 
     * (2)申請書一覧ページ情報の取得<br>
     * ShinseiDataInfoDaoクラスのsetStatusName()メソッドを呼ぶ。<br>
     * (3)申請状況名のセット<br>
     * 　StatusManagerクラスのsetStatusName()メソッドを呼ぶ。<br>
     * 　引数は、コネクションと(1)で取得したページ情報を渡す。<br><br>
     * 
     * 　このメソッドにて、当該申請データの申請状況名（申請状況を表す文字列）を、pageオブジェクトに格納されているListにセットする。<br>
     * 　申請状況名は、キー値「JOKYO_NAME」としてMapに追加される。<br>
     * 　申請状況名は、実行するユーザ、事業の公開前後、申請状況IDに該当する文字列がセットされる。<br><br>
     * 
     * (4)ページ情報返却<br>
     * 　申請書一覧情報、申請状況名を格納したPageオブジェクトを返却する。<br><br>
     * 
     * @param userInfo        UserInfo
     * @param searchInfo    検索条件(ShinseSearchInfo)
     * @return 申請書一覧情報を格納したPageオブジェクト
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#searchApplication(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiSearchInfo)
     */
    public Page searchConfirmInfo(
        UserInfo userInfo,
        ShinseiSearchInfo searchInfo)
        throws NoDataFoundException, ApplicationException {
        
        //部局担当時に許可された部局かどうかの条件を追加
        if(userInfo.getRole().equals(UserRole.BUKYOKUTANTO)){
            //部局担当者のとき、検索条件の部局コードが自分の担当かチェックする
            BukyokutantoInfo info = userInfo.getBukyokutantoInfo();            
            if(info.getTantoFlg()){
                if(searchInfo.getBukyokuCd() != null && !searchInfo.getBukyokuCd().equals("")){
                    IBukyokutantoMaintenance bukyokutantoMaintenance = new BukyokutantoMaintenance();                    
                    //キーのセット
                    BukyokutantoPk pkInfo = new BukyokutantoPk();
                    pkInfo.setBukyokutantoId(info.getBukyokutantoId());
                    pkInfo.setBukyokuCd(searchInfo.getBukyokuCd());
                    BukyokutantoInfo[] tanto = bukyokutantoMaintenance.select(userInfo,pkInfo);                    
                    if(tanto.length == 0){
                        throw new NoDataFoundException(
                            "ログインユーザの担当する部局ではありません。"
                                + "検索キー：部局担当者ID'" + pkInfo.getBukyokutantoId() + "'"
                                + " 担当部局コード'" + pkInfo.getBukyokuCd()
                                + "'", new ErrorInfo("errors.authority"));
                    }
                }
            }
        }
        //DBコネクションの取得
        Connection connection = null;    
        try{
            connection = DatabaseUtil.getConnection();            
            //---申請書一覧ページ情報
            Page pageInfo = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                pageInfo = dao.searchConfirmInfo(connection, searchInfo);    //該当レコードを全件取得
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }        
            //申請状況名をセット
            new StatusManager(userInfo).setStatusName(connection, pageInfo);
            return pageInfo;        
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }
    //2006/06/16　Wang Xiancheng　add end
    
//2006/06/16 苗　追加ここから
    /**
     * 応募状況（研究計画調書（特定領域新規））の却下.<br><br>
     * 
     * 申請ステータスを"領域代表者却下"に更新する。<br><br>
     * 
     * ・削除フラグチェック<br>
     * 　1.で取得した申請情報の削除フラグが"1"のとき、例外をthrowする。<br><br>
     * 
     * ・ステータスチェック<br>
     * 　1.で取得した申請情報の状況IDが"24"(領域代表者所属研究機関受付中)以外のとき、例外をthrowする。<br><br>
     *
     * <b>3.更新データのセット</b><br>
     * 状況IDに"22"(領域代表者却下)をセットする。<br><br>
     * 
     * 再申請フラグに3（却下）をセットする
     * 
     * @param userInfo          UserInfo
     * @param shinseiDataPk     ShinseiDataPk
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#rejectApplication(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public void rejectApplicationForTokuteiSinnki(UserInfo userInfo, ShinseiDataPk shinseiDataPk)
            throws NoDataFoundException, ApplicationException {
        
        Connection   connection  = null;
        boolean     success     = false;
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();
            
            //申請データ管理DAO
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(userInfo);
                        
            //排他制御のため既存データを取得する
            ShinseiDataInfo existInfo = null;
            try{
                existInfo = shinseiDataInfoDao.selectShinseiDataInfo(connection, shinseiDataPk, false);
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "申請書管理データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"),
                    e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg(); 
            if(FLAG_APPLICATION_DELETE.equals(delFlag))
            {
                throw new ApplicationException(
                    "当該申請データは削除されています。SystemNo=" + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9001"));
            }           
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getJokyoId();
            //---領域代表者確認中以外の場合はエラー
            if( !(StatusCode.STATUS_RYOUIKIDAIHYOU_KAKUNIN.equals(jyokyoId)) )
            {
                throw new ApplicationException(
                    "当該申請データは却下可能なステータスではありません。SystemNo="
                    + shinseiDataPk.getSystemNo(),
                    new ErrorInfo("errors.9011"));
            }           
            
            //---DB更新---
            try {
                //更新データをセットする
                existInfo.setJokyoId(StatusCode.STATUS_RYOUIKIDAIHYOU_KYAKKA); //申請状況：「領域代表者却下」(22)
                existInfo.setSaishinseiFlg(StatusCode.SAISHINSEI_FLG_KYAKKA);//領域代表者却下:「3」                                      //却下時承認日は消す
                shinseiDataInfoDao.updateShinseiDataInfo(connection, existInfo, false);
                success = true;
            } catch (DataAccessException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } catch (ApplicationException e) {
                throw new ApplicationException(
                    "申請情報更新中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            } finally {
                try {
                    if (success) {
                        DatabaseUtil.commit(connection);
                    } else {
                        DatabaseUtil.rollback(connection);
                    }
                } catch (TransactionException e) {
                    throw new ApplicationException(
                        "申請情報DB更新中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }               
            }
//          2006/06/29  追加　張建平　ここから            
            // ---------------
            // メール送信
            // ---------------

            // -----メール差出人情報取得
            String to = null;
            try{
                //当該申請者の所属機関担当者情報を取得する
                String shozokuCd = existInfo.getDaihyouInfo().getShozokuCd();
                IShozokuMaintenance shozokuMainte = new ShozokuMaintenance();
                List shozokuTantoList = shozokuMainte.searchShozokuInfo(userInfo, 
                                                                        shozokuCd);
                //所属担当者情報が取得できなかった場合
                if(shozokuTantoList == null || shozokuTantoList.size() == 0){
                    log.warn("所属機関担当者情報を取得できませんでした。所属コード:"+shozokuCd);
                    return;
                }               
                //リストの１人目の情報を取得する（担当者Email1に対してのみ送信する）
                to = (String)( (Map)shozokuTantoList.get(0) ).get("TANTO_EMAIL");               
            }catch(ApplicationException e){
                log.warn("メール宛先情報取得に失敗しました。",e);
                return;
            }           
            
            //研究種目名
            String jigyoName = "平成" + existInfo.getNendo() + "年度 ";

            //回数チェック
            String kaishu = existInfo.getKaisu();
            if (kaishu != null && Integer.parseInt(kaishu) > 1){
                jigyoName = jigyoName + "第" + kaishu + "回 ";
            }
            
            jigyoName = jigyoName + existInfo.getJigyoName();
            
            //-----メール本文ファイルの読み込み
            String content = null;
            try{
                File contentFile = new File(CONTENT_RYOIKIDAIHYOSHA_KYAKKA);
                FileResource fileRes = FileUtil.readFile(contentFile);
                content = new String(fileRes.getBinary());
            }catch(FileNotFoundException e){
                log.warn("メール本文ファイルが見つかりませんでした。",e);
                return;
            }catch(IOException e){
                log.warn("メール本文ファイル読み込み時にエラーが発生しました。",e);
                return;
            }           
            //-----メール本文ファイルの動的項目変更
            String[] param = new String[]{
                    jigyoName,                                      //事業名
                    existInfo.getKadaiInfo().getKadaiNameKanji(),   //課題名
                    existInfo.getDaihyouInfo().getNameKanjiSei(),   //申請者名−姓
                    existInfo.getDaihyouInfo().getNameKanjiMei(),   //申請者名−名
                    existInfo.getUketukeNo()                        //申請番号
            };
            content = MessageFormat.format(content, param);
            
            //-----メール送信
            try{
                SendMailer mailer = new SendMailer(SMTP_SERVER_ADDRESS);
                mailer.sendMail(FROM_ADDRESS,                           //差出人
                                to,                                     //to
                                null,                                   //cc
                                null,                                   //bcc
                                SUBJECT_RYOIKIDAIHYOSHA_KYAKKA, //件名
                                content);                               //本文
            }catch(Exception e){
                log.warn("メール送信に失敗しました。",e);
                return;
            }
//          2006/06/29  追加　張建平　ここまで             
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
    }
//2006/06/16　苗　追加ここまで 

    // 2006/06/20 劉佳 追加ここから
    /**
     * 研究経費表検索情報を取得
     * 
     * @param userInfo
     * @param kenkyusosikikeihiInfo 検索条件
     * @return List 一覧データ
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    public List searchKenkyuKeihi(UserInfo userInfo,
            KenkyuSoshikiKenkyushaInfo kenkyusosikikeihiInfo)
            throws NoDataFoundException, ApplicationException {
        // DBコネクションの取得
        Connection connection = null;
        List resultList = null;
        try {
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(
                    userInfo);
            resultList = shinseiDataInfoDao.selectKenkyuKeihiList(connection,
                    kenkyusosikikeihiInfo);
            return resultList;
        }
        catch (NoDataFoundException e) {
            throw new NoDataFoundException("該当する情報が存在しませんでした。", new ErrorInfo(
                    "errors.5002"), e);
        }
        catch (DataAccessException de) {
            throw new ApplicationException("データ排他取得中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"), de);
        }
        catch (SystemBusyException se) {
            throw new ApplicationException("DBアクセス処理でエラーが発生しました。", se);
        }
        finally {
            DatabaseUtil.closeConnection(connection);
        }
    }
    // 2006/06/20 劉佳 追加ここまで

//  2006/06/16 追加　李義華　ここから
    /**
     * 研究組織表検索情報を取得
     * @param userInfo
     * @param kenkyuSoshikiKenkyushaInfo 検索条件
     * @return List 一覧データ
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @throws DataAccessException
     */
    public List searchKenkyuSosiki(UserInfo userInfo,
            KenkyuSoshikiKenkyushaInfo kenkyuSoshikiKenkyushaInfo)
            throws ApplicationException, DataAccessException, NoDataFoundException {

        Connection connection = null;
        List list = null;
        try {
            connection = DatabaseUtil.getConnection();
            ShinseiDataInfoDao shinseiDao = new ShinseiDataInfoDao(userInfo);
            list = shinseiDao.selectKenkyuSosiki(connection, kenkyuSoshikiKenkyushaInfo);
        }
        catch (SystemBusyException se) {
            throw new ApplicationException("DBアクセス処理でエラーが発生しました。", se);
        }
        finally {
            DatabaseUtil.closeConnection(connection);
        }
        return list;
    }
// 2006/06/16 追加　李義華　ここまで
 
// 2006/06/20 苗　追加ここから    
    /**
     * 新規領域計画書（概要）入力用初期データを返却.<br><br>
     * 
     * @param userInfo  UserInfo
     * @param pkInfo    JigyoKanriPk
     * @param ryoikiSystemNo     String
     * @return 新規入力用初期データ(Map)
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    public Map selectRyoikiKeikakushoInfoForInput(UserInfo userInfo, JigyoKanriPk pkInfo, String ryoikiSystemNo)
        throws NoDataFoundException, ApplicationException {
        
        //---事業情報管理
        JigyoKanriInfo jigyoKanriInfo = null;
        try{
            IJigyoKanriMaintenance jigyoMainte = new JigyoKanriMaintenance();
            jigyoKanriInfo = jigyoMainte.select(userInfo, pkInfo);
        } catch (ApplicationException e) {
            throw new ApplicationException(
                "事業情報管理管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---事業情報
        String jigyoId     = null;
        String jigyoCd     = null;
        String kaisu       = null;
        String jigyoKubun  = null;
        try{
            //事業IDより事業コードを抽出（事業ID=年度(2桁)+事業コード(5桁)+回数(1桁))
            jigyoId     = jigyoKanriInfo.getJigyoId();
            jigyoCd     = jigyoId.substring(2,7);
            kaisu       = jigyoId.substring(7,8);
            jigyoKubun  = jigyoKanriInfo.getJigyoKubun();       //事業区分
        }catch(RuntimeException e){
            throw new ApplicationException(
                "事業IDより事業コードの抽出時にエラーが発生しました。事業IDの形式が不正です。",
                e);
        }
        
        //---審査希望部門(系等)プルダウン
        List kiboubumonList = null;
        try{
            String[] labelKubun = new String[]{ILabelKubun.SHINSAKIBO_BUNYA + "_" + jigyoKubun};
            List bothList = new LabelValueMaintenance().getLabelList(labelKubun);   //1つのラベルリスト
            kiboubumonList = (List)bothList.get(0);
        }catch(ApplicationException e){
            throw new ApplicationException(
                "ラベルマスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---準備研究・事前調査の状況プルダウン
        List jizenchousaList = null;
        try{
            String[] labelKubun = new String[]{ILabelKubun.JIZENCHOSA};
            List bothList = new LabelValueMaintenance().getLabelList(labelKubun);   //1つのラベルリスト
            jizenchousaList = (List)bothList.get(0);
        }catch(ApplicationException e){
            throw new ApplicationException(
                "ラベルマスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---研究の必要性プルダウン
        List kenkyuHitsuyouseiList = null;
        try{
            String[] labelKubun = new String[]{ILabelKubun.KENKYU_HITSUYOUSEI};
            List bothList = new LabelValueMaintenance().getLabelList(labelKubun);   //1つのラベルリスト
            kenkyuHitsuyouseiList = (List)bothList.get(0);
        }catch(ApplicationException e){
            throw new ApplicationException(
                "ラベルマスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---15分類プルダウン
        List kanrenbunyaBunruiList = null;
        try{
            List bothList = new LabelValueMaintenance().getKanrenBunyaBunruiList();   //1つのラベルリスト
            kanrenbunyaBunruiList = (List)bothList.get(0);
        }catch(ApplicationException e){
            throw new ApplicationException(
                "関連分野15分類マスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---職種プルダウン（研究組織表入力）
        List shokushuList = null;
        try{
            shokushuList = new LabelValueMaintenance().getShokushuList();
        }catch(ApplicationException e){
            throw new ApplicationException(
                "職種マスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---参考資料ファイル選択プルダウン
        List tenpuFileList = null;
        try{
            String[] labelKubun = new String[]{ILabelKubun.RYOIKI_TENPU_FLAG};
            List bothList = new LabelValueMaintenance().getLabelList(labelKubun);   //1つのラベルリスト
            tenpuFileList = (List)bothList.get(0);
        }catch(ApplicationException e){
            throw new ApplicationException(
                "ラベルマスタ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //領域計画書（概要）情報オブジェクトを生成する
        RyoikiKeikakushoInfo ryoikikeikakushoInfo = new RyoikiKeikakushoInfo();
        Connection connection = DatabaseUtil.getConnection();
        try{
            RyoikiKeikakushoPk rPkInfo = new RyoikiKeikakushoPk(ryoikiSystemNo);
            RyoikiKeikakushoInfoDao ryoikikeikakushoInfoDao = new RyoikiKeikakushoInfoDao(userInfo);
            ryoikikeikakushoInfo = ryoikikeikakushoInfoDao.selectRyoikiKeikakushoDataInfo(connection, rPkInfo);
        } catch(DataAccessException ex){
            throw new ApplicationException("領域計画書（概要）情報管理検索中にDBエラーが発生しました。",new ErrorInfo("errors.4004"));
        } catch(NoDataFoundException ex){
            throw new NoDataFoundException(
                    "領域計画書（概要）情報管理テーブルに該当するデータが見つかりません。検索キー：領域計画書（概要）情報管理"
                            + ryoikiSystemNo + "'");
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
        
        //ログイン情報から申請者情報をセットする
        ShinseishaInfo shinseishaInfo = userInfo.getShinseishaInfo();
        ryoikikeikakushoInfo.setNameKanjiSei(shinseishaInfo.getNameKanjiSei());                  //申請者氏名（漢字-姓）
        ryoikikeikakushoInfo.setNameKanjiMei(shinseishaInfo.getNameKanjiMei());                  //申請者氏名（漢字-名）
        ryoikikeikakushoInfo.setNameKanaSei(shinseishaInfo.getNameKanaSei());                    //申請者氏名（カナ-姓）
        ryoikikeikakushoInfo.setNameKanaMei(shinseishaInfo.getNameKanaMei());                    //申請者氏名（カナ-名）
        ryoikikeikakushoInfo.setShozokuCd(shinseishaInfo.getShozokuCd());                        //所属機関コード
        ryoikikeikakushoInfo.setShozokuName(shinseishaInfo.getShozokuName());                    //所属機関名 
        
        //事業管理情報をセットする
        ryoikikeikakushoInfo.setJigyoId(jigyoId);                               //事業ID
        ryoikikeikakushoInfo.setJigyoCd(jigyoCd);                               //事業CD
        ryoikikeikakushoInfo.setKaisu(kaisu);                                   //回数
        ryoikikeikakushoInfo.setNendoSeireki(jigyoId.substring(0,2));           //年度（西暦）
        ryoikikeikakushoInfo.setNendo(jigyoKanriInfo.getNendo());               //年度（和暦）
        ryoikikeikakushoInfo.setJigyoName(jigyoKanriInfo.getJigyoName());       //事業名

        //添付ファールについて
        TenpuFileInfoDao tenpuFileInfoDao= new TenpuFileInfoDao(userInfo);
        connection = DatabaseUtil.getConnection();
        RyoikiKeikakushoPk ryoikiKeikakushoPk = new RyoikiKeikakushoPk(ryoikikeikakushoInfo.getRyoikiSystemNo());
        try {
            TenpuFileInfo[] tenpuFileInfos = tenpuFileInfoDao.selectTenpuFileInfosForGaiyo(
                    connection, ryoikiKeikakushoPk);
            ryoikikeikakushoInfo.setTenpuFileInfos(tenpuFileInfos);
            ryoikikeikakushoInfo.setTenpuFileFlg(FLAG_TENPU_ARI);
        } catch(DataAccessException ex){
            throw new ApplicationException("添付ファイル管理テーブル検索中にDBエラーが発生しました。",new ErrorInfo("errors.4004"));
        } catch(NoDataFoundException ex){
            ryoikikeikakushoInfo.setTenpuFileFlg(FLAG_TENPU_NASI);
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
        
        //領域計画書（概要）情報（申請者情報、事業管理情報含む）とプルダウンリストをMapに格納して返す
        Map map = new HashMap();
        map.put(KEY_RYOIKIKEIKAKUSHO_INFO, ryoikikeikakushoInfo);
        map.put(KEY_KIBOUBUMON_LIST, kiboubumonList);
        map.put(KEY_JIZENCHOUSA_LIST, jizenchousaList);
        map.put(KEY_KENKYUHITSUYOUSEI_LIST, kenkyuHitsuyouseiList);
        map.put(KEY_KANRENBUNYABUNRUI_LIST, kanrenbunyaBunruiList);
        map.put(KEY_SHOKUSHU_LIST, shokushuList);
        map.put(KEY_RYOIKITENPUFLAG_LIST,tenpuFileList);

        return map;
    }
//　2006/06/20　　苗　追加ここまで
    
//2006/06/26　苗　追加ここから
    /**
     * 領域計画書情報の登録.<br><br>
     * 
     * 領域計画書、添付ファイルの登録を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * @param userInfo  UserInfo
     * @param dataInfo  ShinseiDataInfo
     * @param fileRes   FileResource
     * @return 領域計画書(RyoikikeikakushoInfo)
     * @throws ValidationException
     * @throws ApplicationException
     */
    public RyoikiKeikakushoInfo registGaiyoApplicationNew(UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, FileResource fileRes)
            throws ValidationException, ApplicationException {

        Connection connection = null;
        boolean success = false;
        RyoikiKeikakushoInfo resultInfo = null;
        try {
            // DBコネクションの取得
            connection = DatabaseUtil.getConnection();

            outputFileInfo(userInfo, fileRes);

            success = registGaiyoNew(ryoikikeikakushoInfo, connection, userInfo, fileRes);

        }
        finally {
            try {
                if (success) {
                    DatabaseUtil.commit(connection);
                    resultInfo = ryoikikeikakushoInfo;
                }
                else {
                    DatabaseUtil.rollback(connection);
                }
            }
            catch (TransactionException e) {
                throw new ApplicationException("申請データDB登録中にエラーが発生しました。", new ErrorInfo(
                        "errors.4001"), e);
            }
            finally {
                DatabaseUtil.closeConnection(connection);
            }
        }

        return resultInfo;

    }   

    
    private boolean registGaiyoNew(RyoikiKeikakushoInfo ryoikikeikakushoInfo,
            Connection connection, UserInfo userInfo, FileResource fileRes)
            throws ApplicationException {
        
        boolean        success      = false;
        RyoikiKeikakushoInfoDao dao = new RyoikiKeikakushoInfoDao(userInfo);
        
        //領域計画書情報に初期登録用データをセットする
        ryoikikeikakushoInfo.setSakuseiDate(new Date()); //作成日時
        ryoikikeikakushoInfo.setRyoikiJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN);//申請状況ステータス（申請書未確認）
        ryoikikeikakushoInfo.setHyoshiPdfPath(null);//表紙PDF格納パス
        
        //-----形式チェック＋値セット-----
        List errors = new ArrayList();
        
        //排他制御のため既存データを取得する
        RyoikiKeikakushoInfo existInfo = null;
        try {
            existInfo = dao.selectRyoikiKeikakushoInfoForLock(connection, ryoikikeikakushoInfo);
        }
        catch (NoDataFoundException e) {
            throw e;
        }
        catch (DataAccessException e) {
            throw new ApplicationException("領域計画書（概要）情報管理排他取得中にDBエラーが発生しました。", new ErrorInfo(
                    "errors.4004"), e);
        }

        //---領域計画書情報データ削除フラグチェック---
        String delFlag = existInfo.getDelFlg();
        if (FLAG_APPLICATION_DELETE.equals(delFlag)) {
            throw new ApplicationException("当該領域計画書（概要）情報は削除されています。SystemNo="
                    + ryoikikeikakushoInfo.getRyoikiSystemNo(), new ErrorInfo("errors.9001"));
        }

        //学振受付期間チェック
        if(!checkGakusinUketukeKikanGaiyo(userInfo, ryoikikeikakushoInfo)){
            errors.add(new ErrorInfo("errors.9007"));
        }
            
        //各種コードのチェックと該当データのセット
        checkGaiyoValidation(connection, userInfo, ryoikikeikakushoInfo, errors);

        //2006.11.02 iso 「参考資料なし」で添付ファイルが削除されないエラー修正
        //添付ファイル有無のチェック
        if(FLAG_TENPU_NASI.equals(ryoikikeikakushoInfo.getTenpuFileFlg())){
            //DBアクセスクラス
            TenpuFileInfoDao tpDao = null;
            
            //---DB削除---
            try{
                tpDao = new TenpuFileInfoDao(userInfo);
                tpDao.deleteTenpuFileInfosForGaiyo(connection, ryoikikeikakushoInfo);
            }catch(NoDataFoundException e){
                //処理を抜ける
            }catch(DataAccessException e){
                throw new ApplicationException(
                    "添付データDB削除中にエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }
        } else {
            if(fileRes == null && ryoikikeikakushoInfo.getTenpuFileInfos() == null){
                ErrorInfo err = new ErrorInfo("errors.2002",new String[]{"参考資料ファイル"});
                err.setProperty("uploadFile");
                errors.add(err); 
            }
        }

      
        //エラーが存在した場合
        if(errors.size() > 0){
            String msg = "領域計画書データ形式チェックで検証エラーとなりました。";
            throw new ValidationException(msg, errors);
        }
        
        //整理番号の採番
        String uketukeNo = getUketukeNumberForGaiyo(connection, userInfo, ryoikikeikakushoInfo);
        ryoikikeikakushoInfo.setUketukeNo(uketukeNo);

        //----------------------
        // 領域計画書（概要）データ登録
        //----------------------

        try {
            dao.updateRyoikiKeikakushoInfo(connection, ryoikikeikakushoInfo);
            success = true;
        } catch (DataAccessException e) {
            success = false;
            throw new ApplicationException(
                "領域計画書（概要）情報管理データ更新中にDBエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }
       
        //--------------------
        // 添付ファイル登録
        //--------------------
        //添付ファイルが指定されていた場合
        if(fileRes != null){
            try{
                registTenpuFileInfoForGaiyo(connection, userInfo, ryoikikeikakushoInfo, fileRes);
                success = true;
            }catch(ApplicationException e){
                success = false;
                throw e;
            }
        }
        return success;
    }
    
    /**
     * 学振受付期間チェック.<br><br>
     * 
     * 現在のシステム日付が当該事業の学振受付期間（終了）を過ぎていないかチェックする。<br><br>
     * 
     * <b>1.当該事業の事業情報を取得する。</b><br>
     * 　pkInfo(JigyoKanriPk)にshinseiDataInfoの変数jigyoIdをセットする。<br>
     * 　JigyoKanriMaintenanceクラスのselect(UserInfo, JigyoKanriPk)メソッド呼び、事業情報を取得する。<br>
     * 　引数に、第一引数userInfoとpkInfoを渡す。<br><br>
     * 
     *   JigyoKanriInfoが返却される。<br><br>
     * 
     * <b>2.現在日付と受付期間終了日を比較</b><br>
     * 　1で取得した事業情報から学振受付期間（終了）を取得し、現在日付(システム日付)と比較する。<br>
     * 　DateUtilクラスのgetElapse()メソッドにて比較する。<br><br>
     * 　現在日付＞受付期間終了日の場合：false<br>
     * 　現在日付＜受付期間終了日の場合：true<br>
     * 　を返却する。
     * 
     * @param userInfo          UserInfo
     * @param ryoikikeikakushoInfo   RyoikikeikakushoInfo
     * @return [true]学振受付期間（終了）を過ぎていない場合, [false]学振受付期間（終了）を過ぎている場合
     * @throws ApplicationException
     */
    private boolean checkGakusinUketukeKikanGaiyo(UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo) throws ApplicationException {
        
        // -----当該事業の事業情報を取得する
        JigyoKanriPk pkInfo = new JigyoKanriPk(ryoikikeikakushoInfo.getJigyoId());
        JigyoKanriInfo jigyoKanriInfo = null;
        try{
            IJigyoKanriMaintenance jigyoMainte = new JigyoKanriMaintenance();
            jigyoKanriInfo = jigyoMainte.select(userInfo, pkInfo);
        } catch (ApplicationException e) {
            throw new ApplicationException(
                "事業情報管理管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //学振受付期間（終了）の取得
        DateUtil uketukeEnd = new DateUtil(jigyoKanriInfo.getUketukekikanEnd());
        DateUtil now = new DateUtil();
        
        //現在日付と受付期間終了日を比較
        boolean bFlag = true;
        int dateSu = now.getElapse(uketukeEnd);
        if(dateSu < 0){
            //受付期間終了日を過ぎている場合
            bFlag = false;
            
            log.info("チェックリストチェック");
            log.info(ryoikikeikakushoInfo);
        }   
        
        return bFlag;       
        
    }
    
    /**
     * 形式チェックメソッド.<br><br>
     * 
     * 各種コードに該当するデータを、領域計画書情報(RyoikikeikakushoInfo)にセットする。<br><br>
     * 
     * @param connection    Connection
     * @param userInfo      UserInfo
     * @param ryoikikeikakushoInfo      RyoikikeikakushoInfo
     * @param errors        エラーリスト
     * @throws ApplicationException
     */
    private void checkGaiyoValidation(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, List errors) throws ApplicationException {
 
        // 最終年度前年度にあたる領域情報のチェックとセット
        checkAndSetRyoiki(connection, userInfo, ryoikikeikakushoInfo, errors);
        
        //関連分野（細目番号）1のチェックとセット
        try{
            setBunkaSaimoku1ForGaiyo(connection, userInfo, ryoikikeikakushoInfo);
        }catch(NoDataFoundException e){
            String msg = "関連分野（細目番号）1";
            String property = "ryoikikeikakushoInfo.bunkasaimokuCd1";
            errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));

            //細目番号が存在しない時、trueを設定する
            notSaimokuFlg = true;
        }
        
        try{
            setBunkaSaimoku2ForGaiyo(connection, userInfo, ryoikikeikakushoInfo);
        }catch(NoDataFoundException e){
            String msg      = "関連分野（細目番号）2";
            String property = "ryoikikeikakushoInfo.bunkasaimokuCd2";
            errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
        }

        //部局名称が入力項目になったので、その他…"709"、"913"、"899"、"875"、"903"、"999"である
        //且つ未入力の場合、部局マスタよりセットする。その他以外は変更された可能があるので
        //やはり部局マスタよりセットする必要がある。
        String bukyokuCd = ryoikikeikakushoInfo.getBukyokuCd();
        String bukyokuName = ryoikikeikakushoInfo.getBukyokuName();
        ShinseishaMaintenance mainte = new ShinseishaMaintenance();
        bukyokuName = mainte.getBukyokuCodeValue(userInfo, bukyokuCd, bukyokuName);
        ryoikikeikakushoInfo.setBukyokuName(bukyokuName);
                
        //職名コードが24で、職名が未入力の場合、マスタよりセットする.
        String shokushuCd = ryoikikeikakushoInfo.getShokushuCd();
        String shokushuName = ryoikikeikakushoInfo.getShokushuNameKanji();
        //職名コードが25以外、マスタよりセットする
        if (!"25".equals(shokushuCd)){
            shokushuName = mainte.getShokushuCodeValue(userInfo,
                            shokushuCd,
                            shokushuName);
            ryoikikeikakushoInfo.setShokushuNameKanji(shokushuName);
        }
        
        //事務担当者の機関コード、部局コード、職コード
        setValueFromCodeForJimutanto(userInfo, ryoikikeikakushoInfo, errors);
      
    }
    
    /**
     * 研究領域について<br><br>
     * 
     * @param connection        Connection
     * @param userInfo          UserInfo
     * @param shinseiDataInfo   shinseiDataInfo
     * @return [true]研究領域情報のセット完了
     *         [false]領域コードが指定されていない/領域コードが領域マスタテーブルに存在しない
     * 
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    private boolean checkAndSetRyoiki(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, List errors) throws NoDataFoundException,
            ApplicationException {
        
        // 領域番号の取得
        String ryoikiNo = ryoikikeikakushoInfo.getZennendoOuboNo();
        
        if(StringUtil.isBlank(ryoikiNo)){
            //コードが空の場合は初期化する
            ryoikikeikakushoInfo.setZennendoOuboRyoikiRyaku(null);
            ryoikikeikakushoInfo.setZennendoOuboSettei(null);
            return false;
        }
        
        //領域マスタDaoの生成
        MasterRyouikiInfoDao masterRyoikidao = new MasterRyouikiInfoDao(userInfo);
        
        String msg = "最終年度前年度にあたる領域番号";
        String property = "ryoikikeikakushoInfo.zennendoOuboNo";
        
        try{
            if("0".equals(masterRyoikidao.selectRyoikiNoCount(connection, ryoikiNo))){
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
                return false;
            }
        }catch(DataAccessException ex){
            throw new ApplicationException("最終年度前年度にあたる領域番号の検索中にエラーが発生しました。",new ErrorInfo("errors.4004"));
        }catch(NoDataFoundException ex){
            errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
        }
        
        //領域情報をセット
        Map ryoikiMap = new HashMap();
        
        try{
            ryoikiMap = MasterRyouikiInfoDao.selectRecord(connection, ryoikiNo);
        }catch(DataAccessException ex){
            throw new ApplicationException("領域情報検索中にDBエラーが発生しました。",new ErrorInfo("errors.4004"));
        }catch(NoDataFoundException ex){
            throw new NoDataFoundException("該当する情報が存在しません。", new ErrorInfo("errors.5002"), ex);
        }
        
        ryoikikeikakushoInfo.setZennendoOuboRyoikiRyaku((String)ryoikiMap.get("RYOIKI_RYAKU"));
        ryoikikeikakushoInfo.setZennendoOuboSettei((String)ryoikiMap.get("SETTEI_KIKAN"));
    
        return true;
    }
    
    /**
     * 事務担当者のセット.<br><br>
     * 
     * 機関名称、部局名、職名をセットする。<br><br>
     * @param userInfo  UserInfo
     * @param ryoikikeikakushoInfo  RyoikikeikakushoInfo
     * @param errors    エラーリスト
     * @throws ApplicationException
     */
    private void setValueFromCodeForJimutanto(UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, List errors) throws ApplicationException {
        
        
        String msg = null;
        String property = null;
        
        ShinseishaMaintenance mainte = new ShinseishaMaintenance();
        
        //--所属研究機関番号
        String jimutantoKikanCd = ryoikikeikakushoInfo.getJimutantoShozokuCd();
        
        if(StringUtil.isBlank(jimutantoKikanCd)){
            ryoikikeikakushoInfo.setJimutantoShozokuName(null);
        }
        
        if(!StringUtil.isBlank(jimutantoKikanCd)){
            if("99999".equals(jimutantoKikanCd)){
                msg = "事務担当者所属研究機関番号";
                property = "ryoikikeikakushoInfo.jimutantoShozokuCd";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            } else {
                try {
                    KikanInfo kikanInfo = mainte.getKikanCodeValue(userInfo, 
                            jimutantoKikanCd, 
                            null,  // 所属機関名(漢字)は無視
                            null); // 英語名は無視
                    ryoikikeikakushoInfo.setJimutantoShozokuName(kikanInfo.getShozokuNameKanji());
                } catch (NoDataFoundException ex){
                    msg = "事務担当者所属研究機関番号";
                    property = "ryoikikeikakushoInfo.jimutantoShozokuCd";
                    errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
                }
            }
        }
                    
        //--部局コード
        String jimutantoBukyokuCd = ryoikikeikakushoInfo.getJimutantoBukyokuCd();
        
        if(!StringUtil.isBlank(jimutantoBukyokuCd)){
            try{
                String jimutantoBukyokuName = ryoikikeikakushoInfo.getJimutantoBukyokuName();
                String bukyokuName = mainte.getBukyokuCodeValue(userInfo,
                                                                jimutantoBukyokuCd,
                                                                jimutantoBukyokuName);
                ryoikikeikakushoInfo.setJimutantoBukyokuName(bukyokuName);
            }catch(NoDataFoundException e){
                msg = "事務担当者部局番号";
                property = "ryoikikeikakushoInfo.jimutantoBukyokuCd";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
        }else{
            ryoikikeikakushoInfo.setJimutantoBukyokuName("");
        }
            
        //---職コード
        String jimutantoShokushuCd = ryoikikeikakushoInfo.getJimutantoShokushuCd();
        if(!StringUtil.isBlank(jimutantoShokushuCd)){
            try{
                String jimutantoShokushuName = ryoikikeikakushoInfo.getJimutantoShokushuNameKanji();
    
                //職コード25以外の場合、マスタよりセットする
                if(!"25".equals(jimutantoShokushuCd)){
                    String shokushuName = mainte.getShokushuCodeValue(userInfo,
                                                                      jimutantoShokushuCd,
                                                                      jimutantoShokushuName);
                    ryoikikeikakushoInfo.setJimutantoShokushuNameKanji(shokushuName);
                }
            }catch(NoDataFoundException e){
                msg = "事務担当者職名番号";
                property = "ryoikikeikakushoInfo.jimutantoShokushuCd";
                errors.add(new ErrorInfo("errors.2001", new String[]{msg}, property));
            }
        }else{
            ryoikikeikakushoInfo.setJimutantoShokushuNameKanji("");
        }
    }
    
    /**
     * 分科細目1をセット.<br><br>
     * 
     * @param connection        Connection
     * @param userInfo          UserInfo
     * @param ryoikikeikakushoInfo   RyoikikeikakushoInfo
     * @return [true]分科細目のセット完了, [false]分科細目コードが指定されていない
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    private boolean setBunkaSaimoku1ForGaiyo(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo) throws NoDataFoundException,
            ApplicationException {
      
        // 分科細目コードの取得
        String bunkasaimokuCd1 = ryoikikeikakushoInfo.getBunkasaimokuCd1();
        
        if (StringUtil.isBlank(bunkasaimokuCd1)) {
            // コードが空の場合は初期化する
            ryoikikeikakushoInfo.setSaimokuName1(null);
            ryoikikeikakushoInfo.setBunyaName1(null);
            ryoikikeikakushoInfo.setBunkaName1(null);
            return false;
        }
        
        //DAO生成
        MasterSaimokuInfoDao dao = new MasterSaimokuInfoDao(userInfo);
        
        //当該分科細目コードの分科名、細目名を取得する
        SaimokuPk saimokuPk = new SaimokuPk(bunkasaimokuCd1,null);
        SaimokuInfo saimokuInfo = null;
        try{
            saimokuInfo = dao.checkSaimokuInfoForGaiyo(connection, saimokuPk);
        }catch (DataAccessException e) {
            throw new ApplicationException(
                "分科細目情報取得時に例外が発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //分科細目情報をセット
        ryoikikeikakushoInfo.setBunkasaimokuCd1(saimokuInfo.getBunkaSaimokuCd());
        ryoikikeikakushoInfo.setSaimokuName1(saimokuInfo.getSaimokuName());
        ryoikikeikakushoInfo.setBunyaName1(saimokuInfo.getBunyaName());
        ryoikikeikakushoInfo.setBunkaName1(saimokuInfo.getBunkaName());
        
        return true;

    }
    
    /**
     * 分科細目2をセット.<br><br>
     * 
     * @param connection        Connection
     * @param userInfo          UserInfo
     * @param ryoikikeikakushoInfo   RyoikikeikakushoInfo
     * @return [true]分科細目のセット完了, [false]分科細目コードが指定されていない
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    
    private boolean setBunkaSaimoku2ForGaiyo(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo) throws NoDataFoundException, ApplicationException {
        
        //分科細目コードの取得
        String bunkasaimokuCd2 = ryoikikeikakushoInfo.getBunkasaimokuCd2();

        if (StringUtil.isBlank(bunkasaimokuCd2)) {
            // コードが空の場合は初期化する
            ryoikikeikakushoInfo.setSaimokuName2(null);
            ryoikikeikakushoInfo.setBunyaName2(null);
            ryoikikeikakushoInfo.setBunkaName2(null);
            return false;
        }

        // DAO生成
        MasterSaimokuInfoDao dao = new MasterSaimokuInfoDao(userInfo);

        // 当該分科細目コードの分科名、細目名を取得する
        SaimokuPk saimokuPk = new SaimokuPk(bunkasaimokuCd2, null);
        SaimokuInfo saimokuInfo = null;
        try {
            saimokuInfo = dao.checkSaimokuInfoForGaiyo(connection, saimokuPk);
        }catch (DataAccessException e) {
            throw new ApplicationException("分科細目情報取得時に例外が発生しました。", new ErrorInfo("errors.4004"), e);
        }

        //分科細目情報をセット
        ryoikikeikakushoInfo.setBunkasaimokuCd2(saimokuInfo.getBunkaSaimokuCd());
        ryoikikeikakushoInfo.setSaimokuName2(saimokuInfo.getSaimokuName());
        ryoikikeikakushoInfo.setBunyaName2(saimokuInfo.getBunyaName());
        ryoikikeikakushoInfo.setBunkaName2(saimokuInfo.getBunkaName());

        return true;
    }
    
    /**
     * 受付番号（整理番号）の生成.<br><br>
     * 
     * 審査希望部門（系等）コードから申請番号を生成する。<br><br>
     * @param connection                Connection
     * @param userInfo                  UserInfo
     * @param ryoikikeikakushoInfo      RyoikikeikakushoInfo
     * @return　受付番号（整理番号）
     * @throws ApplicationException
     */
    private static String getUketukeNumberForGaiyo(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo) throws ApplicationException {
        
        try{
            RyoikiKeikakushoInfoDao dao = new RyoikiKeikakushoInfoDao(userInfo);
//            //順番
//            String seiriNumber = dao.getUketukeNo(connection, ryoikikeikakushoInfo);
            //審査希望部門（系等）コード
            String kiboubumonCd = ryoikikeikakushoInfo.getKiboubumonCd();
            
            //2006.08.15 iso 審査希望部門略称の取得メソッドを独立
            //審査希望部門略称
//            String kiboubumonRyaku = "";
//            
//            if("01".equals(kiboubumonCd)){
//                kiboubumonRyaku = "人";
//            } else if ("02".equals(kiboubumonCd)){
//                kiboubumonRyaku = "数";
//            } else if ("03".equals(kiboubumonCd)){
//                kiboubumonRyaku = "化";
//            } else if ("04".equals(kiboubumonCd)){
//                kiboubumonRyaku = "工";
//            } else if ("05".equals(kiboubumonCd)){
//                kiboubumonRyaku = "生";
//            }
          String kiboubumonRyaku = getKiboubumonRyaku(kiboubumonCd);


            //2006.08.14 iso
            //確定解除で作成中の時、審査希望分野を変更して一時保存した場合、
            //受付番号が採番されないバグを修正。
            
            //受付番号「人XX」、希望分野コード05(生物)のようなデータが生まれる可能性があるため、
            //順番の取得は、受付番号の頭文字で行う。
            //順番
            String seiriNumber = dao.getUketukeNo(connection, ryoikikeikakushoInfo, kiboubumonRyaku);
            
            //審査希望部門略称＋順番
            return new StringBuffer(kiboubumonRyaku)
                    .append(seiriNumber)
                    .toString();
        }catch(DataAccessException e){
            throw new ApplicationException(
                "受付番号（整理番号）採番中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
    }

    //2006.08.15 iso 複数個所で使うので独立。
    /**
     * 審査希望部門略称の生成.<br><br>
     * 
     * 審査希望部門（系等）コードから審査希望部門略称を生成する。<br><br>
     * @param kiboubumonCd      String
     * @return　審査希望部門略称
     * @throws ApplicationException
     */
    private static String getKiboubumonRyaku(String kiboubumonCd) throws ApplicationException {
        
        //審査希望部門略称
        String kiboubumonRyaku = "";
        
        if("01".equals(kiboubumonCd)){
            kiboubumonRyaku = "人";
        } else if ("02".equals(kiboubumonCd)){
            kiboubumonRyaku = "数";
        } else if ("03".equals(kiboubumonCd)){
            kiboubumonRyaku = "化";
        } else if ("04".equals(kiboubumonCd)){
            kiboubumonRyaku = "工";
        } else if ("05".equals(kiboubumonCd)){
            kiboubumonRyaku = "生";
        } else {
        	//受付番号が正しく取得できない場合は、エラーとする。
        	String property = "ryoikikeikakushoInfo.kiboubumonCd";
            throw new ApplicationException(
                "審査希望部門略称の生成中にエラーが発生しました。",
                new ErrorInfo("errors.2001", new String[] { "審査希望部門（系等）" }, property));
        }
        return kiboubumonRyaku;
    }
    
    /**
     * 添付ファイルを格納.<br><br>
     * 
     * 添付ファイルを登録する。<br><br>
     * 
     * @param connection        Connection
     * @param userInfo          UserInfo
     * @param shinseiDataInfo   ShinseiDataInfo
     * @param fileRes           FileResource
     * @throws ApplicationException
     */
    private static void registTenpuFileInfoForGaiyo(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, FileResource fileRes)
            throws ApplicationException
    {
        // システム番号
        String systemNo  = ryoikikeikakushoInfo.getRyoikiSystemNo();
        //　事業ID
        String jigyoId   = ryoikikeikakushoInfo.getJigyoId();
        
        //DBアクセスクラス
        TenpuFileInfoDao dao = null;
        
        //---DB削除---
        try{
            dao = new TenpuFileInfoDao(userInfo);
            dao.deleteTenpuFileInfosForGaiyo(connection, ryoikikeikakushoInfo);
        }catch(NoDataFoundException e){
            //処理を抜ける
        }catch(DataAccessException e){
            throw new ApplicationException(
                "添付データDB削除中にエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }
        
        //---ファイル情報---
        String[] pathInfo = new String[]{jigyoId+"_RG", systemNo};

        String outPath;
        String delPath;
        if(fileRes.getName().toLowerCase().endsWith(DOC)) {
            outPath  = MessageFormat.format(SHINSEI_ANNEX_FOLDER, pathInfo);
            delPath  = MessageFormat.format(SHINSEI_ANNEX_PDF_FOLDER, pathInfo);
        } else if(fileRes.getName().toLowerCase().endsWith(PDF)) {
            outPath  = MessageFormat.format(SHINSEI_ANNEX_PDF_FOLDER, pathInfo);
            delPath  = MessageFormat.format(SHINSEI_ANNEX_FOLDER, pathInfo);
        } else {
            throw new ApplicationException(
                "添付ファイル格納中にエラーが発生しました。",
                new ErrorInfo("errors.7001"));
        }

        try{
            //PDFファイル添付の場合、有効なPDFかチェックする。
            if(outPath.endsWith(PDF)) {
                String property = "uploadFile";
                IPdfConvert pdfConvert = new PdfConvert();
                int resultCode = pdfConvert.checkPdf(fileRes);
                if(resultCode != 0) {
                    //エラーファイルの場合、エラーフォルダに格納する
                    File errFile = new File(MessageFormat.format(SHINSEI_ANNEX_ERR_FOLDER, pathInfo));
                    FileUtil.writeFile(errFile, fileRes.getBinary());
    
                    List errors = new ArrayList();
                    if(resultCode == 27) {
                        errors.add(new ErrorInfo("errors.8101", new String[]{"PDFファイルにパスワードが設定されています。"}, property));
                    } else {
                        errors.add(new ErrorInfo("errors.8100", new String[]{"PDFファイルが不正です。"}, property));
                    }
                    throw new ValidationException("PDFチェックでエラーが起きました。", errors);
                }
            }
        }catch(IOException e){
            throw new ApplicationException(
                "添付ファイル（エラーファイル）格納中にエラーが発生しました。",
                new ErrorInfo("errors.7001"),
                e);
        }
        
        File     outFile   = new File(outPath);
        File     delFile   = new File(delPath);
        if(outFile.exists()){
            FileUtil.delete(outFile);   //存在した場合は削除
        }
        if(delFile.exists()){
            FileUtil.delete(delFile);   //存在した場合は削除
        }
        
        //-----新規登録-----
        try{
            //---ファイル格納---
            FileUtil.writeFile(outFile, fileRes.getBinary());

            //---DB登録---
            TenpuFileInfo tenpuInfo = new TenpuFileInfo();
            tenpuInfo.setSystemNo(systemNo);
            tenpuInfo.setSeqTenpu("1");         //新規登録なので必ず[1]
            tenpuInfo.setJigyoId(jigyoId);
            tenpuInfo.setTenpuPath(outPath);

            //Word(.doc)ならtenpuPath、PDF(.pdf)ならpdfPathのパスに書き込み
            if(outPath.endsWith(DOC)) {
                tenpuInfo.setTenpuPath(outPath);
            } else if(outPath.endsWith(PDF)) {
                tenpuInfo.setPdfPath(outPath);
            } else {
                throw new ApplicationException(
                    "添付ファイル格納中にエラーが発生しました。",
                    new ErrorInfo("errors.7001"));
            }
            
            dao.insertTenpuFileInfo(connection, tenpuInfo);
        }catch(IOException e){
            throw new ApplicationException(
                "添付ファイル格納中にエラーが発生しました。",
                new ErrorInfo("errors.7001"),
                e);
        }catch(DataAccessException e){
            throw new ApplicationException(
                "添付データDB登録中にエラーが発生しました。",
                new ErrorInfo("errors.4001"),
                e);
        }
                            
    }
    
    /**
     * 領域計画書情報の更新.<br><br>
     * 
     * 領域計画書、添付ファイルの登録を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * @param userInfo  UserInfo
     * @param ryoikikeikakushoInfo  RyoikiKeikakushoInfo
     * @param fileRes   FileResource
     * @return 領域計画書(RyoikikeikakushoInfo)
     * @throws ValidationException
     * @throws ApplicationException
     */
    public RyoikiKeikakushoInfo registGaiyoApplicationUpdate(UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, FileResource fileRes)
            throws ValidationException, ApplicationException {

        Connection connection = null;
        boolean success = false;
        RyoikiKeikakushoInfoDao dao = new RyoikiKeikakushoInfoDao(userInfo);
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();

            //ファイルログ出力
            outputFileInfo(userInfo, fileRes);

            //排他制御のため既存データを取得する
            RyoikiKeikakushoInfo existInfo = null;
            try {
                existInfo = dao.selectRyoikiKeikakushoInfoForLock(connection, ryoikikeikakushoInfo);
            }
            catch (NoDataFoundException e) {
                throw e;
            }
            catch (DataAccessException e) {
                throw new ApplicationException("領域計画書（概要）情報管理排他取得中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4004"), e);
            }

            //---領域計画書データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg();
            if (FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException("当該領域計画書（概要）情報は削除されています。SystemNo="
                        + ryoikikeikakushoInfo.getRyoikiSystemNo(), new ErrorInfo("errors.9001"));
            }

            //---申請データステータスチェック---
            String jyokyoId = existInfo.getRyoikiJokyoId();
            //---作成中のとき
            if (StatusCode.STATUS_SAKUSEITHU.equals(jyokyoId)) {
                ryoikikeikakushoInfo.setRyoikiJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN); //申請書未確認にセット
                //---申請書未確認のとき
            } else if (StatusCode.STATUS_SHINSEISHO_MIKAKUNIN.equals(jyokyoId)) {
                ryoikikeikakushoInfo.setRyoikiJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN); //申請書未確認にセット    
                //---所属機関受付中のとき
            } else if (StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU.equals(jyokyoId)) {
                ryoikikeikakushoInfo.setRyoikiJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN); //申請書未確認にセット
                //---所属機関却下のとき
            } else if (StatusCode.STATUS_SHOZOKUKIKAN_KYAKKA.equals(jyokyoId)) {
                ryoikikeikakushoInfo.setRyoikiJokyoId(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN); //申請書未確認にセット
                //---それ以外のとき
            } else {
                throw new ApplicationException("当該領域計画書（概要）情報は申請登録可能なステータスではありません。SystemNo="
                        + ryoikikeikakushoInfo.getRyoikiSystemNo(), new ErrorInfo("errors.9003"));
            }

            // 領域計画書情報に初期登録用データをセットする
            ryoikikeikakushoInfo.setSakuseiDate(new Date()); //作成日時
            ryoikikeikakushoInfo.setHyoshiPdfPath(null);//表紙PDF格納パス

            //-----形式チェック＋値セット-----
            List errors = new ArrayList();

            //学振受付期間チェック
            if (!checkGakusinUketukeKikanGaiyo(userInfo, ryoikikeikakushoInfo)) {
                errors.add(new ErrorInfo("errors.9007"));
            }

            //各種コードのチェックと該当データのセット
            checkGaiyoValidation(connection, userInfo, ryoikikeikakushoInfo, errors);
            
            //添付ファイル有無のチェック
            if(FLAG_TENPU_NASI.equals(ryoikikeikakushoInfo.getTenpuFileFlg())){
                //DBアクセスクラス
                TenpuFileInfoDao tpDao = null;
                
                //---DB削除---
                try{
                    tpDao = new TenpuFileInfoDao(userInfo);
                    tpDao.deleteTenpuFileInfosForGaiyo(connection, ryoikikeikakushoInfo);
                }catch(NoDataFoundException e){
                    //処理を抜ける
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "添付データDB削除中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
            } else {
                if(fileRes == null && ryoikikeikakushoInfo.getTenpuFileInfos() == null){
                    ErrorInfo err = new ErrorInfo("errors.2002",new String[]{"参考資料ファイル"});
                    err.setProperty("uploadFile");
                    errors.add(err); 
                }
            }

            //エラーが存在した場合
            if (errors.size() > 0) {
                String msg = "領域計画書データ形式チェックで検証エラーとなりました。";
                throw new ValidationException(msg, errors);
            }

            if (!checkRegistUketsukeNoForGaiyo(connection, userInfo, ryoikikeikakushoInfo)) {

                existInfo.setRyoikiSystemNo(getSystemNumberForGaiyo()); //システム受付番号
                existInfo.setDelFlg("1"); //削除データとして登録する。
                try {
                    dao.insertRyoikiKeikakushoInfo(connection, existInfo);
                    success = true;
                }
                catch (DataAccessException e) {
                    success = false;
                    throw new ApplicationException("領域計画書（概要）情報管理データ登録中にDBエラーが発生しました。", new ErrorInfo(
                            "errors.4001"), e);
                }

                //新しい受付番号を採番するため、一旦空にする。
                existInfo.setUketukeNo(null);
            }

            //既存データに申請番号が採番されていない場合は採番する
            if (StringUtil.isBlank(existInfo.getUketukeNo())) {
                String uketukeNo = getUketukeNumberForGaiyo(connection, userInfo, ryoikikeikakushoInfo);
                ryoikikeikakushoInfo.setUketukeNo(uketukeNo);
            }

            //----------------------
            // 領域計画書（概要）データ登録
            //----------------------

            try {
                dao.updateRyoikiKeikakushoInfo(connection, ryoikikeikakushoInfo);
                success = true;
            }
            catch (DataAccessException e) {
                success = false;
                throw new ApplicationException("領域計画書（概要）情報管理データ更新中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4001"), e);
            }

            //--------------------
            // 添付ファイル登録
            //--------------------
            //添付ファイルが指定されていた場合
            if (fileRes != null) {
                try {
                    registTenpuFileInfoForGaiyo(connection, userInfo, ryoikikeikakushoInfo, fileRes);
                    success = true;
                }
                catch (ApplicationException e) {
                    success = false;
                    throw e;
                }
            }
            
        }finally{
            try{
                if(success){
                    DatabaseUtil.commit(connection);
                }else{
                    DatabaseUtil.rollback(connection);
                }
            }catch(TransactionException e){
                throw new ApplicationException(
                    "領域計画書データDB登録中にエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }finally{
                DatabaseUtil.closeConnection(connection);
            }
        }
        return ryoikikeikakushoInfo;
    }

    
    /**
     * 受付番号生成に必要な値が変更されていないかチェックします。<BR>
     * 変更されいない場合→true<BR>
     * 変更されている場合→false<BR><BR>
     * 
     * @param connection    Connection
     * @param userInfo  UserInfo
     * @param ryoikikeikakushoInfo   RyoikikeikakushoInfo
     * @return チェック結果
     * @throws ApplicationException
     */
    private static boolean checkRegistUketsukeNoForGaiyo(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo) throws ApplicationException {
        
        RyoikiKeikakushoInfo resultInfo = new RyoikiKeikakushoInfo();
        RyoikiKeikakushoInfoDao dao = new RyoikiKeikakushoInfoDao(userInfo);
        boolean returnFlg = true;
        
        //---登録済みデータを取得しチェック---
        try{
            resultInfo = dao.selectRyoikiKeikakushoDataInfo(connection, ryoikikeikakushoInfo);

            //　整理番号に関係項目（審査希望部門（系統））に変更があった場合、採番し直す
            if(!isEqual(ryoikikeikakushoInfo.getKiboubumonCd(), resultInfo.getKiboubumonCd().trim())){
                returnFlg = false;
            }
            
            //2006.08.15 iso
            //確定解除で作成中の時、審査希望分野を変更して一時保存した場合、
            //受付番号が採番されないバグを修正。
            //DBに格納してあるデータの受付番号と入力された審査希望分野名（コードより略称取得）の1文字目が異なる場合、
            //解除後の一時保存で希望分野の変更があったと見なす。
            
            //審査希望部門略称をコードより取得
            String kiboubumonRyaku = getKiboubumonRyaku(ryoikikeikakushoInfo.getKiboubumonCd());
            if(!isEqual(resultInfo.getUketukeNo().substring(0, 1), kiboubumonRyaku)) {
            	returnFlg = false;
            }

        } catch(NoDataFoundException e){
            throw new ApplicationException("チェックデータ元が登録されていません。", new ErrorInfo("errors.4001"), e);
        } catch (DataAccessException e) {
            throw new ApplicationException("受付番号再登録中にDBエラーが発生しました。", new ErrorInfo("errors.4001"), e);
        }
        return returnFlg;
    }
    
    /**
     * システム受付番号の生成.<br><br>
     * 
     * WASのシステム日付をフォーマットし、受付番号を取得する。<br>
     * フォーマットパターン−"RGyyyyMMddHHmmssSSS"
     * 
     * @return システム受付番号
     */
    public synchronized static String getSystemNumberForGaiyo()
    {
        //念のため1ミリ秒スリープさせて確実に別番号を返す。
        try{
            Thread.sleep(1);
        }catch(InterruptedException e){
            e.printStackTrace();    //特に何も処理しない
        }
        //現在時刻をシステム受付番号のフォーマットに変換する
        Date now = new Date();
        String systemNo = new SimpleDateFormat("yyMMddHHmmssSSS").format(now);
        systemNo = "RG"+ systemNo; 
        return systemNo;
    }
    
    /**
     * 領域計画書情報の一時保存.(更新)<br><br>
     * 
     * 領域計画書、添付ファイルの登録を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * @param userInfo  UserInfo
     * @param dataInfo  ShinseiDataInfo
     * @param fileRes   FileResource
     * @throws ValidationException
     * @throws ApplicationException
     */
    public void transientGaiyoApplicationUpdate (UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, FileResource fileRes)
            throws ValidationException, ApplicationException {

        Connection connection = null;
        boolean success = false;
        RyoikiKeikakushoInfoDao dao = new RyoikiKeikakushoInfoDao(userInfo);
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();

            outputFileInfo(userInfo, fileRes);

            //排他制御のため既存データを取得する
            RyoikiKeikakushoInfo existInfo = null;
            try {
                existInfo = dao.selectRyoikiKeikakushoInfoForLock(connection, ryoikikeikakushoInfo);
            }
            catch (NoDataFoundException e) {
                throw e;
            }
            catch (DataAccessException e) {
                throw new ApplicationException("領域計画書（概要）情報管理排他取得中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4004"), e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg();
            if (FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException("当該領域計画書（概要）情報は削除されています。SystemNo="
                        + ryoikikeikakushoInfo.getRyoikiSystemNo(), new ErrorInfo("errors.9001"));
            }
            
            //---申請データステータスチェック---
            String jyokyoId = existInfo.getRyoikiJokyoId();
            if(!StatusCode.STATUS_SAKUSEITHU.equals(jyokyoId))  //作成中以外はNG
            {
                throw new ApplicationException(
                    "当該申請データは一時保存可能なステータスではありません。SystemNo=" + ryoikikeikakushoInfo.getRyoikiSystemNo(),
                    new ErrorInfo("errors.9002"));
            }

            //-----形式チェック＋値セット-----
            List errors = new ArrayList();

            //学振受付期間チェック
            if (!checkGakusinUketukeKikanGaiyo(userInfo, ryoikikeikakushoInfo)) {
                errors.add(new ErrorInfo("errors.9007"));
            }

            //各種コードのチェックと該当データのセット
            checkGaiyoValidation(connection, userInfo, ryoikikeikakushoInfo, errors);
            
            //添付ファイル有無のチェック
            if(FLAG_TENPU_NASI.equals(ryoikikeikakushoInfo.getTenpuFileFlg())){
                //DBアクセスクラス
                TenpuFileInfoDao tpDao = null;
                
                //---DB削除---
                try{
                    tpDao = new TenpuFileInfoDao(userInfo);
                    tpDao.deleteTenpuFileInfosForGaiyo(connection, ryoikikeikakushoInfo);
                }catch(NoDataFoundException e){
                    //処理を抜ける
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "添付データDB削除中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
            } else {
                if(fileRes == null && ryoikikeikakushoInfo.getTenpuFileInfos() == null){
                    ErrorInfo err = new ErrorInfo("errors.2002",new String[]{"参考資料ファイル"});
                    err.setProperty("uploadFile");
                    errors.add(err); 
                }
            }

            //エラーが存在した場合
            if (errors.size() > 0) {
                String msg = "領域計画書データ形式チェックで検証エラーとなりました。";
                throw new ValidationException(msg, errors);
            }

            //----------------------
            // 領域計画書（概要）データ登録
            //----------------------

            try {
                dao.updateRyoikiKeikakushoInfo(connection, ryoikikeikakushoInfo);
                success = true;
            }
            catch (DataAccessException e) {
                success = false;
                throw new ApplicationException("領域計画書（概要）情報管理データ更新中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4001"), e);
            }

            //--------------------
            // 添付ファイル登録
            //--------------------
            //添付ファイルが指定されていた場合
            if (fileRes != null) {
                try {
                    registTenpuFileInfoForGaiyo(connection, userInfo, ryoikikeikakushoInfo, fileRes);
                    success = true;
                }
                catch (ApplicationException e) {
                    success = false;
                    throw e;
                }
            }
            
        }finally{
            try{
                if(success){
                    DatabaseUtil.commit(connection);
                }else{
                    DatabaseUtil.rollback(connection);
                }
            }catch(TransactionException e){
                throw new ApplicationException(
                    "領域計画書データDB登録中にエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }finally{
                DatabaseUtil.closeConnection(connection);
            }
        }
    }

    /**
     * 領域計画書情報の一時保存.(新規)<br><br>
     * 
     * 領域計画書、添付ファイルの登録を行う。<br>
     * 途中で例外が発生したら、ロールバックする。<br><br>
     * 
     * @param userInfo  UserInfo
     * @param dataInfo  ShinseiDataInfo
     * @param fileRes   FileResource
     * @return 領域計画書(RyoikikeikakushoInfo)
     * @throws ValidationException
     * @throws ApplicationException
     */
    public RyoikiKeikakushoInfo transientGaiyoApplicationNew (UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo, FileResource fileRes)
            throws ValidationException, ApplicationException {

        Connection connection = null;
        boolean success = false;
        RyoikiKeikakushoInfoDao dao = new RyoikiKeikakushoInfoDao(userInfo);
        try {
            //DBコネクションの取得
            connection = DatabaseUtil.getConnection();

            outputFileInfo(userInfo, fileRes);

            //排他制御のため既存データを取得する
            RyoikiKeikakushoInfo existInfo = null;
            try {
                existInfo = dao.selectRyoikiKeikakushoInfoForLock(connection, ryoikikeikakushoInfo);
            }
            catch (NoDataFoundException e) {
                throw e;
            }
            catch (DataAccessException e) {
                throw new ApplicationException("領域計画書（概要）情報管理排他取得中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4004"), e);
            }

            //---申請データ削除フラグチェック---
            String delFlag = existInfo.getDelFlg();
            if (FLAG_APPLICATION_DELETE.equals(delFlag)) {
                throw new ApplicationException("当該領域計画書（概要）情報は削除されています。SystemNo="
                        + ryoikikeikakushoInfo.getRyoikiSystemNo(), new ErrorInfo("errors.9001"));
            }

            // 領域計画書情報に初期登録用データをセットする
            ryoikikeikakushoInfo.setSakuseiDate(new Date()); //作成日時
            ryoikikeikakushoInfo.setRyoikiJokyoId(StatusCode.STATUS_SAKUSEITHU);//申請状況ステータス（申請書作成中）

            //-----形式チェック＋値セット-----
            List errors = new ArrayList();

            //学振受付期間チェック
            if (!checkGakusinUketukeKikanGaiyo(userInfo, ryoikikeikakushoInfo)) {
                errors.add(new ErrorInfo("errors.9007"));
            }
            
            //2006.11.02 iso 「参考資料なし」で添付ファイルが削除されないエラー修正
            //添付ファイル有無のチェック
            if(FLAG_TENPU_NASI.equals(ryoikikeikakushoInfo.getTenpuFileFlg())){
                //DBアクセスクラス
                TenpuFileInfoDao tpDao = null;
                
                //---DB削除---
                try{
                    tpDao = new TenpuFileInfoDao(userInfo);
                    tpDao.deleteTenpuFileInfosForGaiyo(connection, ryoikikeikakushoInfo);
                }catch(NoDataFoundException e){
                    //処理を抜ける
                }catch(DataAccessException e){
                    throw new ApplicationException(
                        "添付データDB削除中にエラーが発生しました。",
                        new ErrorInfo("errors.4001"),
                        e);
                }
            } else {
                if(fileRes == null && ryoikikeikakushoInfo.getTenpuFileInfos() == null){
                    ErrorInfo err = new ErrorInfo("errors.2002",new String[]{"参考資料ファイル"});
                    err.setProperty("uploadFile");
                    errors.add(err); 
                }
            }


            //各種コードのチェックと該当データのセット
            checkGaiyoValidation(connection, userInfo, ryoikikeikakushoInfo, errors);

            //エラーが存在した場合
            if (errors.size() > 0) {
                String msg = "領域計画書データ形式チェックで検証エラーとなりました。";
                throw new ValidationException(msg, errors);
            }

            //----------------------
            // 領域計画書（概要）データ登録
            //----------------------

            try {
                dao.updateRyoikiKeikakushoInfo(connection, ryoikikeikakushoInfo);
                success = true;
            }
            catch (DataAccessException e) {
                success = false;
                throw new ApplicationException("領域計画書（概要）情報管理データ更新中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4001"), e);
            }

            //--------------------
            // 添付ファイル登録
            //--------------------
            //添付ファイルが指定されていた場合
            if (fileRes != null) {
                try {
                    registTenpuFileInfoForGaiyo(connection, userInfo, ryoikikeikakushoInfo, fileRes);
                    success = true;
                }
                catch (ApplicationException e) {
                    success = false;
                    throw e;
                }
            }
            
        }finally{
            try{
                if(success){
                    DatabaseUtil.commit(connection);
                }else{
                    DatabaseUtil.rollback(connection);
                }
            }catch(TransactionException e){
                throw new ApplicationException(
                    "領域計画書データDB登録中にエラーが発生しました。",
                    new ErrorInfo("errors.4001"),
                    e);
            }finally{
                DatabaseUtil.closeConnection(connection);
            }
        }
        return ryoikikeikakushoInfo;
    }

//2006/06/26　苗　追加ここまで  
    
//  2006/06/27 宮　追加ここから
    /**
     * 領域計画書概要確認完了確認
     * @param userInfo  UserInfo
     * @param ryoikikeikakushoPk
     * @return なし
     * @throws NoDataFoundException
     * @throws DataAccessException
     * @throws ApplicationException
     */
    public void confirmGaiyoComplete(UserInfo userInfo, RyoikiKeikakushoPk ryoikikeikakushoPk)
        throws NoDataFoundException,ApplicationException{
        //      DBコネクションの取得
        Connection connection = null;  

        if ( log.isDebugEnabled() ){
            log.debug("領域計画書概要確認完了確認開始");
        }
        
        //--------------------
        // アンケートデータ登録
        //--------------------
        boolean success = false;
        RyoikiKeikakushoInfo ryoikikeikakushoInfo=null;
        try {
            connection = DatabaseUtil.getConnection();
            RyoikiKeikakushoInfoDao ryoikikeikakushoInfoDao = new RyoikiKeikakushoInfoDao(userInfo);
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(userInfo);

            // 形式チェック データが存在しない場合、エラーとする
            ryoikikeikakushoInfo=ryoikikeikakushoInfoDao.selectRyoikiKeikakushoInfoForLock(connection,ryoikikeikakushoPk);
          
            //該当領域計画書概要の存在チェック
            String delFlg=ryoikikeikakushoInfo.getDelFlg();
            if(!(!StringUtil.isBlank(delFlg)&&delFlg.equals(FLAG_JURI_KEKKA_JURI))){
                throw new ApplicationException("当該領域計画書情報データは削除されています。",
                                               new ErrorInfo("errors.9001"));
            }
            
            //ステータスチェック：RYOIKI_JOKYO_ID=02（未確認）,RYOIKIKEIKAKUSHO_KAKUTEI_FLG=1（領域計画書確定済）チェック
            String ryoikiJokyoId=ryoikikeikakushoInfo.getRyoikiJokyoId();           
            String ryoikikeikakushoKakuteiFlg=ryoikikeikakushoInfo.getRyoikikeikakushoKakuteiFlg();
            if(!(!StringUtil.isBlank(ryoikiJokyoId)&&ryoikiJokyoId.equals(StatusCode.STATUS_SHINSEISHO_MIKAKUNIN)&&
                    !StringUtil.isBlank(ryoikikeikakushoKakuteiFlg)&&
                    ryoikikeikakushoKakuteiFlg.equals(FLAG_RYOIKIKEIKAKUSHO_KAKUTEI))){
                throw new ApplicationException("当該領域計画書（概要）情報は申請登録可能なステータスではありません。SystemNo="
                                               + ryoikikeikakushoInfo.getRyoikiSystemNo(), 
                                               new ErrorInfo("errors.9000", new String[]{"当該領域計画書（概要）情報は確認"}));
            }
            
            //学振受付期間チェック
            if(!checkGakusinUketukeKikanGaiyo(userInfo, ryoikikeikakushoInfo)){
                throw new ApplicationException("学振受付期間を過ぎています。",
                                               new ErrorInfo("errors.9007"));
            }
            
//2007/02/06 苗　追加ここから
            //受付番号の重複チェック
            String systemNo = ryoikikeikakushoInfo.getRyoikiSystemNo();
            if (!checkUketukeNumberForGaiyo(connection, userInfo, ryoikikeikakushoInfo)) {                
                //ログ出力
                regetRyoikiLog.info(ryoikikeikakushoInfo);
                //新しい受付番号を採番するため、一旦空にする。
                ryoikikeikakushoInfo.setUketukeNo(null);
            }

            //既存データに申請番号が採番されていない場合は採番する
            if (StringUtil.isBlank(ryoikikeikakushoInfo.getUketukeNo())) {
                String uketukeNo = getUketukeNumberForGaiyo(connection, userInfo, ryoikikeikakushoInfo);
                ryoikikeikakushoInfo.setUketukeNo(uketukeNo);
                ryoikikeikakushoInfo.setRyoikiSystemNo(systemNo);
                ryoikikeikakushoInfo.setDelFlg("0");
            }
//2007/02/06 苗　追加ここまで
            //RYOIKIKEIKAKUSHOKANRIに、・RYOIKI_JOKYO_ID=03（所属研究機関受付中）に更新する
            int edition = Integer.parseInt(ryoikikeikakushoInfo.getEdition());
            edition++;
            ryoikikeikakushoInfo.setEdition(new Integer(edition).toString());
            ryoikikeikakushoInfo.setSakuseiDate(new Date());
            ryoikikeikakushoInfo.setRyoikiJokyoId(StatusCode.STATUS_SHOZOKUKIKAN_UKETUKETYU);
//2006/07/21 苗　追加ここから           
            //----------------------------
            //保存ファイルの作成(PDF)
            //----------------------------
            File iodFile = new File(MessageFormat.format(SHINSEI_PDF_FOLDER,
                    new Object[] { ryoikikeikakushoInfo.getJigyoId() + "_RG",
                    ryoikikeikakushoInfo.getRyoikiSystemNo() }));
            if (log.isDebugEnabled()) {
                log.debug("申請データPDF変換ファイルは'" + iodFile + "'です。");
            }
            ryoikikeikakushoInfo.setPdfPath(iodFile.getAbsolutePath());
            ryoikikeikakushoInfoDao.updateRyoikiKeikakushoInfo(connection,ryoikikeikakushoInfo);
            
            //SHINSEIDATAKANRIに、・更新内容：JOKYO_ID=24（領域代表者所属研究機関受付中）に更新する
            String status=StatusCode.STATUS_RYOUIKISHOZOKU_UKETUKE;
            String[] JOKYO_ID = new String[]{StatusCode.STATUS_RYOUIKIDAIHYOU_KAKUTEIZUMI};       
            ShinseiDataInfo shinseiInfo=new ShinseiDataInfo();
            shinseiInfo.setJokyoIds(JOKYO_ID);
            shinseiInfo.setRyouikiNo(ryoikikeikakushoInfo.getKariryoikiNo());
            shinseiDataInfoDao.updateShinseis(connection,shinseiInfo,status);                 

            IPdfConvert pdfConvert = new PdfConvert();
            pdfConvert.convertRyoikiGaiyoPdfForConfirm(connection, userInfo, iodFile, ryoikikeikakushoPk); // 内部でXML変換も同時に行う
//2006/07/21　苗　追加ここまで            
            
            // 更新正常終了
            success = true;
        } catch (SystemBusyException se) {
            throw new ApplicationException("検索実行中にエラーが発生しました。",
                                           new ErrorInfo("errors.4004"), se);
        } catch(DataAccessException de){
            throw new ApplicationException("DBアクセス処理でエラーが発生しました",
                    new ErrorInfo("errors.4000"), de);
        } finally {            
            if (success) {
                DatabaseUtil.commit(connection);
            } else {
                DatabaseUtil.rollback(connection);
            }                      
            DatabaseUtil.closeConnection(connection);
        }
        // 2006/06/29 zjp　追加ここから     
        // ---------------
        // メール送信
        // ---------------

        String jigyoCd = ryoikikeikakushoInfo.getJigyoCd();
        if (jigyoCd != null
                && (IJigyoCd.JIGYO_CD_GAKUSOU_HIKOUBO.equals(jigyoCd)
                        || IJigyoCd.JIGYO_CD_GAKUSOU_KOUBO.equals(jigyoCd)
                        || IJigyoCd.JIGYO_CD_TOKUSUI.equals(jigyoCd) 
                        || IJigyoCd.JIGYO_CD_TOKUTEI_SINKI.equals(jigyoCd))) {
            // -----メール差出人情報取得
            String to = null;
            try {
                //当該申請者の所属機関担当者情報を取得する
                String shozokuCd = ryoikikeikakushoInfo.getShozokuCd();
                IShozokuMaintenance shozokuMainte = new ShozokuMaintenance();
                List shozokuTantoList = shozokuMainte.searchShozokuInfo(userInfo, shozokuCd);
                //所属担当者情報が取得できなかった場合
                if (shozokuTantoList == null || shozokuTantoList.size() == 0) {
                    log.warn("所属機関担当者情報を取得できませんでした。所属コード:" + shozokuCd);
                    return;
                }
                //リストの１人目の情報を取得する（担当者Email1に対してのみ送信する）
                to = (String) ((Map) shozokuTantoList.get(0)).get("TANTO_EMAIL");
            }
            catch (ApplicationException e) {
                log.warn("メール宛先情報取得に失敗しました。", e);
                return;
            }

            // 　【機関番号・整理番号】を取得する
            String uketukeNo = new StringBuffer(ryoikikeikakushoInfo.getJimutantoShozokuCd())
                    .append("-").append(ryoikikeikakushoInfo.getUketukeNo()).toString();

            //研究種目名
            String jigyoName = "平成" + ryoikikeikakushoInfo.getNendo() + "年度 ";

            //回数チェック
            String kaishu = ryoikikeikakushoInfo.getKaisu();
            if (kaishu != null && Integer.parseInt(kaishu) > 1) {
                jigyoName = jigyoName + "第" + kaishu + "回 ";
            }

            jigyoName = jigyoName + ryoikikeikakushoInfo.getJigyoName();

            //-----メール本文ファイルの読み込み
            String content = null;
            try {
                File contentFile = new File(CONTENT_SHINSEISHO_KAKUNIN_KANRYO);
                FileResource fileRes = FileUtil.readFile(contentFile);
                content = new String(fileRes.getBinary());
            }
            catch (FileNotFoundException e) {
                log.warn("メール本文ファイルが見つかりませんでした。", e);
                return;
            }
            catch (IOException e) {
                log.warn("メール本文ファイル読み込み時にエラーが発生しました。", e);
                return;
            }
            //-----メール本文ファイルの動的項目変更
            String[] param = new String[] { jigyoName, // 事業名
                    ryoikikeikakushoInfo.getRyoikiName(), // 領域名
                    ryoikikeikakushoInfo.getNameKanjiSei(), // 領域代表者氏名（漢字等-姓）
                    ryoikikeikakushoInfo.getNameKanjiMei(), // 領域代表者氏名（漢字等-名）
                    uketukeNo, // 機関番号・整理番号
            };
            content = MessageFormat.format(content, param);

            //-----メール送信
            try {
                SendMailer mailer = new SendMailer(SMTP_SERVER_ADDRESS);
                mailer.sendMail(FROM_ADDRESS, //差出人
                        to, //to
                        null, //cc
                        null, //bcc
                        SUBJECT_SHINSEISHO_KAKUNIN_KANRYO, //件名
                        content); //本文
            }
            catch (Exception e) {
                log.warn("メール送信に失敗しました。", e);
                return;
            }
        }

    }
    //2006/06/29 zjp　追加ここまで
    //2006/06/27 宮　追加ここまで
    
    
    //2006.09.25 iso iso タイトルに「概要」をつけたPDF作成のため
    /**
     * 領域計画書概要PDF作成
     * @param userInfo  UserInfo
     * @return なし
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    public void GaiyoPdfConvert(UserInfo userInfo) throws NoDataFoundException,ApplicationException {
    	
        //DBコネクションの取得
        Connection connection = null;

        //--------------------
        // 変換対象データ検索
        //--------------------
        boolean success = false;
        RyoikiKeikakushoInfo[] ryoikikeikakushoInfo = null;
        RyoikiKeikakushoPk pkInfo = new RyoikiKeikakushoPk();
        KenkyuSoshikiKenkyushaInfo kenkyuInfo = new KenkyuSoshikiKenkyushaInfo();
        
        kenkyuInfo.setJokyoId(new String[]{StatusCode.STATUS_GAKUSIN_JYURI});
        
        try {
            connection = DatabaseUtil.getConnection();
            RyoikiKeikakushoInfoDao ryoikikeikakushoInfoDao = new RyoikiKeikakushoInfoDao(userInfo);

            //変換対象の領域計画書リストを取得する。
            ryoikikeikakushoInfo = ryoikikeikakushoInfoDao.selectRyoikiKeikakushoDataInfosForLock(connection);

            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(userInfo);
            //----------------------------
            //保存ファイルの作成(PDF)
            //----------------------------
            for(int i = 0; ryoikikeikakushoInfo.length > i; i++) {
            	
            	kenkyuInfo.setKariryoikiNo(ryoikikeikakushoInfo[i].getKariryoikiNo());
            	
                // PDFの研究経費表データを検索
                List kenkyuKeihiList
                	= shinseiDataInfoDao.selectKenkyuKeihiList(connection, kenkyuInfo);
                ryoikikeikakushoInfo[i].setKenkyuKeihiList(kenkyuKeihiList);

                // PDFの研究組織表を検索
                List KenkyuSosikiList = shinseiDataInfoDao.selectKenkyuSosiki(connection, kenkyuInfo);
                ryoikikeikakushoInfo[i].setKenkyuSosikiList(KenkyuSosikiList);

                File outFile = new File(MessageFormat.format(RG_PDF_FOLDER,
                        new Object[] { ryoikikeikakushoInfo[i].getJigyoId(),
                        ryoikikeikakushoInfo[i].getUketukeNo() }));
                if (log.isDebugEnabled()) {
                    log.debug("領域計画書概要データPDF変換ファイルは'" + outFile + "'です。");
                }
                
                //「概要」のついたファイルに変換
                IPdfConvert pdfConvert = new PdfConvert();
                FileResource fileResource = null;
                try{
                	fileResource = pdfConvert.convertRyoikiKeikakushoGaiyo(connection, userInfo, ryoikikeikakushoInfo[i]);
                }catch(ApplicationException e){
                	pdfLog.info(e.getMessage()
            				+ "\n仮領域番号：" + ryoikikeikakushoInfo[i].getKariryoikiNo()
            				+ "\n受付番号：" + ryoikikeikakushoInfo[i].getUketukeNo());
                	throw e;
                }
                
                //添付ファイルのPDFを取得
                pkInfo.setRyoikiSystemNo(ryoikikeikakushoInfo[i].getRyoikiSystemNo());
                List tenpuList = new ArrayList();
                try {
                    tenpuList = ryoikikeikakushoInfoDao.getTenpuFilesToMerge(connection, pkInfo);
                } catch(NoDataFoundException e) {
                	//添付ファイル無しもあるので何もしない。
                }
                
                try{
                	pdfConvert.writeGaiyoFileResource(connection, userInfo, fileResource, tenpuList, outFile);
                }catch(NoDataFoundException e){
                	pdfLog.info(e.getMessage()
                				+ "\n仮領域番号：" + ryoikikeikakushoInfo[i].getKariryoikiNo()
                				+ "\n受付番号：" + ryoikikeikakushoInfo[i].getUketukeNo());
                }
            }
            // 更新正常終了
            success = true;
        } catch (SystemBusyException se) {
            throw new ApplicationException("検索実行中にエラーが発生しました。",
                                           new ErrorInfo("errors.4004"), se);
        } catch(DataAccessException de){
            throw new ApplicationException("DBアクセス処理でエラーが発生しました",
                    new ErrorInfo("errors.4000"), de);
        } finally {
            DatabaseUtil.closeConnection(connection);
        }
        if(success) {
        	log.info("領域計画書概要PDF作成正常終了");
        }
    }

    /**
     * 計画研究の小計の値で返する。
     * 
     * @param result 検索結果リスト(HashMapのリスト)
     * @param keihiName 検索された名前(String)
     * @return int 計画研究の小計の値した検索結果
     */
    private int getKeikakuSubtotalInfo(List result, String keikakuName) {
        if (result == null || result.size() == 0) {
            return 0;
        }
        int subtotal = 0;
        int keihi = 0;
        for (int i = 0; i < result.size(); i++) {
            BigDecimal keihiDecimal = (BigDecimal)((HashMap)result.get(i)).get(keikakuName);
            keihi = keihiDecimal.intValue();
            subtotal += keihi;
        }
        return subtotal;
    }

    
//2006/07/04 苗　追加ここから
    /**
     * 応募年数チェック（特定領域（継続領域）用）
     * 
     * @param connection Connection
     * @param dataInfo ShinseiDataInfo
     * @param errors List
     * @return boolean
     * @throws ApplicationException
     */
    //2006.11.29 iso 上位でフラグを使用していないのでvoidに変更
//    private boolean ouboNennsuuCheckForKeyizoku(Connection connection,
    private void ouboNennsuuCheckForKeyizoku(Connection connection,
            ShinseiDataInfo dataInfo, List errors) throws ApplicationException {
        
    	//2006.11.29 iso 「計画研究」ではなく「公募研究」のチェックなので、修正
//        if(IShinseiMaintenance.KUBUN_KEIKAKU.equals(dataInfo.getKenkyuKubun())){
        if(IShinseiMaintenance.KUBUN_KOUBO.equals(dataInfo.getKenkyuKubun())){

            String ryouikiNo = dataInfo.getRyouikiNo();// 仮領域番号
            String komokuNo = dataInfo.getRyouikiKoumokuNo();// 研究項目番号
            RyouikiInfoPk pkInfo = new RyouikiInfoPk(ryouikiNo,komokuNo);// キー情報
    
            Map result = new HashMap();
    
            try{
                result = MasterRyouikiInfoDao.selectRecord(connection,pkInfo,null);
            }catch(DataAccessException ex) {
                throw new ApplicationException("領域マスタテーブル検索中にエラーが発生しました。",
                        new ErrorInfo("errors.4004"));
            }catch (NoDataFoundException e) {
                throw new NoDataFoundException(" 領域マスタテーブルに該当する情報が存在しません。",
                        new ErrorInfo("errors.5002"), e);
            }
            
            //設定期間（終了年度）
            String setteiKikanShuryo = StringUtil.defaultString(result.get("SETTEI_KIKAN_SHURYO"));
            //設定期間（開始年度）
            String setteiKikanKaishi = StringUtil.defaultString(result.get("SETTEI_KIKAN_KAISHI"));
            
            if(!StringUtil.isBlank(setteiKikanShuryo) && !StringUtil.isBlank(setteiKikanKaishi)){
            	//2006.11.29 iso 領域マスタの期間をチェックするよう変更
//                int kennsu = Integer.parseInt(setteiKikanShuryo) - Integer.parseInt(setteiKikanKaishi);
//                if(kennsu == 2){
//                    KenkyuKeihiInfo[] kenhi = dataInfo.getKenkyuKeihiSoukeiInfo().getKenkyuKeihi();
//                    if(Integer.parseInt(kenhi[1].getKeihi()) == 0 || Integer.parseInt(kenhi[1].getKeihi()) < 100){
//                        errors.add(new ErrorInfo("errors.5031",
//                                new String[]{"研究経費 2 行目","100"}, "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//                        return false;
//                    } else if (Integer.parseInt(kenhi[0].getKeihi()) < 100 ){
//                        errors.add(new ErrorInfo("errors.5031",
//                                new String[]{"研究経費 1 行目","100"}, "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//                        return false;
//                    } else if (Integer.parseInt(kenhi[2].getKeihi()) != 0){
//                        errors.add(new ErrorInfo("errors.5032",
//                                new String[]{"設定期間","2年","研究経費 3 行目"}, "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//                        return false;
//                    } else if (Integer.parseInt(kenhi[3].getKeihi()) != 0){
//                        errors.add(new ErrorInfo("errors.5032",
//                                new String[]{"設定期間","2年","研究経費 4 行目"}, "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//                        return false;
//                    } else if (Integer.parseInt(kenhi[4].getKeihi()) != 0){
//                        errors.add(new ErrorInfo("errors.5032",
//                                new String[]{"設定期間","2年","研究経費 5 行目"}, "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//                        return false;
//                    }
//                }
            	//経費チェックは、上位のバリデーションで以下の経費チェックが済んでいることを前提とする
            	//・経費が入力されている場合、10万円以上
            	//・n年目が入力されている場合、n-1年目以下があれば入力済み
            	//・n年目が0の場合、n+1年目以上があれば0
            	
            	//他にも上位ではじかれる状況があるので、ここのチェックまで来ない場合もある。
            	//例：設定期間が1年で1行目が0の場合は、上位でエラーとなるのでここまでこない。
            	//例：公募研究では3年目以上が入力されていた場合、上位でエラーとなるのでここまでこない。
            	int setteiKikan = Integer.parseInt(setteiKikanShuryo) - Integer.parseInt(setteiKikanKaishi) + 1;
            	KenkyuKeihiInfo[] kehi = dataInfo.getKenkyuKeihiSoukeiInfo().getKenkyuKeihi();
            	//設定期間が1年間の時
            	if(setteiKikan == 1) {
            		//経費1年目が0ならエラー
            		if(Integer.parseInt(kehi[0].getKeihi()) == 0) {
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 1行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 1行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal0"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            		//経費2年目が入力されていたらエラー
            		else if(Integer.parseInt(kehi[1].getKeihi()) > 0) {
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 2行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 2行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal1"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            	}
            	//設定期間が2年間の時
            	else if(setteiKikan == 2) {
            		//経費2年目が0ならエラー
            		if(Integer.parseInt(kehi[1].getKeihi()) == 0) {
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 2行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 2行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal1"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            		//経費3年目が入力されていたらエラー
            		else if(Integer.parseInt(kehi[2].getKeihi()) > 0) {
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 3行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 3行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal2"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            	}
            	//設定期間が3年間の時
            	else if(setteiKikan == 3) {
            		//経費3年目が0ならエラー
            		if(Integer.parseInt(kehi[2].getKeihi()) == 0) {
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 3行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 3行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal2"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            		//経費4年目が入力されていたらエラー
            		else if(Integer.parseInt(kehi[3].getKeihi()) > 0) {
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 4行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 4行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal3"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            	}
            	//設定期間が4年間の時
            	else if(setteiKikan == 4) {
            		//経費4年目が0ならエラー
            		if(Integer.parseInt(kehi[3].getKeihi()) == 0) {
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 4行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 4行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal3"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            		//経費5年目が入力されていたらエラー
            		else if(Integer.parseInt(kehi[4].getKeihi()) > 0) {
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 5行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5073",
            					new String[]{String.valueOf(setteiKikan), "研究経費 5行目 "},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal4"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            	}
            	//設定期間が5年間の時
            	else if(setteiKikan == 5) {
            		//経費5年目が0ならエラー
            		if(Integer.parseInt(kehi[4].getKeihi()) == 0) {
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 5行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal"));
//ADD　START 2007-07-18 BIS 劉多良
            			errors.add(new ErrorInfo(
            					"errors.5072",
            					new String[]{String.valueOf(setteiKikan), "研究経費 5行目 ", String.valueOf(IShinseiMaintenance.MIN_KENKYUKEIHI)},
            					"shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihiTotal4"));
//ADD　END 2007-07-18 BIS 劉多良
            		}
            		//特定継続の経費は5年間なので、6年目以上はチェックの必要なし
            	}
            	//領域マスタに5年間を超える期間が設定されていた場合
            	else if(setteiKikan > 5) {
            		//エラーとはしないが、ログに記録を残す
            		log.info("領域マスタに5年を超える期間が設定されています。");
            		log.info("領域番号：" + ryouikiNo + ", 項目番号：" + komokuNo + ", 設定期間：" + setteiKikan + "年間");
            	}
            }
        }
//        
//        return true;
    }
//2006/07/04　苗　追加ここまで  
    
    // 2006/07/04 zhangt add start 
    /**
     * 領域計画書概要PDF情報の変換
     * @param userInfo UserInfo
     * @param RyoikiKeikakushoPk ryoikiKeikakushoPk
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#convert(jp.go.jsps.kaken.model.vo.UserInfo,
     *      jp.go.jsps.kaken.model.vo.RyoikiKeikakushoPk)
     */
    public void convertGaiyoApplication(UserInfo userInfo, RyoikiKeikakushoPk ryoikiKeikakushoPk)
            throws NoDataFoundException, ApplicationException {
        // -----申請者IDで排他制御をかける-----
//        synchronized (userInfo.getShinseishaInfo().getShinseishaId().intern()) {
            // ===== PDF変換サービスメソッド呼び出し =====
        IPdfConvert pdfConvert = new PdfConvert();
        pdfConvert.convertRyoikiGaiyoPdf(userInfo, ryoikiKeikakushoPk); // 内部でXML変換も同時に行う
//        }
    }
   
    /**
     * 領域計画書概要PDF情報を取得
     * @param userInfo  UserInfo
     * @param pkInfo    ShinseiDataPk
     * @return ryoikiKeikakushoInfo
     * @throws NoDataFoundException
     * @throws ApplicationException
     */ 
     public RyoikiKeikakushoInfo selectRyoikiKeikakushoInfo(
             UserInfo userInfo,
             RyoikiKeikakushoPk pkInfo)
             throws NoDataFoundException, ApplicationException {

        // DBコネクションの取得
        Connection connection = null;
        // 申請情報
        RyoikiKeikakushoInfo ryoikiKeikakushoInfo = null;
        KenkyuSoshikiKenkyushaInfo kenkyuInfo = new KenkyuSoshikiKenkyushaInfo();
        String[] JOKYO_ID = new String[] {
                StatusCode.STATUS_RYOUIKIDAIHYOU_KAKUNIN,
                StatusCode.STATUS_RYOUIKIDAIHYOU_KAKUTEIZUMI,
//2006/07/11 苗　追加ここから
                StatusCode.STATUS_RYOUIKISHOZOKU_UKETUKE
//2006/07/11 苗　追加ここまで                 
                };
        try {
            connection = DatabaseUtil.getConnection();

            // PDFの領域計画書概要を検索
            RyoikiKeikakushoInfoDao ryoikiKeikakushoInfoDao = new RyoikiKeikakushoInfoDao(
                    userInfo);
            ryoikiKeikakushoInfo = ryoikiKeikakushoInfoDao
                    .selectRyoikiKeikakushoDataInfo(connection, pkInfo);
            kenkyuInfo.setKariryoikiNo(ryoikiKeikakushoInfo.getKariryoikiNo());
            kenkyuInfo.setJokyoId(JOKYO_ID);

            // PDFの研究経費表データを検索
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(
                    userInfo);
            List kenkyuKeihiList = shinseiDataInfoDao.selectKenkyuKeihiList(
                    connection, kenkyuInfo);
            ryoikiKeikakushoInfo.setKenkyuKeihiList(kenkyuKeihiList);

            // PDFの研究組織表を検索
            List KenkyuSosikiList = shinseiDataInfoDao.selectKenkyuSosiki(
                    connection, kenkyuInfo);
            ryoikiKeikakushoInfo.setKenkyuSosikiList(KenkyuSosikiList);
//2006/07/16 zhangt add satrt           
            //---添付ファイル情報
            TenpuFileInfo[] tenpuFileInfos = null;
            try {
                TenpuFileInfoDao dao = new TenpuFileInfoDao(userInfo);
                tenpuFileInfos = dao.selectTenpuFiles(connection, pkInfo);
                ryoikiKeikakushoInfo.setTenpuFileInfos(tenpuFileInfos); // 申請データオブジェクトにセット
            }
            catch (DataAccessException e) {
                throw new ApplicationException("添付ファイル情報検索中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4004"), e);
            }
            catch (NoDataFoundException e) {
                // 添付ファイルが登録されていない場合は何も処理しない
            }
// 2006/07/16 zhangt add end
        }
        catch (NoDataFoundException e) {
            throw new NoDataFoundException("該当する情報が存在しませんでした。", new ErrorInfo("errors.5002"), e);
        }
        catch (DataAccessException de) {
            throw new ApplicationException("検索中にDBエラーが発生しました。", new ErrorInfo("errors.4004"), de);
        }
        finally {
            DatabaseUtil.closeConnection(connection);
        }
        return ryoikiKeikakushoInfo;
    }
     // 2006/07/04 zhangt add end
     
//2006/07/21 苗　追加ここから
    /**
     * 申請情報を取得(応募情報又は研究計画調書確認用)
     * 
     * @param userInfo  UserInfo
     * @param connection  Connection
     * @param pkInfo  ShinseiDataPk
     * @return ShinseiDataInfo
     * @throws NoDataFoundException
     * @throws ApplicationException
     */
    public ShinseiDataInfo selectShinseiDataInfoForConfirm(
            UserInfo userInfo,
            Connection connection,
            ShinseiDataPk pkInfo)
            throws NoDataFoundException, ApplicationException {
            
        //---申請情報
        ShinseiDataInfo shinseiDataInfo = null;
        try {
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            shinseiDataInfo = dao.selectShinseiDataInfo(connection, pkInfo, true);
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "申請書管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
        
        //---事業IDより算出してセット
        String jigyoId = shinseiDataInfo.getJigyoId();
        shinseiDataInfo.setJigyoCd(jigyoId.substring(2,7));         //事業CD
        shinseiDataInfo.setNendoSeireki(jigyoId.substring(0,2));    //年度（西暦）
               
        //---事業情報管理
        JigyoKanriInfo jigyoKanriInfo = null;
        try{
            //事業管理主キーオブジェクトの生成
            JigyoKanriPk jigyoKanriPk = new JigyoKanriPk(jigyoId);
            IJigyoKanriMaintenance jigyoMainte = new JigyoKanriMaintenance();
            jigyoKanriInfo = jigyoMainte.select(userInfo, jigyoKanriPk);
        } catch (ApplicationException e) {
            throw new ApplicationException(
                "事業情報管理管理データ検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }

        //学振受付期間
        shinseiDataInfo.setUketukekikanEnd(jigyoKanriInfo.getUketukekikanEnd());
        //研究者名簿締切日を追加
        if(IJigyoKubun.JIGYO_KUBUN_SHOKUSHINHI.equals(shinseiDataInfo.getKadaiInfo().getJigyoKubun())){
            String meiboDate = jigyoKanriInfo.getMeiboDate().toString();
            shinseiDataInfo.setMeiboDate(jigyoKanriInfo.getMeiboDate());                    //研究者名簿締切日
            DateUtil dateUtil = new DateUtil();
            if (!StringUtil.isBlank(meiboDate)) {
                shinseiDataInfo.setMeiboDateWareki(dateUtil.getJpyString(
                        meiboDate.substring(0, 4), meiboDate.substring(5, 7), 
                        meiboDate.substring(8, 10)));
            }
        }
        
        //---添付ファイル情報
        TenpuFileInfo[] tenpuFileInfos = null;  
        try{
            TenpuFileInfoDao dao = new TenpuFileInfoDao(userInfo);
            tenpuFileInfos = dao.selectTenpuFileInfos(connection, pkInfo);
            shinseiDataInfo.setTenpuFileInfos(tenpuFileInfos);  //申請データオブジェクトにセット
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "添付ファイル情報検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        } catch (NoDataFoundException e) {
            //添付ファイルが登録されていない場合は何も処理しない
        }
        
        //---研究組織情報
        try{
            KenkyuSoshikikanriDao dao = new KenkyuSoshikikanriDao(userInfo);
            List list = dao.selectKenkyuSoshikiKenkyushaInfo(connection, pkInfo);
            shinseiDataInfo.setKenkyuSoshikiInfoList(list);
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "研究組織情報検索中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        } catch (NoDataFoundException e) {
            //研究組織情報が登録されていない場合は何も処理しない
        }
        
        return shinseiDataInfo;
    }
    
    /**
     * 領域計画書概要PDF情報を取得(領域計画書確認用)
     * @param userInfo  UserInfo
     * @param connection コネクション
     * @param pkInfo 領域計画書（概要）キー情報
     * @return ryoikiKeikakushoInfo
     * @throws NoDataFoundException
     * @throws ApplicationException
     */ 
     public RyoikiKeikakushoInfo selectRyoikiKeikakushoInfoForConfirm(
             UserInfo userInfo,
             Connection connection,
             RyoikiKeikakushoPk pkInfo)
             throws NoDataFoundException, ApplicationException {

        // 申請情報
        RyoikiKeikakushoInfo ryoikiKeikakushoInfo = null;
        KenkyuSoshikiKenkyushaInfo kenkyuInfo = new KenkyuSoshikiKenkyushaInfo();
        String[] JOKYO_ID = new String[] {
                StatusCode.STATUS_RYOUIKIDAIHYOU_KAKUNIN,
                StatusCode.STATUS_RYOUIKIDAIHYOU_KAKUTEIZUMI,
                StatusCode.STATUS_RYOUIKISHOZOKU_UKETUKE            
                };
        try {

            // PDFの領域計画書概要を検索
            RyoikiKeikakushoInfoDao ryoikiKeikakushoInfoDao = new RyoikiKeikakushoInfoDao(
                    userInfo);
            ryoikiKeikakushoInfo = ryoikiKeikakushoInfoDao
                    .selectRyoikiKeikakushoDataInfo(connection, pkInfo);
            kenkyuInfo.setKariryoikiNo(ryoikiKeikakushoInfo.getKariryoikiNo());
            kenkyuInfo.setJokyoId(JOKYO_ID);

            // PDFの研究経費表データを検索
            ShinseiDataInfoDao shinseiDataInfoDao = new ShinseiDataInfoDao(
                    userInfo);
            List kenkyuKeihiList = shinseiDataInfoDao.selectKenkyuKeihiList(
                    connection, kenkyuInfo);
            ryoikiKeikakushoInfo.setKenkyuKeihiList(kenkyuKeihiList);

            // PDFの研究組織表を検索
            List KenkyuSosikiList = shinseiDataInfoDao.selectKenkyuSosiki(
                    connection, kenkyuInfo);
            ryoikiKeikakushoInfo.setKenkyuSosikiList(KenkyuSosikiList);           
            //---添付ファイル情報
            TenpuFileInfo[] tenpuFileInfos = null;
            try {
                TenpuFileInfoDao dao = new TenpuFileInfoDao(userInfo);
                tenpuFileInfos = dao.selectTenpuFiles(connection, pkInfo);
                ryoikiKeikakushoInfo.setTenpuFileInfos(tenpuFileInfos); // 申請データオブジェクトにセット
            }
            catch (DataAccessException e) {
                throw new ApplicationException("添付ファイル情報検索中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4004"), e);
            }
            catch (NoDataFoundException e) {
                // 添付ファイルが登録されていない場合は何も処理しない
            }
        }
        catch (NoDataFoundException e) {
            throw new NoDataFoundException("該当する情報が存在しませんでした。", new ErrorInfo("errors.5002"), e);
        }
        catch (DataAccessException de) {
            throw new ApplicationException("検索中にDBエラーが発生しました。", new ErrorInfo("errors.4004"), de);
        }

        return ryoikiKeikakushoInfo;
    }
     
    /**
     * 簡易申請情報を取得.（領域代表者用）<br><br>
     * 複数件の簡易申請情報を取得する。<br><br>
     * 
     * 　※削除画面で使用<br><br>
     * 
     * 自クラスのselectSimpleShinseiDataInfos(UserInfo,ShinseiDataPk[])メソッドを呼ぶ。<br>
     * 引数に、第一引数userInfoと第二引数pkInfoを格納した配列(ShinseiDataPk)を渡す。<br><br>
     * 
     * 取得したSimpleShinseiDataInfoを返却する。<br><br>
     * 
     * @param userInfo  UserInfo
     * @param pkInfo    ShinseiDataPk
     * @return 簡易申請情報(SimpleShinseiDataInfo)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#selectSimpleShinseiDataInfo(jp.go.jsps.kaken.model.vo.UserInfo, jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public SimpleShinseiDataInfo[] selectSimpleShinseiDataInfosForGaiyo(UserInfo userInfo,
            ShinseiDataPk[] pkInfo) throws NoDataFoundException, ApplicationException {
        // DBコネクションの取得
        Connection connection = null;
        try {
            connection = DatabaseUtil.getConnection();

            // ---簡易申請情報
            SimpleShinseiDataInfo[] simpleInfos = null;
            try {
                ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
                simpleInfos = dao.selectSimpleShinseiDataInfos(connection, pkInfo, false);
            }
            catch (DataAccessException e) {
                throw new ApplicationException("申請書管理データ検索中にDBエラーが発生しました。", new ErrorInfo(
                        "errors.4004"), e);
            }

            // 申請状況名をセット
            new StatusManager(userInfo).setStatusNames(connection, simpleInfos);
            return simpleInfos;

        }
        finally {
            DatabaseUtil.closeConnection(connection);
        }
    }
    
    /**
     * 簡易申請情報を取得.（領域代表者用）<br>
     * <br>
     * 簡易申請情報を取得する。<br>
     * <br>
     * ※削除画面で使用<br>
     * <br>
     * 自クラスのselectSimpleShinseiDataInfos(UserInfo,ShinseiDataPk[])メソッドを呼ぶ。<br>
     * 引数に、第一引数userInfoと第二引数pkInfoを格納した配列(ShinseiDataPk)を渡す。<br>
     * <br>
     * 取得したSimpleShinseiDataInfoを返却する。<br>
     * <br>
     * 
     * @param userInfo UserInfo
     * @param pkInfo ShinseiDataPk
     * @return 簡易申請情報(SimpleShinseiDataInfo)
     * @throws NoDataFoundException
     * @throws ApplicationException
     * @see jp.go.jsps.kaken.model.IShinseiMaintenance#selectSimpleShinseiDataInfo(jp.go.jsps.kaken.model.vo.UserInfo,
     *      jp.go.jsps.kaken.model.vo.ShinseiDataPk)
     */
    public SimpleShinseiDataInfo selectSimpleShinseiDataInfoForGaiyo(
        UserInfo userInfo,
        ShinseiDataPk pkInfo)
        throws NoDataFoundException, ApplicationException {
        
        return selectSimpleShinseiDataInfosForGaiyo(userInfo, new ShinseiDataPk[]{pkInfo})[0];
    }
    
    /**
     * すでに同一課題番号での前年度応募がある場合のチェック
     * 
     * @param connection
     * @param userInfo
     * @param shinseiDataInfo
     * @return  resultFlg
     * @throws ApplicationException
     */
    
    private int checkKadaiNoSaisyuForKikan(Connection connection, UserInfo userInfo,
            ShinseiDataInfo shinseiDataInfo) throws ApplicationException {

        int resultFlg = 0;

        ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
        List resultList = new ArrayList();
        try {
            resultList = dao.selectKadaiNoSaisyu(connection, shinseiDataInfo);
            // 継続番号を取得できた場合
            if (resultList.size() != 0) {
                resultFlg = 1;
            }
        } catch (NoDataFoundException e) {
            //継続課題番号が有効ではない
        } catch (DataAccessException e) {
            throw new ApplicationException("申請書管理データ検索中にDBエラーが発生しました。",
                    new ErrorInfo("errors.4004"), e);
        }
        return resultFlg;
    }
//2006/07/21　苗　追加ここまで
    
//2007/02/05 苗　追加ここから
    /**
     * 申請書確認の際、整理番号の重複チェック
     * 
     * @param connection    Connection
     * @param userInfo        UserInfo
     * @param dataInfo        ShinseiDataInfo
     * @return　申請番号
     * @throws ApplicationException
     */
    private boolean checkUketukeNumber(Connection connection,
                                   UserInfo userInfo,
                                   ShinseiDataInfo dataInfo)
                                   throws ApplicationException {
        try{
            ShinseiDataInfoDao dao = new ShinseiDataInfoDao(userInfo);
            int seiriNumberCount = dao.countSeiriNumber(connection, dataInfo);
            //「1」がカウントされた場合、正常値なので、そのまま処理を続ける。
            if (seiriNumberCount == 1) {
                return true;
            } else {
                return false;
            }
                                
        }catch(DataAccessException e){
            throw new ApplicationException(
                "申請番号採番中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
    }
    
    /**
     * 領域計画書概要確認完了確認の際、整理番号の重複チェック.<br><br>
     * 
     * @param connection                Connection
     * @param userInfo                  UserInfo
     * @param ryoikikeikakushoInfo      RyoikikeikakushoInfo
     * @return　受付番号（整理番号）
     * @throws ApplicationException
     */
    private boolean checkUketukeNumberForGaiyo(Connection connection, UserInfo userInfo,
            RyoikiKeikakushoInfo ryoikikeikakushoInfo) throws ApplicationException {
        
        try{
            RyoikiKeikakushoInfoDao dao = new RyoikiKeikakushoInfoDao(userInfo);

            int seiriNumberCount = dao.countUketukeNo(connection, ryoikikeikakushoInfo);
            
            //「1」がカウントされた場合、正常値なので、そのまま処理を続ける。
            if (seiriNumberCount == 1) {
                return true;
            } else {
                return false;
            }
        }catch(DataAccessException e){
            throw new ApplicationException(
                "受付番号（整理番号）採番中にDBエラーが発生しました。",
                new ErrorInfo("errors.4004"),
                e);
        }
    }
//2007/02/05　苗　追加ここまで 

//2007/03/02 苗　追加ここから
    /**
     * 申請書確認確認完了確認の際、申請機関確定済みのチェック.<br><br>
     * 
     * @param userInfo             UserInfo
     * @param shinseiDataInfo      ShinseiDataInfo
     * @return　boolean
     * @throws ApplicationException
     */
    private boolean checkSinseiKikanKakutei(UserInfo userInfo,
            ShinseiDataInfo shinseiDataInfo) throws ApplicationException {

        String shozokuCd = userInfo.getShinseishaInfo().getShozokuCd();   // ShozokuCdを取得
        String jigyoId = shinseiDataInfo.getJigyoId(); // JigyoIdを取得
        Connection connection = null;
        boolean bFlag = false;
        try {
            connection = DatabaseUtil.getConnection();
            CheckListInfoDao dao = new CheckListInfoDao(userInfo);
            bFlag = dao.checkKakuteibi(connection, shozokuCd, jigyoId);            
        } catch (DataAccessException e) {
            throw new ApplicationException(
                "申請機関確定済みチェックエラーが発生しました。",
                new ErrorInfo("errors.4005"),   e);
        } finally {
            DatabaseUtil.closeConnection(connection);
        }           
        return bFlag;
    }
//2007/03/02　苗　追加ここまで    
//<!-- ADD　START 2007/07/10 BIS 張楠 -->
	/**
	 * 研究組織表情報をupdate
	 * 
	 * @param userInfo 実行するユーザ情報
	 * @param dataInfo KenkyuSoshikiKenkyushaInfo	
	 * @throws ApplicationException	
	 * @throws DataAccessException
	 */
	public void updateHyojijun(UserInfo userInfo, KenkyuSoshikiKenkyushaInfo dataInfo) throws ApplicationException, ValidationException,DataAccessException {
		
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {
        	connection = DatabaseUtil.getConnection();
            String updateQuery =
                "UPDATE SHINSEIDATAKANRI "
                    + " SET"
                    + " HYOJIJUN  = '" 
                    + dataInfo.getHyojijun()
                    + "' "
                    + " WHERE SYSTEM_NO = '" + dataInfo.getSystemNo()
                    + "'"
                    ;
            //更新
            preparedStatement = connection.prepareStatement(updateQuery);
            DatabaseUtil.executeUpdate(preparedStatement);  
            DatabaseUtil.commit(connection);
		}catch (SQLException e) {
			throw new DataAccessException("申請データテーブル更新中に例外が発生しました。", e);
		}finally {
            DatabaseUtil.closeResource(null, preparedStatement);
        }
	}
//<!-- ADD　END　 2007/07/10 BIS 張楠 -->	
	
// ADD START 2007-07-10 BIS 王志安
    /**
     * 研究課題情報取得
     * @throws SystemBusyException 
     * @throws DataAccessException 
     * @throws NoDataFoundException 
     */
    public KeizokuInfo getKenkyukadaiInfo(UserInfo userInfo, String kenkyuNo, String kadaiNo)
			throws SystemBusyException, NoDataFoundException,
			DataAccessException {
    	
    	Connection con = null;
    	List data = null;
    	try {
    		con = DatabaseUtil.getConnection();
    		data = new MasterKeizokuInfoDao(userInfo).select(con, kenkyuNo, kadaiNo);
    	} finally {
        	DatabaseUtil.closeConnection(con);
        }
    	
    	if (data == null || data.size() <= 0) {
    		throw new NoDataFoundException(
					"継続課題マスタテーブルに該当するデータが見つかりません。検索キー：研究者番号'"
						+ kenkyuNo
						+"', 課題番号'"
						+ kadaiNo
						+ "'");
		}
    	
		KeizokuInfo keizokuInfo = (KeizokuInfo) data.get(0);
		keizokuInfo.setJigyoId(kenkyuNo);
		keizokuInfo.setKadaiNo(kadaiNo);
		String kadaiName = keizokuInfo.getKadaiNameKanji();
		String naiyaku1 = keizokuInfo.getNaiyakugaku1();
		String naiyaku2 = keizokuInfo.getNaiyakugaku2();
		String naiyaku3 = keizokuInfo.getNaiyakugaku3();
		String naiyaku4 = keizokuInfo.getNaiyakugaku4();
		String naiyaku5 = keizokuInfo.getNaiyakugaku5();
		keizokuInfo.setKadaiNameKanji(kadaiName == null ? ""
				: kadaiName);
		keizokuInfo.setNaiyakugaku1(naiyaku1 == null
				|| "".equals(naiyaku1) ? "0" : naiyaku1);
		keizokuInfo.setNaiyakugaku2(naiyaku2 == null
				|| "".equals(naiyaku2) ? "0" : naiyaku2);
		keizokuInfo.setNaiyakugaku3(naiyaku3 == null
				|| "".equals(naiyaku3) ? "0" : naiyaku3);
		keizokuInfo.setNaiyakugaku4(naiyaku4 == null
				|| "".equals(naiyaku4) ? "0" : naiyaku4);
		keizokuInfo.setNaiyakugaku5(naiyaku5 == null
				|| "".equals(naiyaku5) ? "0" : naiyaku5);
		
		return keizokuInfo;
	}
// ADD END 2007-07-10 BIS 王志安
//<!-- ADD　START 2007/07/20 BIS 張楠 -->
    /**
     * 領域内研究計画調書の初年度研究経費チェック
     * @param userInfo  UserInfo
     * @param ryouikiNo  仮領域番号
     * @return なし
     * @throws ValidationException
     * @throws ApplicationException
     */
	public void CheckKenkyuKeihiSoukeiInfo(UserInfo userInfo, String ryouikiNo) throws ApplicationException {
    	Connection connection = null;
        PreparedStatement ps = null;
        PreparedStatement psTotal = null;
        ResultSet resutlt = null;
        ResultSet resutltTotal = null;

        String query = 
        		"SELECT KOMOKU_NO,CHOSEIHAN,NAME_KANJI_SEI,NAME_KANJI_MEI " +
        		"FROM SHINSEIDATAKANRI " +
        		"WHERE JOKYO_ID='23' " +
        		"AND ryoiki_no='" + EscapeUtil.toSqlString(ryouikiNo) +
        		"' ORDER BY KOMOKU_NO ASC,CHOSEIHAN DESC,HYOJIJUN ASC,UKETUKE_NO ASC";
        
        //仮領域番号のチェック：領域計画書概要テーブルに当該年度の削除フラグ=0で存在する番号
        StringBuffer chSQL =  new StringBuffer();
        
        chSQL.append("SELECT  Count(R.zennendo_oubo_no) ");
        chSQL.append(STR_COUNT);
        chSQL.append(" FROM RYOIKIKEIKAKUSHOINFO R WHERE R.DEL_FLG = 0");
        chSQL.append("  AND R.KARIRYOIKI_NO = '");
        chSQL.append(EscapeUtil.toSqlString(ryouikiNo));
        chSQL.append("'  And R.zennendo_oubo_flg='1'");
        
        String total = 
        	"SELECT SUM(A.KEIHI1) AS KEIHI1 " +
        	"FROM SHINSEIDATAKANRI A INNER JOIN RYOIKIKEIKAKUSHOINFO B " +
        	"ON A.RYOIKI_NO =　B.KARIRYOIKI_NO " +
        	"WHERE A.DEL_FLG = 0 " +
        	"AND B.DEL_FLG = 0 " +
        	"AND B.KARIRYOIKI_NO = '" + EscapeUtil.toSqlString(ryouikiNo) +
        	"'";
        String keihiTotal = null;
        String property = null;
    	try {
    		connection = DatabaseUtil.getConnection();
    		ps = connection.prepareStatement(query.toString());
    		resutlt = ps.executeQuery();
    		
    		RyoikiKeikakushoInfoDao  ryoikikeikakushoInfoDao = new RyoikiKeikakushoInfoDao(userInfo);
    		String count = ryoikikeikakushoInfoDao.selectRyoikiNoCount(connection, chSQL.toString());

    		psTotal = connection.prepareStatement(total);
    		resutltTotal = psTotal.executeQuery();
    		if(resutltTotal.next()){
    			keihiTotal = resutltTotal.getString("KEIHI1");
    		}
    		boolean mark = true;
            //-----形式チェック＋値セット-----
            List errors = new ArrayList();
    		while(resutlt.next()){
    			String komokuNo = resutlt.getString("KOMOKU_NO");
    			String choseihan = resutlt.getString("CHOSEIHAN");
    			String nameKanjiSei = resutlt.getString("NAME_KANJI_SEI");
    			String nameKanjiMei = resutlt.getString("NAME_KANJI_MEI");
    			if (!"X00".equals(komokuNo)) {
					if (!"0".equals(count)) {
						if (!(0 == Integer.parseInt(keihiTotal))) {
							String Temp1 = null;
							String Temp2 = null;
			                 if("Y00".equals(komokuNo)){
			                	 Temp1 = "支援班";
			                	 Temp2 = "("+komokuNo+")";
			                	 if(mark){
							            String msg1  = "します。";
							            String msg2  = "0";
							            property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Title";
							            errors.add(new ErrorInfo("errors.9011", new String[]{msg1,msg2}, property));	
							            mark = false;
			                	 }
								 property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Total";
								 errors.add(new ErrorInfo("errors.9012", new String[]{Temp1,Temp2,nameKanjiSei,nameKanjiMei}, property));
			                 }else{
			                	 if("1".equals(choseihan)){
				                	 Temp2 = "(調整班)";
				                	 if(mark){
								            String msg1  = "します。";
								            String msg2  = "0";
								            property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Title";
								            errors.add(new ErrorInfo("errors.9011", new String[]{msg1,msg2}, property));	
								            mark = false;
				                	 }
									 property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Total";
									 errors.add(new ErrorInfo("errors.9012", new String[]{komokuNo,Temp2,nameKanjiSei,nameKanjiMei}, property));
			                	 }else if("0".equals(choseihan)){
				                	 Temp2 = "計画研究";
				                	 if(mark){
								            String msg1  = "します。";
								            String msg2  = "0";
								            property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Title";
								            errors.add(new ErrorInfo("errors.9011", new String[]{msg1,msg2}, property));	
								            mark = false;
				                	 }
									 property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Total";
									 errors.add(new ErrorInfo("errors.9012", new String[]{komokuNo,Temp2,nameKanjiSei,nameKanjiMei}, property));
			                	 }
			                 }
						}
					} else {
						if (Integer.parseInt(keihiTotal) < 100) {
							String Temp1 = null;
							String Temp2 = null;
			                 if("Y00".equals(komokuNo)){
			                	 Temp1 = "支援班";
			                	 Temp2 = "("+komokuNo+")";
			                	 if(mark){
							            String msg1  = "しません。";
							            String msg2  = "10万";
							            property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Title";
							            errors.add(new ErrorInfo("errors.9011", new String[]{msg1,msg2}, property));	
							            mark = false;
			                	 }
								 property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Total";
								 errors.add(new ErrorInfo("errors.9012", new String[]{Temp1,Temp2,nameKanjiSei,nameKanjiMei}, property));
			                 }else{
			                	 if("1".equals(choseihan)){
				                	 Temp2 = "(調整班)";
				                	 if(mark){
								            String msg1  = "しません。";
								            String msg2  = "10万";
								            property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Title";
								            errors.add(new ErrorInfo("errors.9011", new String[]{msg1,msg2}, property));	
								            mark = false;
				                	 }
									 property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Total";
									 errors.add(new ErrorInfo("errors.9012", new String[]{komokuNo,Temp2,nameKanjiSei,nameKanjiMei}, property));
			                	 }else if("0".equals(choseihan)){
				                	 Temp2 = "計画研究";
				                	 if(mark){
								            String msg1  = "しません。";
								            String msg2  = "10万";
								            property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Title";
								            errors.add(new ErrorInfo("errors.9011", new String[]{msg1,msg2}, property));
								            mark = false;
				                	 }
									 property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0Total";
									 errors.add(new ErrorInfo("errors.9012", new String[]{komokuNo,Temp2,nameKanjiSei,nameKanjiMei}, property));
			                	 }
			                 }
						}
					}
    			}
    		}
    		if(errors.size()>0){
    			String msg  = "「領域計画書作成」画面から確定を解除して、訂正が必要な研究計画調書を却下してください。";
    			property = "shinseiDataInfo.kenkyuKeihiSoukeiInfo.keihi0";
    			errors.add(new ErrorInfo("errors.9013", new String[]{},property));
                String errorsmes = "領域計画書データ形式チェックで検証エラーとなりました。";
                throw new ValidationException(errorsmes, errors);
    		}
    	} catch(DataAccessException ex){
        	ex.printStackTrace();
            throw new ApplicationException("仮領域番号の検索中にエラーが発生しました。",new ErrorInfo("errors.4004"));
        } catch (SQLException e) {
			e.printStackTrace();
		} finally {
        	DatabaseUtil.closeResource(resutlt, ps);
        	DatabaseUtil.closeResource(resutltTotal, psTotal);
        	DatabaseUtil.closeConnection(connection);
        }
	}
//<!-- ADD　END 2007/07/20 BIS 張楠 -->	
}